<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>setrlimit 101</title>
      <link href="/2018/11/05/setrlimit-101/"/>
      <url>/2018/11/05/setrlimit-101/</url>
      
        <content type="html"><![CDATA[<p>在利用seccomp和ptrace对程序在系统调用行为上做出限制之后，剩下的就需要在资源上（如运行时间、使用内存）做出限制，这个需求可以使用<code>setrlimit</code>来实现。因此学习一下它的使用。</p><a id="more"></a> <p>无论是<code>setrlimit</code>或者是<code>getrlimit</code>都是通过以下结构体进行资源定义：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> rlimit <span class="token punctuation">{</span>   rlim_t rlim_cur<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Soft limit */</span>   rlim_t rlim_max<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Hard limit (ceiling for rlim_cur) */</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>它们的的函数原型如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getrlimit</span><span class="token punctuation">(</span><span class="token keyword">int</span> resource<span class="token punctuation">,</span> <span class="token keyword">struct</span> rlimit <span class="token operator">*</span>rlim<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">setrlimit</span><span class="token punctuation">(</span><span class="token keyword">int</span> resource<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> rlimit <span class="token operator">*</span>rlim<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>软限制是内核直接应用执行的资源量限制，硬限制则是作为软限制值的一个上界而存在。对于拥有<code>CAP_SYS_RESOURCE</code>权限的进程来说，可以任意调整软限制或者硬限制值，而对于非特权进程，只能在硬限制范围内调整软限制值，或者不可逆的降低硬限制值。</p><p>另外对于无限制，有一个特殊的值<code>RLIM_INFINITY</code>用来指示无限制，这个值在64位系统下应该为$2^{64}-1=18446744073709551615$</p><p>以下整理了一个常用的资源限制表：</p><table><thead><tr><th align="center">资源名</th><th align="center">参数</th><th align="center">单位</th><th>备注</th></tr></thead><tbody><tr><td align="center">地址空间</td><td align="center">RLIMIT_AS</td><td align="center">byte</td><td>即虚拟内存，向下取整到系统页大小，会影响<code>brk</code>,<code>mmap</code>,<code>mremap</code>等系统调用，一旦超出限制，程序会以<code>ENOMEM</code>错误退出。另外，如果无法通过<code>sigaltstack</code>自动扩容栈空间，将会生成<code>SIGSEGV</code>信号并终止程序。</td></tr><tr><td align="center">转储文件大小</td><td align="center">RLIMIT_CORE</td><td align="center">byte</td><td>程序能够生成的转储文件大小。为0时不生成转储文件，大于0时将会截断多余的部分。</td></tr><tr><td align="center">CPU时间</td><td align="center">RLIMIT_CPU</td><td align="center">s</td><td>限制进程能够消耗的CPU时间，如果达到了软限制，将会发送<code>SIGXCPU</code>信号，虽然这个信号默认行为是终止进程，但是是可以被重编程的。如果继续消耗CPU时间，达到硬限制时将会发送<code>SIGKILL</code>信号并强制终止程序。</td></tr><tr><td align="center">数据段大小</td><td align="center">RLIMIT_DATA</td><td align="center">byte</td><td>限制程序的数据段大小，包括初始化数据，未初始化数据以及堆大小。取值将会向下取整到系统页大小，影响<code>brk</code>，<code>sbrk</code>，<code>mmap</code>等系统调用。一旦达到软限制将会抛出<code>ENOMEM</code>错误。</td></tr><tr><td align="center">生成文件大小</td><td align="center">RLIMIT_FSIZE</td><td align="center">byte</td><td>进程能够创建的最大文件大小，超出限制时将会发送一个可重编程的<code>SIGXFSZ</code>信号，如果这个信号没有终止程序，相应的系统调用（如<code>write</code>，<code>truncate</code>）将会以<code>EFBIG</code>错误退出。</td></tr><tr><td align="center">栈空间大小</td><td align="center">RLIMIT_STACK</td><td align="center">byte</td><td>程序所能使用的最大栈空间大小，一旦达到限制，将会生成<code>SIGSEGV</code>信号。</td></tr><tr><td align="center">打开文件描述符数量</td><td align="center">RLIMIT_NOFILE</td><td align="center">-</td><td>限制程序最大能打开的文件描述符数量，影响<code>open</code>，<code>pipe</code>，<code>dup</code>等系统调用，如果超出限制，将会产生<code>EMFILE</code>错误。</td></tr><tr><td align="center">进程数量</td><td align="center">RLIMIT_NPROC</td><td align="center">-</td><td>限制程序能够产生的最大进程数（在linux下，这个更精确的定义是线程数），一旦超出限制，<code>fork</code>系统调用将会以<code>EAGAIN</code>错误失败退出。注意，对于拥有<code>CAP_SYS_ADMIN</code>或者<code>CAP_SYS_RESOURCE</code>能力的进程来说这个限制无效。</td></tr></tbody></table><p>在上表中可以发现几个问题，首先涉及到内存的资源有<code>RLIMIT_AS</code>，<code>RLIMIT_DATA</code>，<code>RLIMIT_STACK</code>，这三个内存的关系在这里有比较直观的介绍：<a href="https://www.geeksforgeeks.org/memory-layout-of-c-program/" target="_blank" rel="noopener">memory-layout-of-c-program</a>, 所以一般情况下直接对地址空间大小进行限制即可。</p><p>第二个是与时间相关的限制，可以看到只有一个CPU时间，并且其单位为秒，如果直接在Ubuntu终端使用time命令对程序执行进行测量，会发现三个时间：user cpu time、system cpu time和wall time。wall time如字面义，墙上时钟时间，即程序执行过程中实际流逝的时间。前两者则分别是用户程序和系统消耗的cpu时间。cpu time和wall time 两者是区分程序是否是并行程序的重要标准。对于传统的竞赛题目及代码来说，由于都是单核模型，wall time是一定不小于cpu time的。</p><p>回到上述限制本身，只能通过<code>setrlimit</code>限制其CPU时间，但是却能在程序结束时获得其较为精确的资源使用情况，假设我们程序要求是1.5s，直接设置CPU时间为2s甚至是3s，结束后再检查真实CPU运行时间即可。</p><p>当然，也需要对wall time做出限制，比如一个<code>while(true)sleep(100);</code>这样的程序基本上不会消耗什么CPU时间，却会一直占据资源，具体做法可以使用其他进程对执行程序进行监控并获取真实时间。</p><p>注意在linux系统下，有一些信号是无法被重编程的，如<code>SIGKILL</code>，<code>SIGSTOP</code>等等，在子进程退出时，父进程可以通过<code>wait</code>系统调用拿到子进程的退出状态码以及退出时收到的信号，据此判断退出状态。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ptrace 101</title>
      <link href="/2018/11/03/ptrace-de-shi-yong/"/>
      <url>/2018/11/03/ptrace-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>有一些其他的需求暂时没找到办法用seccomp实现，于是继上次探索seccomp之后，又开始了研究ptrace的使用。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>ptrace(2) - 系统调用 - process trace</p><p>使用ptrace可以暂停被监控程序，获取设置寄存器值和内存，监控系统调用，甚至是截断系统调用。一般用于程序debug，以及linux下的strace就是用ptrace实现的。</p><p>但是ptrace并没有被标准化，如果使用ptrace，需要关注自己的开发平台和系统架构，我的开发环境是Ubuntu 16.04 x86-64.<br>（我猜是因为不同系统架构或者平台寄存器都不一样？</p><p>函数原型如下：</p><pre class=" language-c"><code class="language-c">   <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ptrace.h></span></span>   <span class="token keyword">long</span> <span class="token function">ptrace</span><span class="token punctuation">(</span><span class="token keyword">enum</span> __ptrace_request request<span class="token punctuation">,</span> pid_t pid<span class="token punctuation">,</span>               <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>分为被跟踪程序（tracee）和跟踪程序（tracer），tracee只能被一个tracer跟踪，而tracer可以跟踪多个tracee.</p><p>一个非常经典的使用例子是fork出来一个子进程，然后调用<code>ptrace(PTRACE_TRACEME, 0, NULL, NULL)</code>表明这个子进程由其父进程追踪，父进程再使用相应的action code进行处理。</p><p>详尽的说明在<a href="http://manpages.ubuntu.com/manpages/xenial/man2/ptrace.2.html" target="_blank" rel="noopener">官方文档</a>可以看到。</p><p>我仅仅想在之前seccomp的基础上做出一些拓展，所以主要关注其中<code>PTRACE_O_TRACESECCOMP</code>相关的使用。</p><h1 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h1><p>先回到之前<a href="http://blog.jingwei.site/2018/10/31/seccomp%E7%9A%84%E4%BD%BF%E7%94%A8/#more">seccomp-bpf</a>的例子上，假设我们默认允许所有系统调用,且仅仅允许输出到stdout, 一个测试的例子如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不允许子进程获得新权限</span>    <span class="token function">prctl</span><span class="token punctuation">(</span>PR_SET_NO_NEW_PRIVS<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">install_helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scmp_filter_ctx ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认允许所有系统调用</span>    ctx <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span>SCMP_ACT_ALLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 只允许输出到stdout</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">SCMP_A0</span><span class="token punctuation">(</span>SCMP_CMP_EQ<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_TRAP<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">SCMP_A0</span><span class="token punctuation">(</span>SCMP_CMP_NE<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 应用过滤器</span>    <span class="token function">seccomp_load</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 释放内存</span>    <span class="token function">seccomp_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"something to stdout\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"something to stderr\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>能够正常产生下面的输出：</p><pre class=" language-bash"><code class="language-bash">something to stdoutsystem call invalid: write<span class="token punctuation">(</span>1<span class="token punctuation">)</span>: arg1<span class="token operator">=</span>2</code></pre><p>我想要让这个程序更通用，比如通过<code>execve</code>替换进程为其他任意可执行程序，另外简单编写了一个a.cpp文件并编译为名为<code>a</code>的可执行文件：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"something to stdout\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"something to stderr\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后对原来的主程序做出一些修改：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">print_exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"normal termination, exit status = %d\n"</span><span class="token punctuation">,</span> <span class="token function">WEXITSTATUS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abnormal termination, signal number = %d%s\n"</span><span class="token punctuation">,</span> <span class="token function">WTERMSIG</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> WCOREDUMP</span>               <span class="token function">WCOREDUMP</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">" core file generated"</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>        <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFSTOPPED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child stopped, signal number=%d\n"</span><span class="token punctuation">,</span> <span class="token function">WSTOPSIG</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不允许子进程获得新权限</span>    <span class="token function">prctl</span><span class="token punctuation">(</span>PR_SET_NO_NEW_PRIVS<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">install_helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scmp_filter_ctx ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认允许所有系统调用</span>    ctx <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span>SCMP_ACT_ALLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 只允许输出到stdout</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">SCMP_A0</span><span class="token punctuation">(</span>SCMP_CMP_EQ<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_KILL<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">SCMP_A0</span><span class="token punctuation">(</span>SCMP_CMP_NE<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 应用过滤器</span>    <span class="token function">seccomp_load</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 释放内存</span>    <span class="token function">seccomp_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用a.cpp替换子进程</span>    <span class="token keyword">char</span> cmd<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"{path_to_a}"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>environ<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">execve</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> environ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ERROR:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> status<span class="token punctuation">,</span> ret<span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid:%d, ret:%d, status=%d, %s\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ret<span class="token punctuation">,</span> status<span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print_exit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>会看到类似下面的输出：</p><pre class=" language-bash"><code class="language-bash">something to stdoutpid:11657, ret:11661, status<span class="token operator">=</span>159, Successabnormal termination, signal number <span class="token operator">=</span> 31 core <span class="token function">file</span> generated</code></pre><p>发现确实能够禁止非法的子程序的系统调用，这一点在seccomp的文档中就提到，所有的子进程都会继承父亲的seccomp设置，并且加上PR_SET_NO_NEW_PRIVS就可以确保子程序不能通过execve获得新权限，但是有一个问题，禁止的系统调用名并没有输出（即<code>install_helper</code>并没有继承到子进程当中</p><p>具体原因是，helper是通过注册信号处理函数来实现输出非法系统调用名的，在<code>sigaction</code>的<a href="http://man7.org/linux/man-pages/man2/sigaction.2.html" target="_blank" rel="noopener">文档</a>当中，有这样一个特殊说明：</p><blockquote><p>During an execve(2), the dispositions of handled signals are reset to the default; the dispositions of ignored signals are left unchanged.</p></blockquote><p>也就是说在子进程中信号的handle被重置成默认值了……</p><p>也就是说不能考虑侵入子进程的方式来处理，如果从父进程接收信号呢？</p><p>很遗憾，经过测试，父进程也只会接收子进程退出时的SIGCHLD信号，并且是无法从这时记录的寄存器信息中拿到导致异常退出的系统调用信息的。</p><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>于是我选择用ptrace！（还记得seccomp action当中的<code>SCMP_ACT_TRACE(x)</code>吗！</p><p>ptrace可以和seccomp配合使用，在某些系统调用处终止调用执行，并进行一些处理。</p><p>大致思路是，儿子进程非法系统调用都注册为<code>SCMP_ACT_TRACE(getppid())</code>，父进程通过循环不停的continue进程和处理相关的系统调用，然后通过ptrace获取子进程的用户空间的寄存器值，从中读取出来非法的系统调用和对应的参数。</p><p>首先增加下面三个头文件：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ptrace.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/user.h></span> </span><span class="token comment" spellcheck="true">// 用户空间定义</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/reg.h></span>  </span><span class="token comment" spellcheck="true">// 寄存器定义</span><span class="token comment" spellcheck="true">// 注意，网上很多资料针对的可能是老版本的linux内核，其在user.h中就包含了寄存器定义，</span><span class="token comment" spellcheck="true">// 在较新的linux内核中要将上述两个头文件都包含进来</span></code></pre><p>另外先注意一下原来helper函数当中，<code>REG_SYSCALL</code>和<code>REG_ARG0</code>两个宏定义（我的平台是x86_64架构：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">elif</span> defined(__x86_64__)</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_RESULT    REG_RAX</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_SYSCALL    REG_RAX</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG0    REG_RDI</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG1    REG_RSI</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG2    REG_RDX</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG3    REG_R10</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG4    REG_R8</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG5    REG_R9</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>找到对应的寄存器：<code>REG_RAX</code>和<code>REG_RDI</code>，后面会用到。</p><p>main函数稍稍做出一些修改：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> status<span class="token punctuation">;</span>        <span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_SETOPTIONS<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> PTRACE_O_TRACESECCOMP<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">wait_for_syscall</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意，在调用ptrace追踪之前，需要先调用一次wait（我现在还没太明白这里是为什么，希望万能网友解答……</p><p>然后增加了对子进程系统调用处理的函数<code>wait_for_syscall</code>，如果其返回值不为0，说明子进程已经结束。</p><p>首先child函数也做出了一些修改，在开头增加了一行<code>ptrace(PTRACE_TRACEME, 0, NULL, NULL);</code>表明这个子进程由其父进程进行追踪; 然后原来的禁止规则做出如下修改：</p><pre class=" language-c"><code class="language-c"><span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_KILL<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">SCMP_A0</span><span class="token punctuation">(</span>SCMP_CMP_NE<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">SCMP_ACT_TRACE</span><span class="token punctuation">(</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">SCMP_A0</span><span class="token punctuation">(</span>SCMP_CMP_NE<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>表明这个系统调用规则将会由一个tracer进程追踪。</p><p>下面来看<code>wait_for_syscall</code>函数：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">wait_for_syscall</span><span class="token punctuation">(</span>pid_t child<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_CONT<span class="token punctuation">,</span> child<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[waitpid status: 0x%08x]\n"</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid:%d, ret:%d, status=%d, %s\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ret<span class="token punctuation">,</span> status<span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print_exit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"exited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断是否是seccomp限制的规则，这个判断条件可以在ptrace文档中找到</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token punctuation">(</span>SIGTRAP <span class="token operator">|</span> <span class="token punctuation">(</span>PTRACE_EVENT_SECCOMP <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> syscall<span class="token punctuation">;</span>            syscall <span class="token operator">=</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKUSER<span class="token punctuation">,</span> child<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token operator">*</span>ORIG_RAX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            long arg0;</span><span class="token comment" spellcheck="true">//            arg0 = ptrace(PTRACE_PEEKUSER, child, sizeof(long)*RDI, 0);</span>            <span class="token keyword">struct</span> user_regs_struct regs<span class="token punctuation">;</span>            <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_GETREGS<span class="token punctuation">,</span> child<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"system call invalid: %s(%ld) with args: 0x%llx 0x%llx 0x%llx\n"</span><span class="token punctuation">,</span>                   syscall <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>syscall_names<span class="token punctuation">)</span> <span class="token operator">?</span> syscall_names<span class="token punctuation">[</span>syscall<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">"null"</span><span class="token punctuation">,</span>                   syscall<span class="token punctuation">,</span>                   regs<span class="token punctuation">.</span>rdi<span class="token punctuation">,</span> regs<span class="token punctuation">.</span>rsi<span class="token punctuation">,</span> regs<span class="token punctuation">.</span>rdx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">kill</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> SIGKILL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意在检查到规则之后，需要发送kill信号，且不能使用PTRACE_KILL: <a href="https://lists.kernelnewbies.org/pipermail/kernelnewbies/2011-August/003132.html" target="_blank" rel="noopener">reference1</a> <a href="https://stackoverflow.com/questions/12015141/cancel-a-system-call-with-ptrace" target="_blank" rel="noopener">reference2</a></p><p>执行修改后的程序输出如下：</p><pre class=" language-bash"><code class="language-bash">something to stdout<span class="token punctuation">[</span>waitpid status: 0x0007057f<span class="token punctuation">]</span>pid:21660, ret:21662, status<span class="token operator">=</span>460159, Successchild stopped, signal number<span class="token operator">=</span>5system call invalid: write<span class="token punctuation">(</span>1<span class="token punctuation">)</span> with args: 0x2 0x400955 0x14<span class="token punctuation">[</span>waitpid status: 0x00000009<span class="token punctuation">]</span>pid:21660, ret:21662, status<span class="token operator">=</span>9, No such processabnormal termination, signal number <span class="token operator">=</span> 9exited</code></pre><p>可以看到，基于ptrace这种机制，可以对系统调用做出丰富的限制，甚至可以直接修改函数的参数和返回值，结合seccomp能够完成十分强大的功能。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>seccomp 101</title>
      <link href="/2018/10/31/seccomp-de-shi-yong/"/>
      <url>/2018/10/31/seccomp-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>最近有一些执行不安全程序的需求，考虑通过限制系统调用来对子程序进行行为限制（资源限制考虑用rlimit等方式，暂且不谈），学习了一下seccomp和seccomp-bpf的使用。</p><p>– 纸上得来终觉浅，绝知此事要躬行</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>seccomp是linux内核中一个基础的沙箱工具，在linux3.5之后开始支持seccomp-bpf扩展。BPF（Berkeley Packet Filter）是一种用于Unix内核网络数据包的过滤机制。只需要编写简单的过滤规则，就可以对程序系统调用进行可配置的限制，子进程会继承父进程所有的限制，并且可以配合linux的No New Privileges Flag保证避免类似execve的系统调用授予父级没有的权限。No New Privileges Flag使用也很简单，仅仅一行代码：<code>prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);</code></p><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><p>我的开发环境是Ubuntu 16.04 amd64</p><p>首先安装对应的包：<br><code>sudo apt install seccomp</code></p><p>来一个简单的例子，假设我们想要限制程序只能向stdout写入数据：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// main.c</span><span class="token comment" spellcheck="true">// 省略了函数调用失败的处理</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;seccomp.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    scmp_filter_ctx ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认允许所有系统调用</span>    ctx <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span>SCMP_ACT_ALLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 只允许输出到stdout</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">SCMP_A0</span><span class="token punctuation">(</span>SCMP_CMP_EQ<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_KILL<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">SCMP_A0</span><span class="token punctuation">(</span>SCMP_CMP_NE<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 应用过滤器</span>    <span class="token function">seccomp_load</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 释放内存</span>    <span class="token function">seccomp_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"something to stdout\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"someting to stderr\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>简单解释一下一些关键字，<code>scmp_filter_ctx</code>是过滤器的结构体，需要通过<code>seccomp_init</code>或者<code>seccomp_rule_add</code>进行初始化规则或者添加规则，如果使用SCMP_ACT_ALLOW进行初始化，即为黑名单形式；若使用SCMP_ACT_KILL进行初始化，即为白名单形式。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Kill the process */</span><span class="token macro property">#<span class="token directive keyword">define</span> SCMP_ACT_KILL        0x00000000U</span><span class="token comment" spellcheck="true">/** * Throw a SIGSYS signal */</span><span class="token macro property">#<span class="token directive keyword">define</span> SCMP_ACT_TRAP        0x00030000U</span><span class="token comment" spellcheck="true">/** * Return the specified error code */</span><span class="token macro property">#<span class="token directive keyword">define</span> SCMP_ACT_ERRNO(x)    (0x00050000U | ((x) &amp; 0x0000ffffU))</span><span class="token comment" spellcheck="true">/** * Notify a tracing process with the specified value */</span><span class="token macro property">#<span class="token directive keyword">define</span> SCMP_ACT_TRACE(x)    (0x7ff00000U | ((x) &amp; 0x0000ffffU))</span><span class="token comment" spellcheck="true">/** * Allow the syscall to be executed after the action has been logged */</span><span class="token macro property">#<span class="token directive keyword">define</span> SCMP_ACT_LOG        0x7ffc0000U</span><span class="token comment" spellcheck="true">/** * Allow the syscall to be executed */</span><span class="token macro property">#<span class="token directive keyword">define</span> SCMP_ACT_ALLOW        0x7fff0000U</span></code></pre><p>以上这些seccomp actions当中，kill和allow的含义显而易见，分别是直接杀掉进程或者是允许进程执行。</p><p>SCMP_ACT_TRAP其实和kill类似，只不过kill是直接杀掉了进程并报invalid system call，而SCMP_ACT_TRAP会抛出一个能够捕捉的信号方便进行一些处理后再退出，这个下面会提到它的应用。</p><p>SCMP_ACT_ERRNO(x)指定一个触发时自定义的返回值。</p><p>SCMP_ACT_TRACE则是通知一个监控的ptrace进程进行一些处理。</p><p>SCMP_ACT_LOG字面意是在记录系统调用后再执行，但是我没太懂具体怎么记录的……希望有了解的朋友解惑。</p><p>下面介绍一下增加规则函数：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>scmp_filter_ctx ctx<span class="token punctuation">,</span>             uint32_t action<span class="token punctuation">,</span> <span class="token keyword">int</span> syscall<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> arg_cnt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ctx为scmp_filter_ctx结构体，action为上述scmp定义宏，syscall可以通过宏<code>SCMP_SYS({system_name})</code>拿到具体的id值，arg_cnt表明是否需要对对应系统调用的参数做出限制以及指示做出限制的个数，如果仅仅需要允许或者禁止所有某个系统调用，arg_cnt直接传入0即可；如果考虑到更高的自定义，需要先去了解一下具体系统调用的参数情况，然后再利用<code>SCMP_AX</code>及<code>SCMP_CMP_XX</code>类的宏定义做一些过滤。拿<code>read</code>调用举例子，先去<a href="http://man7.org/linux/man-pages/man2/read.2.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man2/read.2.html</a> 查得其系统调用原型为：</p><pre class=" language-c"><code class="language-c">ssize_t <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>假设我们现在不允许从stdin读入count为100大小的数据块，则可以如下添加过滤器：</p><pre class=" language-c"><code class="language-c"><span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_KILL<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>                 <span class="token function">SCMP_A0</span><span class="token punctuation">(</span>SCMP_CMP_EQ<span class="token punctuation">,</span> STDIN_FILENO<span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token function">SCMP_A2</span><span class="token punctuation">(</span>SCMP_CMP_EQ<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>最后，需要<code>seccomp_load(ctx)</code>应用过滤器，否则不会生效，以及使用<code>seccomp_release(ctx)</code>释放内存。</p><p>再回到之前编写的main.c文件，使用如下命令编译：<code>gcc main.c -lseccomp -o main</code></p><p>执行得：</p><pre class=" language-bash"><code class="language-bash">./main something to stdout<span class="token punctuation">[</span>1<span class="token punctuation">]</span>    2548 invalid system call <span class="token punctuation">(</span>core dumped<span class="token punctuation">)</span>  ./main</code></pre><p>将输出到stderr的那行注释掉后重新编译运行：</p><pre class=" language-bash"><code class="language-bash">./main something to stdout</code></pre><h1 id="调试seccomp"><a href="#调试seccomp" class="headerlink" title="调试seccomp"></a>调试seccomp</h1><p>虽然seccomp看起来很强大的样子，seccomp-bpf的使用方式似乎也非常简单，但是存在一个问题，调试起来不方便，在上面的例子当中，当使用了违规的系统调用时，仅仅报错，并没有额外的信息以供调试，在开发阶段非常不方便，至少能够输出违规调用的名称，才能方便调试。解决方案是通过使用sigaction注册对应的SIGSYS信号处理函数，所以之前的那行禁止规则需要改为<code>seccomp_rule_add(ctx, SCMP_ACT_TRAP, SCMP_SYS(write), 1, SCMP_A0(SCMP_CMP_NE, STDOUT_FILENO));</code>，即使用SCMP_ACT_TRAP抛出SIGSYS信号，然后捕捉并打印相应信息。</p><p>首先可以做一些准备，导出一个所有syscall的id和name对应头文件，打开终端，输入如下命令：</p><pre class=" language-bash"><code class="language-bash">file<span class="token operator">=</span>syscall-names.h<span class="token keyword">echo</span> <span class="token string">"static const char *syscall_names[] = {"</span> <span class="token operator">></span> <span class="token variable">$file</span><span class="token keyword">echo</span> <span class="token string">"#include &lt;sys/syscall.h>"</span> <span class="token operator">|</span> cpp -dM <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'^#define __NR_'</span> <span class="token operator">|</span> LC_ALL<span class="token operator">=</span>C <span class="token function">sed</span> -r -n -e <span class="token string">'s/^\#define[ \t]+__NR_([a-z0-9_]+)[ \t]+([0-9]+)(.*)/ [\2] = "\1",/p'</span> <span class="token operator">>></span> <span class="token variable">$file</span><span class="token keyword">echo</span> <span class="token string">"};"</span> <span class="token operator">>></span> <span class="token variable">$file</span></code></pre><p>会生成这样的syscall-names.h文件：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>syscall_names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token number">247</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"waitid"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"fdatasync"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">245</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"mq_getsetattr"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">204</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"sched_getaffinity"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"connect"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// ... 以下省略</span></code></pre><p>然后在原来的<code>main.c</code>文件中添加三个函数以及所需头文件和宏定义：（这是从Linux kernel samples里撸过来的</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> __USE_GNU 1</span><span class="token macro property">#<span class="token directive keyword">define</span> _GNU_SOURCE 1</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/prctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/filter.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/seccomp.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"syscall-names.h"</span></span><span class="token macro property">#<span class="token directive keyword">if</span> defined(__i386__)</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_RESULT    REG_EAX</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_SYSCALL    REG_EAX</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG0    REG_EBX</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG1    REG_ECX</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG2    REG_EDX</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG3    REG_ESI</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG4    REG_EDI</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG5    REG_EBP</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined(__x86_64__)</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_RESULT    REG_RAX</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_SYSCALL    REG_RAX</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG0    REG_RDI</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG1    REG_RSI</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG2    REG_RDX</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG3    REG_R10</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG4    REG_R8</span><span class="token macro property">#<span class="token directive keyword">define</span> REG_ARG5    REG_R9</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> SYS_SECCOMP</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_SECCOMP 1</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">"system call invalid: "</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Since "sprintf" is technically not signal-safe, reimplement %d here. */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write_uint</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tens<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>tens <span class="token operator">=</span> val<span class="token punctuation">;</span> tens<span class="token punctuation">;</span> tens <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token operator">++</span> width<span class="token punctuation">;</span>    buf<span class="token punctuation">[</span>width<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>tens <span class="token operator">=</span> val<span class="token punctuation">;</span> tens<span class="token punctuation">;</span> tens <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>        buf<span class="token punctuation">[</span><span class="token operator">--</span>width<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>tens <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span> siginfo_t <span class="token operator">*</span>info<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>void_context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ucontext_t <span class="token operator">*</span>ctx <span class="token operator">=</span> <span class="token punctuation">(</span>ucontext_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>void_context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> syscall<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token operator">-></span>si_code <span class="token operator">!=</span> SYS_SECCOMP<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    syscall <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span> ctx<span class="token operator">-></span>uc_mcontext<span class="token punctuation">.</span>gregs<span class="token punctuation">[</span>REG_SYSCALL<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>syscall <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>syscall_names<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> syscall_names<span class="token punctuation">[</span>syscall<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">write_uint</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> syscall<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>syscall <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>syscall_names<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">install_helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> sigaction act<span class="token punctuation">;</span>    sigset_t mask<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>act<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask<span class="token punctuation">,</span> SIGSYS<span class="token punctuation">)</span><span class="token punctuation">;</span>    act<span class="token punctuation">.</span>sa_sigaction <span class="token operator">=</span> <span class="token operator">&amp;</span>helper<span class="token punctuation">;</span>    act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_SIGINFO<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sigaction</span><span class="token punctuation">(</span>SIGSYS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"sigaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_UNBLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"sigprocmask"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后在main函数中，加载过滤规则之前将对应的打印函数注册上：</p><pre><code>    if (install_helper()) {        printf("install helper failed");        return 1;    }</code></pre><p>去掉stderr输出前的注释重新编译运行（记得带上syscall-names.h头文件）：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">></span> gcc main.c syscall-names.h -lseccomp -o main<span class="token operator">></span> ./mainsomething to stdoutsystem call invalid: write<span class="token punctuation">(</span>1<span class="token punctuation">)</span></code></pre><p>输出了非法的系统调用以及对应id，当然，也可以利用samples中的宏定义，输出其后的一些参数，但是参数类型有可能是char* 等等，而寄存器当中的值也就仅仅是值而已，需要自己做一下强制转化再输出，由于参数类型不统一，好像没有什么统一的方式进行处理，或者直接按照long long int输出其值……<code>uc_mcontext.gregs</code>的关联定义如下：</p><pre><code>/* Number of general registers.  */#define NGREG    23/* Container for all general registers.  */typedef greg_t gregset_t[NGREG];/* Context to describe whole processor state.  */typedef struct  {    gregset_t gregs;    /* Note that fpregs is a pointer.  */    fpregset_t fpregs;    __extension__ unsigned long long __reserved1 [8];} mcontext_t;</code></pre><p>在原来的基础上，增加输出第一个参数后，运行如下：</p><pre class=" language-bash"><code class="language-bash">something to stdoutsystem call invalid: write<span class="token punctuation">(</span>1<span class="token punctuation">)</span>: arg1<span class="token operator">=</span>2</code></pre><p>其中2是stderr的fileno，与预期相符。</p><p>参考资料：</p><p><a href="http://www.infradead.org/~mchehab/kernel_docs/userspace-api/seccomp_filter.html" target="_blank" rel="noopener">seccomp BPF</a></p><p><a href="http://www.infradead.org/~mchehab/kernel_docs/userspace-api/no_new_privs.html" target="_blank" rel="noopener">no new privileges flag</a></p><p><a href="https://github.com/torvalds/linux/blob/master/samples/seccomp/bpf-direct.c" target="_blank" rel="noopener">linux kernel samples</a></p><p><a href="http://www.outflux.net/teach-seccomp/" target="_blank" rel="noopener">teach seccomp</a></p><p><a href="http://www.outflux.net/teach-seccomp/autodetect.html" target="_blank" rel="noopener">teach seccomp autodetect</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extending Python with C or C++</title>
      <link href="/2018/10/20/extending-python-with-c-or-c/"/>
      <url>/2018/10/20/extending-python-with-c-or-c/</url>
      
        <content type="html"><![CDATA[<p>探索在linux环境下，如何用c/c++语言扩展部分python逻辑。</p><a id="more"></a><p>开发环境：</p><ul><li>ubuntu 16.04</li><li>python3</li><li>clion</li></ul><p><a href="https://en.wikibooks.org/wiki/Python_Programming/Extending_with_C" target="_blank" rel="noopener">简单的例子</a></p><p><a href="https://cmake.org/cmake/help/latest/module/FindPythonLibs.html" target="_blank" rel="noopener">FindPythonLibs</a><br>在这里可以看到cmake如何添加python.h支持，只需要在原有的cmakeLists.txt添加如下指令即可：</p><pre><code>find_package(PythonLibs 3 REQUIRED)include_directories(${PYTHON_INCLUDE_DIRS})...target_link_libraries(${project} ${PYTHON_LIBRARIES})</code></pre><p>如果对python版本没有需求，find_package第二个参数3可以省略。</p><p>假设我们现在用c编写了一个基础函数，并返回一个c类型的结构体，对应的main.h和main.c内容如下:</p><p>main.h:</p><pre><code>#ifndef CBOX_MAIN_H#define CBOX_MAIN_H#include &lt;string.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;typedef struct executeResult {    int val1;    long val2;    char *str;} c_result;int func(int x, int y, const char *s, c_result *result);#endif //CBOX_MAIN_H</code></pre><p>main.c:</p><pre><code>#include "main.h"int func(int x, int y, const char *s, c_result *result) {    result-&gt;val1 = x;    result-&gt;val2 = y;    result-&gt;str = malloc(strlen(s) + 1);    stpcpy(result-&gt;str, s);    return x + y;}int main() {    printf("Hello, World!\n");    return 0;}</code></pre><p>为了在python中使用这个c函数，需要利用python.h头文件对原有的函数进行包装，最终我们想达成如下效果(上述函数最后一个参数为结果结构体的引用):</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> cbox<span class="token operator">>></span><span class="token operator">></span> code<span class="token punctuation">,</span> result <span class="token operator">=</span> cbox<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"string here"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> code<span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> result<span class="token punctuation">.</span>val1<span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> result<span class="token punctuation">.</span>strstring here</code></pre><p>在python.h文件当中，最重要的一个结构体是PyObject，这个结构体可以和python当中直接使用的任何对象进行转化。</p><p>一般情况下，包装函数结构如下:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> PyObject <span class="token operator">*</span><span class="token function">wrapper_func</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>self<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// parse args</span>    <span class="token comment" spellcheck="true">// using args call orgin func</span>    <span class="token comment" spellcheck="true">// return values</span><span class="token punctuation">}</span></code></pre><p>固定的包含两个参数self和args，self指向模块对象和模块级别的函数，对于一个方法它指向对象的实例。args指向一个python元组对象，对应着python方法中的位置参数。</p><p>使用PyArg_ParseTuple函数来从args中解析参数:</p><pre><code>int a, b;const char *str;if (!PyArg_ParseTuple(args, "iis", &amp;a, &amp;b, &amp;str))     return NULL;</code></pre><p>“iis”代表解析两个integer和一个string，更详细的解析格式可以看<a href="https://docs.python.org/2.0/ext/parseTuple.html" target="_blank" rel="noopener">官方文档</a></p><p>对于包装函数，如果返回NULL，在python中即为抛出异常，具体的异常信息在后面会说明。</p><p>PyArg_ParseTuple如果解析失败会返回0值，并设置恰当的提示信息，否则返回1值并将参数解析到相应的c类型数据中。</p><p>如果为void函数，需要返回一个None值：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">Py_INCREF</span><span class="token punctuation">(</span>Py_None<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> Py_None<span class="token punctuation">;</span></code></pre><p>对于异常处理，需要在文件开头声明一个PyObject指针:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> PyObject <span class="token operator">*</span>CboxError<span class="token punctuation">;</span></code></pre><p>然后在模块的初始化函数中初始化这个异常对象:</p><pre class=" language-cpp"><code class="language-cpp">PyMODINIT_FUNC<span class="token function">PyInit_cbox</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    PyObject <span class="token operator">*</span>m<span class="token punctuation">;</span>    m <span class="token operator">=</span> <span class="token function">PyModule_Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cboxmodule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    CboxError <span class="token operator">=</span> <span class="token function">PyErr_NewException</span><span class="token punctuation">(</span><span class="token string">"cbox.error"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>CboxError<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PyModule_AddObject</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">,</span> CboxError<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于异常处理，最常使用的应该是PyErr_SetString函数，在初始化之后，可以在包装函数中如下使用:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>error_occurred<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">PyErr_SetString</span><span class="token punctuation">(</span>CboxError<span class="token punctuation">,</span> <span class="token string">"some error occurred"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在再回到一开始的包装函数，如果只返回一个ret code，可以如下编写：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> PyObject <span class="token operator">*</span><span class="token function">wrapper_func</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>self<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyArg_ParseTuple</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">"iis"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    c_result result<span class="token punctuation">;</span>    <span class="token keyword">int</span> code <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">PyLong_FromLong</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在可以开始处理模块的方法表和初始化函数：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> PyMethodDef cBoxMethods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">{</span><span class="token string">"func"</span><span class="token punctuation">,</span>  wrapper_func<span class="token punctuation">,</span> METH_VARARGS<span class="token punctuation">,</span>                    <span class="token string">"a func in c box."</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">{</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* Sentinel */</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>每一个元素为一个四元组(函数名，函数，参数类型，方法介绍)，第三个参数类型一般为METH_VARARGS或者METH_VARARGS | METH_KEYWORDS，分别代表裸位置参数或者位置参数+关键字参数的组合，对应着使用PyArg_ParseTuple()或者PyArg_ParseTupleAndKeywords()函数来解析。</p><p>然后定义这个python模块：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">struct</span> PyModuleDef cboxmodule <span class="token operator">=</span> <span class="token punctuation">{</span>        PyModuleDef_HEAD_INIT<span class="token punctuation">,</span>        <span class="token string">"cbox"</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/* name of module */</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">/* module documentation, may be NULL */</span>        <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">/* size of per-interpreter state of the module,                    or -1 if the module keeps state in global variables. */</span>        cBoxMethods<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>编写对应的初始化函数，注意这个函数的命名，必须是PyInit_{packge_name}形式：</p><pre><code>PyMODINIT_FUNCPyInit_cbox(void){    PyObject *m;    m = PyModule_Create(&amp;cboxmodule);    if (m == NULL)        return NULL;    CboxError = PyErr_NewException("cbox.error", NULL, NULL);    Py_INCREF(CboxError);    PyModule_AddObject(m, "error", CboxError);    return m;}</code></pre><p>为了方便，在同级目录下创建setup.py文件：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setup<span class="token punctuation">,</span> Extensioncbox_module <span class="token operator">=</span> Extension<span class="token punctuation">(</span><span class="token string">'cbox'</span><span class="token punctuation">,</span> sources<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'cbox.c'</span><span class="token punctuation">,</span> <span class="token string">'main.c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>setup<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'cbox'</span><span class="token punctuation">,</span>      version<span class="token operator">=</span><span class="token string">'1.1'</span><span class="token punctuation">,</span>      description<span class="token operator">=</span><span class="token string">'this is a demo'</span><span class="token punctuation">,</span>      ext_modules<span class="token operator">=</span><span class="token punctuation">[</span>cbox_module<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>注意使用虚拟的python环境以避免破坏机器的全局python环境，pip install .进行安装</p><p>进入python终端：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> cbox <span class="token keyword">import</span> func<span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> an integer <span class="token keyword">is</span> required <span class="token punctuation">(</span>got type str<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> </code></pre><p>再回到一开始的包装函数，修改返回值，利用Py_BuildValue函数即可：</p><pre><code>static PyObject *wrapper_func(PyObject *self, PyObject *args) {    int a, b;    const char *str;    if (!PyArg_ParseTuple(args, "iis", &amp;a, &amp;b, &amp;str))        return NULL;    c_result result;    int code = func(a, b, str, &amp;result);    return Py_BuildValue("(i, {s:i,s:i,s:s})",             code, "val1", result.val1,             "val2", result.val2,             "str", result.str);};</code></pre><p>重新安装后执行如下：</p><pre><code>&gt;&gt;&gt; from cbox import func&gt;&gt;&gt; a, b = func(1, 2, "ddd")&gt;&gt;&gt; a3&gt;&gt;&gt; b{'val2': 2, 'val1': 1, 'str': 'ddd'}&gt;&gt;&gt; </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LETTers Online dev - crazybox</title>
      <link href="/2018/10/19/letters-online-dev-crazybox/"/>
      <url>/2018/10/19/letters-online-dev-crazybox/</url>
      
        <content type="html"><![CDATA[<p>LETTers Online中，crazybox的设计和开发记录。</p><p>—–Building—–</p><a id="more"></a><p>经过调研，有以下几种方式完成sandbox部分的开发：</p><ul><li>使用<a href="https://github.com/QingdaoU/OnlineJudge" target="_blank" rel="noopener">QDUOJ</a>后端的沙箱</li><li>使用<a href="https://github.com/DMOJ/judge/" target="_blank" rel="noopener">DMOJ</a>后端的沙箱</li><li>使用docker作为沙箱</li><li>使用ioi所用沙箱</li><li>完全自己实现沙箱和判题<ul><li>沙箱常见设计<ul><li>ptrace (vsftpd)</li><li>seuid (chromium)</li><li>seccomp (chromium)</li></ul></li></ul></li></ul><h2 id="自己实现"><a href="#自己实现" class="headerlink" title="自己实现"></a>自己实现</h2><p>参考资料：</p><ul><li><p><a href="https://chromium.googlesource.com/chromium/src/+/lkgr/docs/linux_sandboxing.md" target="_blank" rel="noopener">chromium sandbox</a></p></li><li><p><a href="https://veritas501.space/2018/05/05/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">seccomp</a></p></li></ul><p>linux3.5以后linux支持了Will Drewry的Seccomp-BPF的特性</p><p>主要有两个任务，一个是统计时间和内存，一个是限制非法的系统调用和限制时间以及内存</p><h3 id="统计时间和内存"><a href="#统计时间和内存" class="headerlink" title="统计时间和内存"></a>统计时间和内存</h3><p>先明确一些概念：</p><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><ul><li>CPU time: 为CPU执行用户进程操作和内核系统调用所耗时间总和 (user+sys)</li><li>real time / wall time: 实际流逝时间</li></ul><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><ul><li>VSS- Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</li><li>RSS- Resident Set Size 实际使用物理内存（包含共享库占用的内存）</li></ul><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ul><li>方案1: 在python当中可以用psutil获取时间和max虚拟内存和max（不靠谱）</li><li>方案2: 利用/usr/bin/time获取时间和内存</li></ul><h2 id="一些记录"><a href="#一些记录" class="headerlink" title="一些记录"></a>一些记录</h2><p>思路：首先完成纯c使用seccomp开发沙箱<br><a href="https://stackoverflow.com/questions/33953732/shared-libraries-vs-executable" target="_blank" rel="noopener">c libraries vs executable</a></p><p>然后将其包装成python函数进行使用</p><p>用seccomp-filter的方式开发沙箱，要确定哪些系统调用是合法的，可以通过strace -c command 查看一个命令的系统调用次数和时间占用。</p><p>使用setrlimit限制内存和时间 <a href="https://www.cnblogs.com/niocai/archive/2012/04/01/2428128.html" target="_blank" rel="noopener">介绍</a></p><pre><code>https://docs.python.org/3/extending/extending.htmlhttps://stackoverflow.com/questions/11041299/python-h-no-such-file-or-directoryhttps://cmake.org/cmake/help/latest/module/FindPythonLibs.htmlsudo apt-get install python3-dev  # for python3.x installs</code></pre><p>在这两个链接中，分别有整个64位系统下的system call以及对应的分类:</p><p><a href="https://raw.githubusercontent.com/torvalds/linux/master/arch/x86/entry/syscalls/syscall_64.tbl" target="_blank" rel="noopener">syscall_64.tbl</a></p><p><a href="http://seclab.cs.sunysb.edu/sekar/papers/syscallclassif.htm" target="_blank" rel="noopener">Classification and Grouping of Linux System Calls</a></p><p>代码处理思路：</p><ul><li>编译行为只需要利用setrlimit对资源做出限制即可（主要是编译时间和编译输出）</li><li>运行行为需要放入seccomp沙箱当中</li></ul><h3 id="seccomp权限控制"><a href="#seccomp权限控制" class="headerlink" title="seccomp权限控制"></a>seccomp权限控制</h3><ul><li>允许任意的read调用</li><li>只允许向stdout和stderr的write调用</li><li>只允许列表中文件的的open调用</li><li>允许任意的close调用</li></ul><p>打印可执行程序系统调用列表：<br><code>strace -f -c ./act_samples 2&gt;&amp;1 | sed -n '8,$p' | awk '{print $NF}'</code></p><p>交互题思路：</p><p>在python中调用os.pipe()和os.fork()，对两个程序分别调用cbox，利用两个管道分别重定向双方的stdin和stdout <a href="https://www.tutorialspoint.com/python3/os_pipe.htm" target="_blank" rel="noopener">link</a></p><h3 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h3><p>首先主进程fork出一个从进程，从进程依次设置以下限制：</p><ul><li><code>prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);</code></li><li><code>ptrace(PTRACE_TRACEME, 0, NULL, NULL);</code></li><li>从配置文件当中读取时间内存（注意这里的时间是cpu时间）等限制，使用<code>setrlimit</code>做出限制</li><li><code>chdir</code>、<code>chroot</code>: <code>chroot</code>需要额外权限，可能不会使用</li><li>重定向<code>stdin</code>, <code>stdout</code>, <code>stderr</code></li><li>增加seccomp规则</li><li>给自己发送<code>SIGSTOP</code>信号，这一步是因为，父进程需要通过<code>ptrace(PTRACE_SETOPTIONS, pid, 0, PTRACE_O_TRACESECCOMP);</code>来开始追踪子进程的非法系统调用，必须要在设置seccomp规则之后才能开始合法追踪，于是父进程可以先<code>wait</code>一下，如果获取到了子进程正常暂停，那么说明之前的限制都正确应用且此时可以开始追踪子进程。</li><li>调用<code>execve(config-&gt;file, config-&gt;argv, config-&gt;envp);</code>执行程序，注意在seccomp规则中需要额外增加一条允许<code>execve(config-&gt;file...)</code>这样的系统调用执行。另外注意调用execve之后，如果本身是被ptrace的进程，在执行成功execve之后，会发送一个<code>SIGTRAP</code>的信号。</li></ul><p>主进程本身在fork之后，需要配合从进程进行一些处理：</p><ul><li>首先调用一次<code>wait</code>，如果不是异常退出状态，说明限制正常应用，继续处理，否则退出程序。正常的信号应该为<code>SIGSTOP(18)</code></li><li>设置ptrace追踪属性：<code>ptrace(PTRACE_SETOPTIONS, pid, 0, PTRACE_O_TRACESECCOMP);</code></li><li>在子进程<code>execve</code>之前，用<code>setpgid(child,child);</code>将子进程的组id改为它自己，这样方便使用<code>kill(-child, XXX)</code>来向子进程及其派生进程发送信号。</li><li>调用<code>ptrace(PTRACE_CONT, child, 0, 0);</code>，然后子程序应该执行到execve完成之后</li><li>调用<code>wait</code>获取状态，信号应该为<code>SIGTRAP(5)</code></li><li>调用<code>ptrace(PTRACE_CONT, child, 0, 0);</code>，从这里开始子程序应该开始真正的执行过程</li><li>调用<code>wait</code>获取状态，此时获取到状态时应该有三种情况:<ul><li>正常退出 / 资源异常</li><li>使用了非法的系统调用</li><li>超过wall time限制</li></ul></li></ul><p>在最后<code>正常退出 / 资源异常</code>放在一起是因为这种情况下都可以从wait返回的status中拿到大部分信息；<code>使用了非法的系统调用</code>需要特殊处理一下并且手动终止程序；<code>超过wall time限制</code>则是使用<code>setitimer</code>设置定时器向自身发送<code>SIGALRM</code>信号，并在对应的信号处理函数中将子进程组全部关闭。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LETTers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>icpc-tools resolver 滚榜工具使用指北</title>
      <link href="/2018/05/22/icpc-tools-resolver-gun-bang-gong-ju-shi-yong-zhi-bei/"/>
      <url>/2018/05/22/icpc-tools-resolver-gun-bang-gong-ju-shi-yong-zhi-bei/</url>
      
        <content type="html"><![CDATA[<p>网上ICPC 官方滚榜工具的资料并不多 = = 半年多之前给学校办校赛折腾了一会，虽然最终效果很成功，实际上还是有一些玄学问题没解决……另外整个流程其实是比较复杂的……特此记录一下</p><a id="more"></a><ul><li>第一个是中文支持，当时觉得可能是java内字符编码的问题，尝试了反编译jar文件， = =好像是做了混淆，而且时间也非常紧迫，就没有继续研究了……区域赛的时候应该都是有官方支持的，改起来可能友好很多，我们最后是将选手的拼音直接放了上去……</li><li>第二个问题是，启动的时候偶尔会卡在加载页面，具体表现为分辨率不是全屏或者icpc logo只出半屏之类的，可能是内存不够？当时也没有时间细究，解决方案是，如果卡住了就按esc退出，重新启动，只要开头正常显示，后面就能正常运行，于是我们先在后台将滚榜程序正常运行起来停在logo页面，然后把笔记本接上投影仪直接滚榜。</li></ul><p>据我所看到的资料，以及icpc tools的wiki，不知道是他们喜欢折腾还是总是换维护人什么的 = =基本上每年工具所需要的数据格式都有大大小小的变动，当然，如果你用的是pc2那一套东西，他们都封装好了那是非常方便的，但是如果你是想从其他OJ系统导出榜单去喂数据，就很蛋疼了……</p><p>我去年11月份使用的版本是 <code>1.2.1416</code>，这个可以在lib文件下的VERSION文件看到。</p><p>百度云链接：<a href="https://pan.baidu.com/s/1uG3QgOzNVVFvonpLLTUJgQ" target="_blank" rel="noopener">resolver.zip</a></p><p>我稍微分析了一下xml文件所必须的内容，整理了后续的各个关键项，但是不保证所有的都是必须的，只是按照我给出的项进行配置，肯定是能正常滚榜的。</p><p>我采用了CDP的方式给滚榜工具喂数据，主要是方便管理选手头像和照片。</p><p>文件目录结构如下：</p><ul><li>board/cdp/contest.json</li><li>board/cdp/images/logo/</li><li>board/cdp/images/team/</li><li>board/lib/</li><li>board/awards.sh</li><li>board/resolver.sh</li></ul><p>其中lib文件夹下为滚榜工具的库文件，awards.sh和resolver.sh是方便使用的脚本；contest.json是生成的比赛信息的json文件，images/logo/文件夹下的为选手头像（区域赛中应为队伍学校的校徽），images/team/文件夹下的为选手照片（区域赛中应为队伍合照），logo下的图片最好为png格式，team下的为jpg格式，都以选手（队伍）ID命名。</p><p>以下介绍具体流程：</p><ol><li>从OJ系统导出比赛的提交数据，按照给定格式生成xml文件；</li><li>利用awards.sh脚本标记获奖类型和获奖选手，生成contest.json文件；</li><li>复制对应的选手头像和照片，用生成的xml文件中对应的id重命名，然后放入logo和team文件夹；</li><li>多次运行resolver.sh，直到开头icpc logo页面能够正常显示。</li></ol><h3 id="一、XML文件格式分析"><a href="#一、XML文件格式分析" class="headerlink" title="一、XML文件格式分析"></a>一、XML文件格式分析</h3><p>由于大家可能使用的OJ也不同，我在这里就介绍一下滚榜所必须的xml文件内容以及对应的格式。</p><p>xml文件必须的内容，可以分为以下几个部分：</p><ol><li>比赛基本信息（比赛名称，持续时间之类的, info项）</li><li>比赛区域信息（队伍所属大洲，如亚洲等，我在实际使用的时候以学院作为区域喂的数据, region项）</li><li>判题结果信息（根据OJ的实际情况来，主要是设置各种判题结果怎么处理，比如说CE算不算罚时，每次错误提交算多少罚时之类的，judgement项）</li><li>代码语言信息（随便加一加就好了，实际滚榜并不会用到，但是你需要保证你OJ的提交中的语言都在这里包含了，否则会报错， language项）</li><li>队伍信息（选手信息， team项）</li><li>题目信息（problem项）</li><li>结果信息（对应所有的提交，按格式生成对应的结果信息，run项）</li><li>增加比赛结束标志（finalized项）</li></ol><p>PS: 生成xml文件我是用的python的ElementTree，使用起来还是很方便的～</p><p>首先所有的项都应该在一个<code>contest</code> dom内，sample如下：</p><pre><code>&lt;contest&gt;    &lt;info&gt;    ...    &lt;/info&gt;    &lt;region&gt;    ...    &lt;/region&gt;    &lt;judgement&gt;    ...    &lt;/judgement&gt;    &lt;language&gt;    ...    &lt;/language&gt;    &lt;problem&gt;    ...    &lt;/problem&gt;    &lt;team&gt;    ...    &lt;/team&gt;    &lt;run&gt;    ...    &lt;/run&gt;    &lt;finalized&gt;    ...    &lt;/finalized&gt;&lt;/contest&gt;</code></pre><p>其中除info项只能存在一个外，其他的都可以存在一个或多个。</p><p>接下来一项一项介绍……</p><p>首先是<code>info</code>项：</p><p>sample：</p><pre><code>  &lt;info&gt;    &lt;length&gt;4:00:00&lt;/length&gt;    &lt;penalty&gt;20&lt;/penalty&gt;    &lt;started&gt;False&lt;/started&gt;    &lt;starttime&gt;1512824400.0&lt;/starttime&gt;    &lt;title&gt;2017 USTB ACM-ICPC Final Contest&lt;/title&gt;    &lt;short-title&gt;2017 USTB ACM-ICPC Final Contest&lt;/short-title&gt;    &lt;scoreboard-freeze-length&gt;0:30:00&lt;/scoreboard-freeze-length&gt;    &lt;contest-id&gt;default--3&lt;/contest-id&gt;  &lt;/info&gt;</code></pre><p><code>info</code>内的各项不用多介绍了吧，看名字也都知道是干啥的，<code>contest-id</code>随便填就行，主要是注意一下<code>scoreboard-freeze-length</code>，<code>starttime</code>和<code>length</code>这三个参数，在sample中，第一个代表的是最后半小时封榜，<code>starttime</code>你需要把比赛开始的时间转化为时间戳形式，如果使用python，可以这样：</p><pre><code>    starttime = ET.SubElement(info, 'starttime')    starttime.text = str(time.mktime(timezone.localtime(contest.start_time).timetuple()))</code></pre><p>注意<code>info</code>项有且只有一个。</p><p>接下来是<code>region</code>项：</p><p>这一项是在world final用来标记不同大洲的参赛队伍，以便于显示<code>亚洲第一</code>这样的奖项，我在实际使用中直接设为了学院名称。<code>external-id</code>自己随便分配一下就好了，但是要注意，后面还会用到。</p><p>sample：</p><pre><code>&lt;region&gt;  &lt;external-id&gt;1&lt;/external-id&gt;  &lt;name&gt;School of Computer and Communication Engineering&lt;/name&gt;&lt;/region&gt;&lt;region&gt;  &lt;external-id&gt;2&lt;/external-id&gt;  &lt;name&gt;School of Automation and Electrical Engineering&lt;/name&gt;&lt;/region&gt;</code></pre><p>接下来是<code>judgement</code>项：</p><p>作用是为了配合<code>run</code>项使用，设置不同的结果以及对应的类型，比如可以设置CE不算罚时之类的，注意这里需要能和你自己OJ的提交信息完全匹配上，或者你也可以只设置AC和WA两种状态，然后导出提交的时候处理一下映射。</p><p>sample：</p><pre><code>  &lt;judgement&gt;    &lt;id&gt;1&lt;/id&gt;    &lt;acronym&gt;AC&lt;/acronym&gt;    &lt;name&gt;Yes&lt;/name&gt;    &lt;solved&gt;true&lt;/solved&gt;    &lt;penalty&gt;false&lt;/penalty&gt;  &lt;/judgement&gt;  &lt;judgement&gt;    &lt;id&gt;2&lt;/id&gt;    &lt;acronym&gt;WA&lt;/acronym&gt;    &lt;name&gt;No - Wrong Answer&lt;/name&gt;    &lt;solved&gt;false&lt;/solved&gt;    &lt;penalty&gt;true&lt;/penalty&gt;  &lt;/judgement&gt;  &lt;judgement&gt;    &lt;id&gt;3&lt;/id&gt;    &lt;acronym&gt;CE&lt;/acronym&gt;    &lt;name&gt;No - Compile Error&lt;/name&gt;    &lt;solved&gt;false&lt;/solved&gt;    &lt;penalty&gt;true&lt;/penalty&gt;  &lt;/judgement&gt;  &lt;judgement&gt;    &lt;id&gt;4&lt;/id&gt;    &lt;acronym&gt;RE&lt;/acronym&gt;    &lt;name&gt;No - Run Time Error&lt;/name&gt;    &lt;solved&gt;false&lt;/solved&gt;    &lt;penalty&gt;true&lt;/penalty&gt;  &lt;/judgement&gt;  &lt;judgement&gt;    &lt;id&gt;5&lt;/id&gt;    &lt;acronym&gt;SE&lt;/acronym&gt;    &lt;name&gt;No - System Error&lt;/name&gt;    &lt;solved&gt;false&lt;/solved&gt;    &lt;penalty&gt;false&lt;/penalty&gt;  &lt;/judgement&gt; </code></pre><p>接下来是<code>language</code>项：</p><p>和<code>judgement</code>一样，主要是为了配合<code>run</code>使用。</p><p>sample：</p><pre><code>  &lt;language&gt;    &lt;id&gt;1&lt;/id&gt;    &lt;name&gt;c&lt;/name&gt;  &lt;/language&gt;  &lt;language&gt;    &lt;id&gt;2&lt;/id&gt;    &lt;name&gt;c++&lt;/name&gt;  &lt;/language&gt;  &lt;language&gt;    &lt;id&gt;3&lt;/id&gt;    &lt;name&gt;java&lt;/name&gt;  &lt;/language&gt; </code></pre><p>接下来是<code>team</code>项：</p><p>为了方便，<code>id</code>和<code>external-id</code>我是直接用的数据库中用户的主键id</p><p>sample：</p><pre><code>  &lt;team&gt;    &lt;id&gt;87&lt;/id&gt;    &lt;external-id&gt;87&lt;/external-id&gt;    &lt;region&gt;School of Computer and Communication Engineering&lt;/region&gt;    &lt;name&gt;Yuncheng Wang&lt;/name&gt;    &lt;university&gt;Yuncheng Wang&lt;/university&gt;  &lt;/team&gt;    &lt;team&gt;    &lt;id&gt;108&lt;/id&gt;    &lt;external-id&gt;108&lt;/external-id&gt;    &lt;region&gt;School of Computer and Communication Engineering&lt;/region&gt;    &lt;name&gt;Jinkai Xue&lt;/name&gt;    &lt;university&gt;Jinkai Xue&lt;/university&gt;  &lt;/team&gt; </code></pre><p>接下来是<code>problem</code>项：</p><p>sample：</p><pre><code>  &lt;problem&gt;    &lt;id&gt;8&lt;/id&gt;    &lt;letter&gt;H&lt;/letter&gt;    &lt;name&gt;Stones&lt;/name&gt;  &lt;/problem&gt;  &lt;problem&gt;    &lt;id&gt;9&lt;/id&gt;    &lt;letter&gt;I&lt;/letter&gt;    &lt;name&gt;Practice of SUOAO&lt;/name&gt;  &lt;/problem&gt; </code></pre><p>接下来是<code>run</code>项：</p><p><code>id</code>我是导出了所有提交之后，从1开始计数的，没有尝试过不从1开始会不会出现问题……</p><p><code>judged</code>需要全部为True，<code>status</code>需要全部为done，<code>timestamp</code>类似上面比赛的开始时间，将提交时间转化为时间戳；</p><p><code>time</code>为从比赛开始到提交所经过的秒数，可以使用如下代码：</p><pre><code>    times = ET.SubElement(run, 'time')    times.text = str((item.create_time - contest.start_time).total_seconds())</code></pre><p>sample：</p><pre><code>  &lt;run&gt;    &lt;id&gt;6&lt;/id&gt;    &lt;judged&gt;True&lt;/judged&gt;    &lt;language&gt;c++&lt;/language&gt;    &lt;problem&gt;2&lt;/problem&gt;    &lt;status&gt;done&lt;/status&gt;    &lt;team&gt;69&lt;/team&gt;    &lt;time&gt;471.309999&lt;/time&gt;    &lt;timestamp&gt;1512824871.31&lt;/timestamp&gt;    &lt;solved&gt;false&lt;/solved&gt;    &lt;penalty&gt;true&lt;/penalty&gt;    &lt;result&gt;WA&lt;/result&gt;  &lt;/run&gt;  &lt;run&gt;    &lt;id&gt;7&lt;/id&gt;    &lt;judged&gt;True&lt;/judged&gt;    &lt;language&gt;c&lt;/language&gt;    &lt;problem&gt;4&lt;/problem&gt;    &lt;status&gt;done&lt;/status&gt;    &lt;team&gt;99&lt;/team&gt;    &lt;time&gt;494.562765&lt;/time&gt;    &lt;timestamp&gt;1512824894.56&lt;/timestamp&gt;    &lt;solved&gt;false&lt;/solved&gt;    &lt;penalty&gt;true&lt;/penalty&gt;    &lt;result&gt;WA&lt;/result&gt;  &lt;/run&gt; </code></pre><p>接下来是<code>finalized</code>项：</p><p>注意这一项是必须的……否则后面某个步骤会出问题……</p><p>sample：</p><p><code>time</code>直接设为0即可</p><p><code>timestamp</code>是比赛结束时间的时间戳</p><p><code>last_gold,last_silver,last_bronze</code>这三个指的是金牌、银牌、铜牌的最后一名是多少，比如sample中就代表金牌一个，银牌三个，铜牌五个</p><pre><code>  &lt;finalized&gt;    &lt;last_gold&gt;1&lt;/last_gold&gt;    &lt;last_silver&gt;4&lt;/last_silver&gt;    &lt;last_bronze&gt;9&lt;/last_bronze&gt;    &lt;time&gt;0&lt;/time&gt;    &lt;timestamp&gt;1512838800.0&lt;/timestamp&gt;  &lt;/finalized&gt; </code></pre><p>注意上述所有项都需要放在一个<code>contest</code>的大项内部。</p><h3 id="二、生成contest-json文件"><a href="#二、生成contest-json文件" class="headerlink" title="二、生成contest.json文件"></a>二、生成contest.json文件</h3><p>终端输入命令<code>./awards.sh</code></p><p>会弹出一个GUI界面, 然后选择第三项，<code>read local event feed</code>，并选择上一步生成的xml文件</p><p>然后就是GUI操作设置奖项了……一共有五种类型的awards可以设置，其中rank是设置前多少名才会显示大屏幕的暂停页面，就是滚榜的时候会不会停下来显示选手的照片，medal是金银铜牌，Group是区域第一名之类的，在我使用的时候就是设置每个学院的第一名，然后first to solve是一血，world finals直接忽略就好了……</p><p>设置完成之后点击save，会保存一个json文件，重命名为<code>contest.json</code>，放入<code>cdp</code>文件夹内</p><p>注：打星不发牌之类的，直接在导出的<code>contest.json</code>中修改对应的awards即可</p><h3 id="三、拷贝并重命名需要的图片"><a href="#三、拷贝并重命名需要的图片" class="headerlink" title="三、拷贝并重命名需要的图片"></a>三、拷贝并重命名需要的图片</h3><p>现在<code>cdp</code>文件夹内仅有一个<code>cdp/contest.json</code>文件，在<code>cdp</code>文件夹下创建一个<code>images</code>文件夹，<code>images</code>下再创建<code>logo</code>文件夹和<code>team</code>文件夹，以之前每个选手在yml文件中分配的id给对应的图片命名即可。</p><p>如果有选手不存在头像或者照片也没关系，会默认显示一个icpc的logo或者照片。</p><h3 id="四、运行resolver-sh"><a href="#四、运行resolver-sh" class="headerlink" title="四、运行resolver.sh"></a>四、运行resolver.sh</h3><p>直接运行：<code>./resolver.sh cdp/</code>即可</p><p>注意我开头提到的玄学问题……加载不成功就esc退出重新加载就好了……</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 6270 - Marriage</title>
      <link href="/2018/05/14/hdu-6270-marriage/"/>
      <url>/2018/05/14/hdu-6270-marriage/</url>
      
        <content type="html"><![CDATA[<p>给出$n$个家庭，每个家庭有$a_i$个男生，$b_i$个女生，保证$\sum{a_i}=\sum{b_i} \leq 10^5$, 现在求每个人不会在家庭内部匹配异性的方案数对$998244353$取模。</p><a id="more"></a><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://acm.split.hdu.edu.cn/showproblem.php?pid=6270" target="_blank" rel="noopener">Marriage</a></p><p>注意题目的pdf在<a href="http://acm.hdu.edu.cn/downloads/CCPC2018-Hangzhou-ProblemSet.pdf" target="_blank" rel="noopener">这儿</a>……</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>哎赛时并没有做出来，只是感觉像是个卷积的题……而且赛时也没有注意到总人数也限制了……</p><p>我们需要求解的问题是合法的匹配数量，考虑一下对立的问题，不合法的情况是什么样的呢？就是有人匹配上了自己家庭内部的异性，如果枚举不合法的匹配个数，且知道每种个数对应的方案$g(x)$，那么简单容斥可得答案应该为$\sum_{i=0}^{m}(-1)^i g(i) (S-i)!$, 其中$m$为最大的可能的不合法匹配数，应该有$m=\sum min(a_i,b_i)$, S为总人数，即$S = \sum a_i$。</p><p>现在可以看看如何求这个$g(x)$, 如果只有一个家庭，显然$g(x)=C_a^xC_b^x x!$, $x &lt;= min(a, b)$</p><p>如果有两个家庭，类似的有$g_1(x), g_2(x)$，则$g(x)=\sum_{i=0}^{min(a_1,b_1)}\sum_{j=0}^{min(a_2,b_2)}[i + j == x]g_1(i)g_2(j)$</p><p>这个时候就已经很明显了，就是一个卷积的形式，所以只需要对每个家庭$i$预处理出来$g_i(x)$,将其用启发式合并的方式卷积起来即可，这样便得到了最终的$g(x)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Filename:    hdu6270.cpp* Created:     Monday, May 14, 2018 06:34:26 PM* Author:      crazyX* More:**/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mp make_pair</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int) (x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> all(x) (x).begin(), (x).end()</span><span class="token macro property">#<span class="token directive keyword">define</span> sqr(x) ((x) * (x))</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,b) (memset(a,b,sizeof(a)))</span><span class="token macro property">#<span class="token directive keyword">define</span> y0 y3487465</span><span class="token macro property">#<span class="token directive keyword">define</span> y1 y8687969</span><span class="token macro property">#<span class="token directive keyword">define</span> fastio std::ios::sync_with_stdio(false)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">double</span> DB<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">,</span> nlim<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> msk<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">,</span> maxm <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> maxLen <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll maxv <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1e14, 1e15</span><span class="token keyword">const</span> DB pi <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double is enough</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>a <span class="token operator">*</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>b <span class="token operator">%</span> mod<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> b<span class="token punctuation">;</span> b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">inv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">namespace</span> MTT <span class="token punctuation">{</span>    <span class="token keyword">int</span> I2 <span class="token operator">=</span> <span class="token function">inv</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> cp <span class="token punctuation">{</span>        DB r<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token function">cp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">cp</span><span class="token punctuation">(</span>DB r<span class="token punctuation">,</span> DB i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">r</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">+</span> t<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i <span class="token operator">+</span> t<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">-</span> t<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i <span class="token operator">-</span> t<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">*</span> t<span class="token punctuation">.</span>r <span class="token operator">-</span> i <span class="token operator">*</span> t<span class="token punctuation">.</span>i<span class="token punctuation">,</span> r <span class="token operator">*</span> t<span class="token punctuation">.</span>i <span class="token operator">+</span> i <span class="token operator">*</span> t<span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span> w<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ilim <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> maxLen<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilim<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">,</span> k <span class="token operator">=</span> ilim <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 pi / ilim</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token operator">!</span><span class="token punctuation">(</span>j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>pi <span class="token operator">/</span> k <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span>pi <span class="token operator">/</span> k <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nlim <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>maxv <span class="token operator">/</span> <span class="token punctuation">(</span>mod <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>mod <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxn <span class="token operator">-</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>sp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>sp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> mod<span class="token punctuation">;</span> <span class="token operator">++</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>        msk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">FFT</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> cp a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> bitLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bitRev<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitLen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>bitLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitLen <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>bitLen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bitRev<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>bitLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> d <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> d<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cp <span class="token operator">&amp;</span>AL <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AH <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> k <span class="token operator">+</span> d<span class="token punctuation">]</span><span class="token punctuation">;</span>                    cp TP <span class="token operator">=</span> w<span class="token punctuation">[</span>k <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>maxLen <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> AH<span class="token punctuation">;</span>                    AH <span class="token operator">=</span> AL <span class="token operator">-</span> TP<span class="token punctuation">,</span> AL <span class="token operator">=</span> AL <span class="token operator">+</span> TP<span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">polyMul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// c not in {a, b}</span>        <span class="token keyword">int</span> aLen <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bLen <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> cp A<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> D<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">,</span> cLen <span class="token operator">=</span> aLen <span class="token operator">+</span> bLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// optional: parameter</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> aLen <span class="token operator">+</span> bLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>aLen<span class="token punctuation">,</span> bLen<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> nlim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> aLen <span class="token operator">?</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">&lt;</span> bLen <span class="token operator">?</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cp <span class="token function">tr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                j <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> tr<span class="token punctuation">;</span>            <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// if min(aLen, bLen) * mod &lt;= maxv</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> aLen <span class="token operator">?</span> <span class="token function">cp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> msk<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> sp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> bLen <span class="token operator">?</span> <span class="token function">cp</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> msk<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> sp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cp <span class="token function">trL</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">trH</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">tr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cp AL <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trL<span class="token punctuation">;</span>            cp AH <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trH<span class="token punctuation">;</span>            cp BL <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trL<span class="token punctuation">;</span>            cp BH <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trH<span class="token punctuation">;</span>            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> AL <span class="token operator">*</span> <span class="token punctuation">(</span>BL <span class="token operator">+</span> BH <span class="token operator">*</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span>            D<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> AH <span class="token operator">*</span> <span class="token punctuation">(</span>BL <span class="token operator">+</span> BH <span class="token operator">*</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> C<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> D<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>cLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v11 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> v12 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token keyword">int</span> v21 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> v22 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>v22 <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">+</span> v12 <span class="token operator">+</span> v21<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">+</span> v11<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> fac<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> invfac<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> invfac<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invfac<span class="token punctuation">[</span>a <span class="token operator">-</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> AC</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("data.out", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> T<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    fac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> fac<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    invfac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> invfac<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>        invfac<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>invfac<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">inv</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    MTT<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        priority_queue <span class="token operator">&lt;</span>P<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>P<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>P<span class="token operator">></span> <span class="token operator">></span> que<span class="token punctuation">;</span>        <span class="token keyword">int</span> S <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            S <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">C</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fac<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            P p1 <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            P p2 <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MTT<span class="token operator">::</span><span class="token function">polyMul</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>p1<span class="token punctuation">.</span>se<span class="token punctuation">]</span><span class="token punctuation">,</span> vec<span class="token punctuation">[</span>p2<span class="token punctuation">.</span>se<span class="token punctuation">]</span><span class="token punctuation">,</span> vec<span class="token punctuation">[</span>p1<span class="token punctuation">.</span>se<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>p1<span class="token punctuation">.</span>se<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span>se<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>se<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span> <span class="token function">mul</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fac<span class="token punctuation">[</span>S <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf #474 F.Pathwalks - 整体二分</title>
      <link href="/2018/04/08/cf-474-f-pathwalks-zheng-ti-er-fen/"/>
      <url>/2018/04/08/cf-474-f-pathwalks-zheng-ti-er-fen/</url>
      
        <content type="html"><![CDATA[<p>给定$10^5$条边，需要找一条路径，使得路径上的边的权值严格递增，并且边的编号也是严格递增的，求最长路径包含的边的数量。</p><a id="more"></a><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://codeforces.com/problemset/problem/960/F" target="_blank" rel="noopener">Pathwalks</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>似乎正解是DP，不过赛时没想这么多，因为这题有很显然的两维偏序关系，一个即输入的边的id，一个是输入的边的权值，于是想着能不能用整体二分试试，显然如果知道以某个点为入点的最大后继路径的长度，那么就可以用这个来更新所有以这个点为出点的边的后继路径长度，同时需要注意一下边权的限制，这个就可以直接用整体二分来做了。</p><p>再考虑一些细节，由于每条边只能和编号比自己大的点构成路径，那么在整体二分中，应该是先处理右半边区间，再处理自己，再处理左半边区间，在这个过程中需要复原操作（即复原输入的边集），利用类似归并排序的思路即可，利用inplace_merge或者merge函数可以很方便的完成这个工作。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mp make_pair</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int) (x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> all(x) (x).begin(), (x).end()</span><span class="token macro property">#<span class="token directive keyword">define</span> sqr(x) ((x) * (x))</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,b) (memset(a,b,sizeof(a)))</span><span class="token macro property">#<span class="token directive keyword">define</span> y0 y3487465</span><span class="token macro property">#<span class="token directive keyword">define</span> y1 y8687969</span><span class="token macro property">#<span class="token directive keyword">define</span> fastio std::ios::sync_with_stdio(false)</span><span class="token macro property">#<span class="token directive keyword">define</span> cmin(a, b) ((a) = ((a) &lt; (b) ? (a) : (b)))</span><span class="token macro property">#<span class="token directive keyword">define</span> cmax(a, b) ((a) = ((a) > (b) ? (a) : (b)))</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">struct</span> edge <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">,</span> ans<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: a=%d,b=%d,w=%d,ans=%d\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>e<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> e1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> e2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> edge <span class="token operator">&amp;</span>e1<span class="token punctuation">,</span> <span class="token keyword">const</span> edge <span class="token operator">&amp;</span>e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> e1<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> e2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>c1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ql<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> qr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> e1<span class="token punctuation">[</span>c1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> e2<span class="token punctuation">[</span>c2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> e<span class="token punctuation">[</span>ql <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> e1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> e<span class="token punctuation">[</span>ql <span class="token operator">+</span> c1 <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> e2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ql <span class="token operator">>=</span> qr <span class="token operator">||</span> l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">divide</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span> qr<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol</span><span class="token punctuation">(</span>ql <span class="token operator">+</span> c1<span class="token punctuation">,</span> qr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inplace_merge</span><span class="token punctuation">(</span>e <span class="token operator">+</span> ql<span class="token punctuation">,</span> e <span class="token operator">+</span> ql <span class="token operator">+</span> c1<span class="token punctuation">,</span> e <span class="token operator">+</span> qr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> qr<span class="token punctuation">;</span> i <span class="token operator">>=</span> ql<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">cmax</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ans<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>  <span class="token function">cmax</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> qr<span class="token punctuation">;</span> i <span class="token operator">>=</span> ql<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">></span> mid<span class="token punctuation">)</span> ans<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    c1 <span class="token operator">=</span> c2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">divide</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span> qr<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span> ql <span class="token operator">+</span> c1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inplace_merge</span><span class="token punctuation">(</span>e <span class="token operator">+</span> ql<span class="token punctuation">,</span> e <span class="token operator">+</span> ql <span class="token operator">+</span> c1<span class="token punctuation">,</span> e <span class="token operator">+</span> qr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> AC</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">cmax</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 整体二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Project Euler 100 - Arranged probability</title>
      <link href="/2018/03/13/pe-100/"/>
      <url>/2018/03/13/pe-100/</url>
      
        <content type="html"><![CDATA[<p>设蓝色碟片和红色碟片的数量分别为$n，m$，简单化简之后即求一个丢番图方程的满足$n+m&gt;10^{12}$的解。</p><a id="more"></a><p>设蓝色碟片和红色碟片的数量分别为$n，m$，得</p><p>$$\dfrac{n}{n+m} \times \dfrac{n-1}{n+m-1} = \dfrac{1}{2}$$</p><p>即求<br>$$<br>\begin{align}<br>&amp; 2n(n-1) = (n+m)(n+m-1) \<br>\Rightarrow &amp; n^2 - m^2 + 2nm - n - m = 0 \<br>\Rightarrow &amp; n^2 + (2m-1)n - m^2 - m = 0<br>\end{align}<br>$$<br>的满足$n+m&gt;10^{12}$的解</p><p>考虑$n$为变量，对应的<br>$$<br>\begin{align}<br>\triangle&amp;=(2m-1)^2 + 4(m^2 + m) \<br>&amp;=8m^2 + 1<br>\end{align}<br>$$<br>对应的解为<br>$$<br>n = \dfrac{2m+1 \pm \sqrt{8m^2 + 1}}{2}<br>$$</p><p>因为要求整数解，那么$\triangle$必须是一个平方数, 如果设$\triangle=t^2$, $\triangle$对应的恰为一个佩尔方程：<br>$$<br>t^2-8m^2=1<br>$$<br>显然其有一组解$t=3, n=1$且为最小解</p><p>关于佩尔方程$x^2-Dy^2=1$的一个定理：如果$(x_1, y_1)$是佩尔方程的最小解，则每个解都可以取幂得到,即：<br>$$<br>\begin{align}<br>&amp; x_k+\sqrt{D}y_k=(x_1+\sqrt{D}y_1)^k(k\in N_+) \<br>\Rightarrow &amp; x_{k+1}+\sqrt{D}y_{k+1}=(x_k+\sqrt{D}y_k)(x_1+\sqrt{D}y_1) (k\in N_+) \<br>\Rightarrow &amp; x_{k+1}+\sqrt{D}y_{k+1}=(x_1x_k+Dy_1y_k)+(y_1x_k+x_1y_k)\sqrt{D}<br>\end{align}<br>$$</p><p>对于PE100这道题其实到这里就结束了，虽然要求的是高于$10^{12}$次方的解，但是上述递推式的增长速度是非常快的，只需要暴力递推，枚举$t$和$n$的值并暴力检验即可。</p><p>补充内容：</p><p>$Trivially$，若要求解第$k$个解时，可以构造矩阵并利用矩阵快速幂来计算。</p><p>另外一个需要注意的是关于最小解的求解办法</p><ul><li><p>一个很自然的想法就是暴力枚举其中一个变量的值……然后代入验证</p></li><li><p><a href="http://blog.csdn.net/wh2124335/article/details/8871535" target="_blank" rel="noopener">连分数法求佩尔方程特解</a></p></li><li><p><a href="http://blog.csdn.net/ac_gibson/article/details/46646331" target="_blank" rel="noopener">http://blog.csdn.net/ac_gibson/article/details/46646331</a></p></li><li><p>题目</p><ul><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3292" target="_blank" rel="noopener">HDU3292  No more tricks, Mr Nanguo </a></li><li><a href="http://poj.org/problem?id=1320" target="_blank" rel="noopener">POJ1320  Street Numbers</a></li><li><a href="http://poj.org/problem?id=2427" target="_blank" rel="noopener">poj2427  Smith’s Problem</a></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project euler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引以为戒</title>
      <link href="/2018/01/23/yin-yi-wei-jie/"/>
      <url>/2018/01/23/yin-yi-wei-jie/</url>
      
        <content type="html"><![CDATA[<p>记录一件小事（或许也说不上小），2018年1月7日晚，和朋友叙旧约饭，开了红星二锅头助兴，没控制住还开了第二瓶，朋友聊着聊着直接趴桌上不省人事……然而这时候我也迷糊了……趁着最后一点意识微信联系了另一个朋友……欠下了巨大的人情……给朋友带来太大麻烦了……在这里记录一下，以示警戒。</p><a id="more"></a><p><img src="http://ow2gecrwu.bkt.clouddn.com/1310656402.jpg" alt=""></p><hr><p>除此之外，或许我真正开始知道自己想要的是什么了。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=139774&amp;auto=1&amp;height=66"></iframe><hr><blockquote><p>人生中有些事你不竭尽所能去做，你永远不知道自己有多出色！</p><p>——海贼王</p></blockquote><hr><blockquote><p>我觉得只要这样继续加油，总有一天能赶上他们的。</p><p>——刀剑神域</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式求逆总结 - 无向连通图计数</title>
      <link href="/2017/10/18/duo-xiang-shi-xiang-guan-wu-xiang-lian-tong-tu-ji-shu/"/>
      <url>/2017/10/18/duo-xiang-shi-xiang-guan-wu-xiang-lian-tong-tu-ji-shu/</url>
      
        <content type="html"><![CDATA[<p>求$N$个点组成的有标号简单无向连通图个数，答案模 <del>10^9+7</del> 1998585857</p><p>由这个问题引入，顺便总结一下多项式求逆的内容。</p><a id="more"></a><p>首先可以设 $f(n)$ 表示有 $n$ 个点的有标号简单连通无向图的个数， $g(n)$ 表示有 $n$ 个点的有标号简单无向图的个数（也就是不要求连通）</p><p>显然<br>$$g(n) = 2 ^ {C_n^2}$$</p><p>又因为一个有标号简单无向图是由很多连通分量组成的，为了避免重复计数，我们枚举点 $1$ 所在的连通块大小（其余的点随便连边，因为 $1$ 号点所在连通块已经确定，其它怎么连都不会重复）</p><p>$$ g(n) = \sum_{i=1}^n C_{n-1}^{i-1}f(i)g(n-i) $$</p><p>把组合数写成阶乘的形式并移项：</p><p>$$ \frac{g(n)}{(n-1)!} = \sum_{i=1}^n \frac{f(i)}{(i-1)!} * \frac{g(n-i)}{(n-i)!} $$</p><p>这就是一个很显然的卷积形式了，利用母函数的知识，考虑这么三个多项式：</p><p>$$ A(x) = \sum_{i&gt;=1} \frac{g(i)}{(i-1)!} * x^i $$</p><p>$$ B(x) = \sum_{i&gt;=1} \frac{f(i)}{(i-1)!} * x^i $$</p><p>$$ C(x) = \sum_{i&gt;=0} \frac{g(i)}{i!} * x^i $$</p><p>$$ A = B \otimes C$$</p><p>那么只要求出 $A$ 在模 $x^{n+1}$ 意义下的逆元，乘上 $C$ ，就可以得到答案</p><p>复杂度$O(NlogN)$</p><p>模$10^9+7$的话，现在直接用MTT做就好了，不再需要NTT+CRT合并这种鬼畜套路了，不过我对MTT理解不深，只会套板，多项式求逆写的比较丑，如果是模$1998585857=953*2^{21}+1$, 原根为$3$（关于原根，可以看ACdreamer的<a href="http://blog.csdn.net/acdreamers/article/details/8883285" target="_blank" rel="noopener">原根讲解</a>,以及鄙队维护的gitbook有<a href="https://xujingwei.gitbooks.io/ustb-letters-book/content/duo-xiang-shi/fftyong-dao-de-ge-zhong-su-shu.html" target="_blank" rel="noopener">素数原根表</a>）,直接用NTT做就好了，可以写的比较优雅。</p><p>然后总结一下多项式求逆。</p><h2 id="多项式求逆元"><a href="#多项式求逆元" class="headerlink" title="多项式求逆元"></a>多项式求逆元</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>在介绍多项式的逆元之前，先说明一些概念：多项式的度、多项式的逆元、多项式的除法和取余</p><p>对于一个多项式$A(x)$，称其最高项的次数为这个多项式的度（degree），记作$degA$</p><p>对于多项式$A(x),B(x)$存在唯一的$Q(x)$满足$A(x) = Q(x)B(x) + R(x)$，其中$degR &lt; degB$，我们称$Q(x)$为 $B(x)$ 除 $A(x)$ 的商，$R(x)$ 为 $B(x)$ 除 $A(x)$ 的余数，可以记做</p><p>$$A(x) \equiv R(x)(modB(x))$$</p><h3 id="多项式的逆元"><a href="#多项式的逆元" class="headerlink" title="多项式的逆元"></a>多项式的逆元</h3><p>对于一个多项式$A(x)$，如果存在$B(x)$满足$degB \leq degA $并且</p><p>$$ A(x)B(x) \equiv 1\ (mod \ x^n) $$</p><p>那么称 $B(x)$ 为 $A(x)$ 在 $mod \ x^n$ 意义下的<strong>逆元</strong>（inverse element），记作$A^{-1}(x)$</p><h3 id="多项式逆元求法"><a href="#多项式逆元求法" class="headerlink" title="多项式逆元求法"></a>多项式逆元求法</h3><p>这里我们将使用一种倍增的思想来完成。</p><p>首先，当$n=1 $时， $B[0]=A[0]^{-1}$.</p><p>然后，假如我们已经求得在模$x^{\lceil t/2 \rceil}$意义下的逆元$B_0(x)$，现在要求在模$x^t$意义下的逆元。</p><p>那么<br>$$A(x) * B_0(x) \equiv 1 \ (mod \ x^{\lceil t/2 \rceil}) $$</p><p>$$A(x) * B(x) \equiv 1 \ (mod \ x^{\lceil t/2 \rceil}) $$</p><p>由于 A(x) 逆元 B0(x) 存在，故得：</p><p>$$B(x) - B_0(x) \equiv 0 \ (mod \ x^{\lceil t/2 \rceil}) $$</p><p>那么我们将等式各部分平方，展开后得：</p><p>$$B^2(x) - 2 B(x) * B_0(x) + B_0^2(x) \equiv 0 \ (mod \ x^t) $$</p><p>两边同乘 A(x)，利用逆元的性质移项便可得：</p><p>$$B(x) \equiv B_0(x) (2 - A(x) * B_0(x)) \ (mod \ x^t) $$</p><p>上式便可在$O(tlogt)$时间内求出了。</p><p>$T(n)=T(n^2)+O(nlogn)$</p><p>由主定理易得$T(n) = O(nlogn)$，不过也需要注意，这里其实有很大常数的……</p><p>顺便一提，由这个过程可以看出，一个多项式有没有逆元完全取决于其常数项是否有逆元</p><p>PS: 对于多项式开方，即求$求B(x)$，使得$B(x) * B(x)=A(x) \ (mod\ x^m)$，同样由倍增的方式，简单分析可得$B(x) = \dfrac{B_0^2(x)+A(x)}{2B_0(x)}$，需要求$B(x)$的逆，常数更大……<del>有生之年系列</del></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>为了便于理解，可以先来一个裸的实数版本的(实际上应用不多):</p><p>注意一下实现技巧……在单次运算时可以只用3次FFT……</p><pre class=" language-cpp"><code class="language-cpp">\\ cp为复数结构体或者STL<span class="token operator">::</span>complex\\ 假设已经有了计算快速傅里叶变换的函数 <span class="token keyword">void</span> <span class="token function">fft</span><span class="token punctuation">(</span>cp x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">bool</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>cp tmp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">polyInv</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> deg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>deg <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">polyInv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> deg <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> p <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> deg<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fill</span><span class="token punctuation">(</span>tmp <span class="token operator">+</span> deg<span class="token punctuation">,</span> tmp <span class="token operator">+</span> p<span class="token punctuation">,</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fft</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fft</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">-</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">fft</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token function">fill</span><span class="token punctuation">(</span>b <span class="token operator">+</span> deg<span class="token punctuation">,</span> b <span class="token operator">+</span> o<span class="token punctuation">,</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>下面是别人的NTT版本代码……主要是我自己现在都是直接MTT没怎么用NTT……</p><p>而且NTT版本和上面FFT版本的区别很小，求个逆元就好了。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;complex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token operator">::</span>copy<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token operator">::</span>fill<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> mod_v <span class="token operator">=</span> <span class="token number">17ll</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">27</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MaxN <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span>MaxN<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>MaxN<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>MaxN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> eps<span class="token punctuation">[</span>MaxN<span class="token punctuation">]</span><span class="token punctuation">,</span> inv_eps<span class="token punctuation">[</span>MaxN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> v <span class="token operator">=</span> x <span class="token operator">*</span> v <span class="token operator">%</span> mod_v<span class="token punctuation">;</span>        x <span class="token operator">=</span> x <span class="token operator">*</span> x <span class="token operator">%</span> mod_v<span class="token punctuation">;</span>        p <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init_eps</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    tot <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> base <span class="token operator">=</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mod_v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> inv_base <span class="token operator">=</span> <span class="token function">power</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> mod_v <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> inv_eps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        eps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> eps<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> base <span class="token operator">%</span> mod_v<span class="token punctuation">;</span>        inv_eps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> inv_eps<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> inv_base <span class="token operator">%</span> mod_v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">;</span>     <span class="token keyword">return</span> x <span class="token operator">>=</span> mod_v <span class="token operator">?</span> x <span class="token operator">-</span> mod_v <span class="token operator">:</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">dec</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">-</span><span class="token operator">=</span> d<span class="token punctuation">;</span>     <span class="token keyword">return</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> x <span class="token operator">+</span> mod_v <span class="token operator">:</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> n <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>j <span class="token operator">^</span><span class="token operator">=</span> l<span class="token punctuation">)</span> <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> l <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">!=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">long</span> <span class="token keyword">long</span> z <span class="token operator">=</span> x<span class="token punctuation">[</span>j <span class="token operator">+</span> m <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">*</span> w<span class="token punctuation">[</span>tot <span class="token operator">/</span> i <span class="token operator">*</span> k<span class="token punctuation">]</span> <span class="token operator">%</span> mod_v<span class="token punctuation">;</span>                x<span class="token punctuation">[</span>j <span class="token operator">+</span> m <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">dec</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>                x<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">inc</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">polynomial_inverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> deg<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span> b<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span> tmp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>deg <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">power</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mod_v <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">polynomial_inverse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> deg <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> p <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> deg<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fill</span><span class="token punctuation">(</span>tmp <span class="token operator">+</span> deg<span class="token punctuation">,</span> tmp <span class="token operator">+</span> p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">transform</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> eps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">transform</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> b<span class="token punctuation">,</span> eps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> p<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> mod_v<span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> mod_v<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> mod_v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">transform</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> b<span class="token punctuation">,</span> inv_eps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> inv <span class="token operator">=</span> <span class="token function">power</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> mod_v <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> p<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> inv <span class="token operator">%</span> mod_v<span class="token punctuation">;</span>        <span class="token function">fill</span><span class="token punctuation">(</span>b <span class="token operator">+</span> deg<span class="token punctuation">,</span> b <span class="token operator">+</span> p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">init_eps</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    std<span class="token operator">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        std<span class="token operator">::</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">polynomial_inverse</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"inverse: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> mod_v<span class="token punctuation">)</span> <span class="token operator">%</span> mod_v<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Update：把自己魔改的TLS的MTT板子放上来……"><a href="#Update：把自己魔改的TLS的MTT板子放上来……" class="headerlink" title="Update：把自己魔改的TLS的MTT板子放上来……"></a>Update：把自己魔改的TLS的MTT板子放上来……</h3><p>（其实也就是修正了一些错误加上了求逆）……</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// TO be modified</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> maxm <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> maxLen <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll maxv <span class="token operator">=</span> <span class="token number">1e10</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1e14, 1e15</span><span class="token keyword">const</span> DB pi <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double is enough</span>ll mod <span class="token operator">=</span> <span class="token number">313</span><span class="token punctuation">,</span> nlim<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> msk<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">define</span> _ %mod</span><span class="token macro property">#<span class="token directive keyword">define</span> __ %=mod</span>ll <span class="token function">qpow</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">)</span> __<span class="token punctuation">;</span>        <span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">)</span> __<span class="token punctuation">;</span>        p <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> FFT<span class="token punctuation">{</span>    <span class="token keyword">struct</span> cp <span class="token punctuation">{</span>        DB r<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token function">cp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">cp</span><span class="token punctuation">(</span>DB r<span class="token punctuation">,</span> DB i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">r</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">+</span> t<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i <span class="token operator">+</span> t<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">-</span> t<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i <span class="token operator">-</span> t<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">*</span> t<span class="token punctuation">.</span>r <span class="token operator">-</span> i <span class="token operator">*</span> t<span class="token punctuation">.</span>i<span class="token punctuation">,</span> r <span class="token operator">*</span> t<span class="token punctuation">.</span>i <span class="token operator">+</span> i <span class="token operator">*</span> t<span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span> w<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> wInv<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ilim <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> maxLen<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilim<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">,</span> k <span class="token operator">=</span> ilim <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 pi / ilim</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token operator">!</span><span class="token punctuation">(</span>j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>pi <span class="token operator">/</span> k <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span>pi <span class="token operator">/</span> k <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wInv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nlim <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>maxv <span class="token operator">/</span> <span class="token punctuation">(</span>mod <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>mod <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxn <span class="token operator">-</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>sp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>sp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> mod<span class="token punctuation">;</span> <span class="token operator">++</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>        msk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">FFT</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> cp a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> bitLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bitRev<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitLen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>bitLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitLen <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>bitLen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bitRev<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>bitLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> d <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> d<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cp <span class="token operator">&amp;</span>AL <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AH <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> k <span class="token operator">+</span> d<span class="token punctuation">]</span><span class="token punctuation">;</span>                    cp TP <span class="token operator">=</span> w<span class="token punctuation">[</span>k <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>maxLen <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> AH<span class="token punctuation">;</span>                    AH <span class="token operator">=</span> AL <span class="token operator">-</span> TP<span class="token punctuation">,</span> AL <span class="token operator">=</span> AL <span class="token operator">+</span> TP<span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">polyMul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> aLen<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> bLen<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// c not in {a, b}</span>        <span class="token keyword">static</span> cp A<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> D<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">,</span> cLen <span class="token operator">=</span> aLen <span class="token operator">+</span> bLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// optional: parameter</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> aLen <span class="token operator">+</span> bLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>aLen<span class="token punctuation">,</span> bLen<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> nlim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> aLen <span class="token operator">?</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">&lt;</span> bLen <span class="token operator">?</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cp <span class="token function">tr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                j <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> tr<span class="token punctuation">;</span>            <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// if min(aLen, bLen) * mod &lt;= maxv</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> aLen <span class="token operator">?</span> <span class="token function">cp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> msk<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> sp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> bLen <span class="token operator">?</span> <span class="token function">cp</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> msk<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> sp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cp <span class="token function">trL</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">trH</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">tr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cp AL <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trL<span class="token punctuation">;</span>            cp AH <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trH<span class="token punctuation">;</span>            cp BL <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trL<span class="token punctuation">;</span>            cp BH <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trH<span class="token punctuation">;</span>            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> AL <span class="token operator">*</span> <span class="token punctuation">(</span>BL <span class="token operator">+</span> BH <span class="token operator">*</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span>            D<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> AH <span class="token operator">*</span> <span class="token punctuation">(</span>BL <span class="token operator">+</span> BH <span class="token operator">*</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> C<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> D<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v11 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> v12 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token keyword">int</span> v21 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> v22 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>v22 <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">+</span> v12 <span class="token operator">+</span> v21<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">+</span> v11<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// y should clear to 0</span>    <span class="token keyword">void</span> <span class="token function">polyInv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> deg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>deg <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">qpow</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">polyInv</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> deg<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> deg <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">polyMul</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> deg<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> mod<span class="token punctuation">)</span> _<span class="token punctuation">;</span>        <span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> __<span class="token punctuation">;</span>        <span class="token function">polyMul</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> deg<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> tmp <span class="token operator">+</span> deg<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> FFT </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伯努利数及其应用</title>
      <link href="/2017/10/17/bo-nu-li-shu-ji-qi-ying-yong/"/>
      <url>/2017/10/17/bo-nu-li-shu-ji-qi-ying-yong/</url>
      
        <content type="html"><![CDATA[<p>伯努利数定义：</p><p>$$\dfrac{t}{e^t - 1} = \sum_{n = 0}^{\infty} \dfrac{B_n}{n!} t^n$$</p><p>递推式：<br>$$\begin{align}<br>&amp; \sum_{k = 0}^{n}C_{n + 1}^kB_k = 0 \\<br>\Longrightarrow &amp; B_n = -\dfrac1{n+1}(C_{n+1}^0B_0 + C_{n+1}^1B_1+…+C_{n+1}^{n-1}B_{n-1})<br>\end{align}$$</p><a id="more"></a><p><br><br><br>ACdreamer有两篇博客写的很不错</p><p><a href="http://blog.csdn.net/acdreamers/article/details/38929067" target="_blank" rel="noopener">伯努利数与自然数幂和</a></p><p><a href="http://blog.csdn.net/acdreamers/article/details/39941387" target="_blank" rel="noopener">自然数幂和取模问题进一步探究</a></p><h2 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h2><p>求自然数的幂等和 </p><p><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1228" target="_blank" rel="noopener">题目链接v1</a></p><p>$$<br>\sum_{i=1}^ni^k = \dfrac1{k+1}\sum_{i=1}^{k+1}C_{k+1}^iB_{k+1-i}(n+1)^i<br>$$</p><p>在k不是很大的时候，上式中除了$B_i$之外剩下的都可以轻松预处理</p><p>对于$B_i$,可以用之前的递推式子$O(k^2)$的预处理出来</p><p>然后就可以线性时间内求得自然数的幂等和</p><p><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1258" target="_blank" rel="noopener">题目链接v2</a></p><p>当k比较大的时候，我们重新审视一下定义：</p><p>$$\begin{align}<br>\sum_{n = 0}^{\infty} \dfrac{B_n}{n!} t^n =&amp; \dfrac{t}{e^t - 1} (用泰勒公式展开e^t) \\<br> =&amp; \dfrac{t}{\sum_{i=1}^{\infty}\dfrac{t^i}{i!}} \\<br> =&amp; \dfrac{1}{\sum_{i=0}^{\infty}\dfrac{t^i}{(i+1)!}}<br> \end{align}$$</p><p>观察最后的形式，其实就是一个多项式的逆元。</p><p>那么我们把这个母函数放在模$t^{n+1}$意义下求出来，每一项就都出来了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Filename:    51nod-1258.cpp* Created:     Tuesday, October 17, 2017 03:32:24 PM* Author:      crazyX* More:**/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mp make_pair</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int) (x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> all(x) (x).begin(), (x).end()</span><span class="token macro property">#<span class="token directive keyword">define</span> sqr(x) ((x) * (x))</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,b) (memset(a,b,sizeof(a)))</span><span class="token macro property">#<span class="token directive keyword">define</span> y0 y3487465</span><span class="token macro property">#<span class="token directive keyword">define</span> y1 y8687969</span><span class="token macro property">#<span class="token directive keyword">define</span> fastio std::ios::sync_with_stdio(false)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">double</span> DB<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">50000</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span> maxm <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> maxLen <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll maxv <span class="token operator">=</span> <span class="token number">1e18</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1e14, 1e15</span><span class="token keyword">const</span> DB pi <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double is enough</span>ll mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span> nlim<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> msk<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> _ %mod</span><span class="token macro property">#<span class="token directive keyword">define</span> __ %=mod</span><span class="token keyword">inline</span> ll <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ll x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>c<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">qpow</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">)</span> __<span class="token punctuation">;</span>        <span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">)</span> __<span class="token punctuation">;</span>        p <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret _<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> FFT<span class="token punctuation">{</span>    <span class="token keyword">struct</span> cp <span class="token punctuation">{</span>        DB r<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token function">cp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">cp</span><span class="token punctuation">(</span>DB r<span class="token punctuation">,</span> DB i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">r</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">+</span> t<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i <span class="token operator">+</span> t<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">-</span> t<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i <span class="token operator">-</span> t<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">*</span> t<span class="token punctuation">.</span>r <span class="token operator">-</span> i <span class="token operator">*</span> t<span class="token punctuation">.</span>i<span class="token punctuation">,</span> r <span class="token operator">*</span> t<span class="token punctuation">.</span>i <span class="token operator">+</span> i <span class="token operator">*</span> t<span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span> w<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> wInv<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ilim <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> maxLen<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilim<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">,</span> k <span class="token operator">=</span> ilim <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 pi / ilim</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token operator">!</span><span class="token punctuation">(</span>j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>pi <span class="token operator">/</span> k <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span>pi <span class="token operator">/</span> k <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wInv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nlim <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>maxv <span class="token operator">/</span> <span class="token punctuation">(</span>mod <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>mod <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxn <span class="token operator">-</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>sp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>sp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> mod<span class="token punctuation">;</span> <span class="token operator">++</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>        msk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">FFT</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> cp a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> bitLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bitRev<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitLen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>bitLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitLen <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>bitLen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bitRev<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>bitLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> d <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> d<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cp <span class="token operator">&amp;</span>AL <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AH <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> k <span class="token operator">+</span> d<span class="token punctuation">]</span><span class="token punctuation">;</span>                    cp TP <span class="token operator">=</span> w<span class="token punctuation">[</span>k <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>maxLen <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> AH<span class="token punctuation">;</span>                    AH <span class="token operator">=</span> AL <span class="token operator">-</span> TP<span class="token punctuation">,</span> AL <span class="token operator">=</span> AL <span class="token operator">+</span> TP<span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">polyMul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> aLen<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> bLen<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// c not in {a, b}</span>        <span class="token keyword">static</span> cp A<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> D<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">,</span> cLen <span class="token operator">=</span> aLen <span class="token operator">+</span> bLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// optional: parameter</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> aLen <span class="token operator">+</span> bLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>aLen<span class="token punctuation">,</span> bLen<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> nlim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> aLen <span class="token operator">?</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">&lt;</span> bLen <span class="token operator">?</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cp <span class="token function">tr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                j <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> tr<span class="token punctuation">;</span>            <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// if min(aLen, bLen) * mod &lt;= maxv</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> aLen <span class="token operator">?</span> <span class="token function">cp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> msk<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> sp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> bLen <span class="token operator">?</span> <span class="token function">cp</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> msk<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> sp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cp <span class="token function">trL</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">trH</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">tr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cp AL <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trL<span class="token punctuation">;</span>            cp AH <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trH<span class="token punctuation">;</span>            cp BL <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trL<span class="token punctuation">;</span>            cp BH <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trH<span class="token punctuation">;</span>            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> AL <span class="token operator">*</span> <span class="token punctuation">(</span>BL <span class="token operator">+</span> BH <span class="token operator">*</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span>            D<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> AH <span class="token operator">*</span> <span class="token punctuation">(</span>BL <span class="token operator">+</span> BH <span class="token operator">*</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> C<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> D<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v11 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> v12 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token keyword">int</span> v21 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> v22 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>v22 <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">+</span> v12 <span class="token operator">+</span> v21<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">+</span> v11<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// y should clear to 0</span>    <span class="token keyword">void</span> <span class="token function">polyInv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> deg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>deg <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">qpow</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">polyInv</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> deg<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> deg <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">polyMul</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> deg<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> mod<span class="token punctuation">)</span> _<span class="token punctuation">;</span>        <span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> __<span class="token punctuation">;</span>        <span class="token function">polyMul</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> deg<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> tmp <span class="token operator">+</span> deg<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> A<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>ll inv<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> fac<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> facInv<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> mi<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FFT<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> fac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> fac<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> inv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> inv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> facInv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> facInv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fac<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i _<span class="token punctuation">;</span>        facInv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">qpow</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">qpow</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">qpow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    FFT<span class="token operator">::</span><span class="token function">polyInv</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> maxn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> _<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> ll <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fac<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> facInv<span class="token punctuation">[</span>m<span class="token punctuation">]</span> _ <span class="token operator">*</span> facInv<span class="token punctuation">[</span>n <span class="token operator">-</span> m<span class="token punctuation">]</span> _<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span>ll n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span> __<span class="token punctuation">;</span>    ll ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> mi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mi<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n _<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> B<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> _ <span class="token operator">*</span> mi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> _<span class="token punctuation">)</span> __<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret <span class="token operator">*</span> inv<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> _<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> AC</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> T<span class="token punctuation">,</span> k<span class="token punctuation">;</span> ll n<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    T <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">cal</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式求逆 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu 5730 Shell Necklace - [分治FFT|多项式求逆]</title>
      <link href="/2017/10/17/hdu-5730-shell-necklace-fen-zhi-fft-duo-xiang-shi-qiu-ni/"/>
      <url>/2017/10/17/hdu-5730-shell-necklace-fen-zhi-fft-duo-xiang-shi-qiu-ni/</url>
      
        <content type="html"><![CDATA[<p>给出长度分别为 $ 1 \sim n $ 的珠子，长度为i的珠子有$a[i]$种，每种珠子有无限个，问用这些珠子串成长度为n的链有多少种方案。</p><a id="more"></a><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://acm.split.hdu.edu.cn/showproblem.php?pid=5730" target="_blank" rel="noopener">Shell Necklace</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>( 多么好的一个模板题！业界良心！</p><p>令dp[i]表示用这些珠子串成长度为i的链的方案数，并令dp[0]=1，轻松得到转移方程</p><p>为$dp[i]=dp[i-1]<em>a[1]+dp[i-2]</em>a[2]+ … +dp[1]<em>a[i-1]+dp[0]</em>a[i]$</p><p>即 $dp[i]=\sum_{j=0}^{i-1}dp[j]*a[i-j]$</p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>对于这个式子一个显然的套路就是CDQ分治+FFT</p><p>现在考虑用cdq分治处理区间$[l,r]$,按照常规，$mid=(l+r)/2,$我们可以先递归处理$[l,mid]$区间，</p><p>然后将$[l,mid]$区间对$[mid+1,r]$区间的影响累加上去，</p><p>现在假设$cdq(l,mid)$函数已经求出了$dp[l],dp[l+1]…dp[mid]$的值，</p><p>我们考虑如何将其对后半段区间的影响累加上去：</p><p>设$g[i]$表示$dp[l],dp[l+1]…dp[mid]$对$dp[i]$的影响，</p><p>显然由最开始的DP转移式子，我们可以得出</p><p>$g[i]=dp[l]<em>a[i-l]+dp[l+1]</em>a[i-l-1]+…=\sum_{j=l}^{mid}dp[j]*a[i-j]$</p><p>那么对于区间$[l,mid]$和$[mid+1,r]$,</p><p>$dp[l] \ \ dp[l+1] \ \ … \ \ dp[mid] $</p><p>$a[1] \ \ a[2] \ \ a[3] \ \ … \ \ a[mid+1-l]$ </p><p>把以上两个式子进行卷积即可，</p><p>然后把对应的影响累加到$dp[mid+1],dp[mid+2]…dp[r]$上，</p><p>再用cdq处理右半部分区间即可。</p><p>注意不要忘了l==r时的终止条件。</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>对 $f_n=\sum_{i=0}^{n-1}f_i*a_{n - i}$ 考虑生成函数。</p><p>设 $A(x) = a_0x^0 + a_1x^1 + a_2x^2 + …$</p><p>设 $F(x) = f_0x^0 + f_1x^1 + f_2x^2 + …$</p><p>显然<br>$$<br>\begin{align}<br>A(x) * F(x) &amp;= 0 + a_1x^1 + (a_1f_1 + a_2f_0)x^2 + …\<br> &amp;= F(x) - 1<br>\end{align}<br>$$</p><p>即<br>$$F(x) = \dfrac{1}{1 - A(x)} $$</p><p>那么直接用FFT多项式求逆即可，由于模数很小仅为 $313$</p><p>理论上可以用double直接怼过去（<del>我没试过啊口胡的</del>　CDQ分治＋FFT就是直接double怼过去的）</p><p>比较稳妥的做法是用NTT进行多项式求逆，但是并不是一个很舒服的做法</p><p>因为 $313$ 并不是一个特殊的素数，常规做法需要CRT进行合并</p><p>但是我们现在有了新的黑科技！叫做拆系数FFT(也称MTT)，可以处理任意模数FFT问题</p><p><a href="http://blog.csdn.net/samjia2000/article/details/65661468" target="_blank" rel="noopener">MTT学习链接</a></p><p>同时这个博客中还提到了一种FFT卡常数技巧……</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="解法一-1"><a href="#解法一-1" class="headerlink" title="解法一"></a>解法一</h3><p>CDQ分治 + FFT</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Filename:    hdu5730.cpp* Created:     Tuesday, October 17, 2017 12:57:58 PM* Author:      crazyX* More:**/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mp make_pair</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int) (x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> all(x) (x).begin(), (x).end()</span><span class="token macro property">#<span class="token directive keyword">define</span> sqr(x) ((x) * (x))</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,b) (memset(a,b,sizeof(a)))</span><span class="token macro property">#<span class="token directive keyword">define</span> y0 y3487465</span><span class="token macro property">#<span class="token directive keyword">define</span> y1 y8687969</span><span class="token macro property">#<span class="token directive keyword">define</span> fastio std::ios::sync_with_stdio(false)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">double</span> DB<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> maxm <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> maxLen <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll maxv <span class="token operator">=</span> <span class="token number">1e10</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1e14, 1e15</span><span class="token keyword">const</span> DB pi <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double is enough</span>ll mod <span class="token operator">=</span> <span class="token number">313</span><span class="token punctuation">,</span> nlim<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> msk<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> _ %mod</span><span class="token macro property">#<span class="token directive keyword">define</span> __ %=mod</span>ll <span class="token function">qpow</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">)</span> __<span class="token punctuation">;</span>        <span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">)</span> __<span class="token punctuation">;</span>        p <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> FFT<span class="token punctuation">{</span>    <span class="token keyword">struct</span> cp <span class="token punctuation">{</span>        DB r<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token function">cp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">cp</span><span class="token punctuation">(</span>DB r<span class="token punctuation">,</span> DB i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">r</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">+</span> t<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i <span class="token operator">+</span> t<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">-</span> t<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i <span class="token operator">-</span> t<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">*</span> t<span class="token punctuation">.</span>r <span class="token operator">-</span> i <span class="token operator">*</span> t<span class="token punctuation">.</span>i<span class="token punctuation">,</span> r <span class="token operator">*</span> t<span class="token punctuation">.</span>i <span class="token operator">+</span> i <span class="token operator">*</span> t<span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span> w<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> wInv<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ilim <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> maxLen<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilim<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">,</span> k <span class="token operator">=</span> ilim <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 pi / ilim</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token operator">!</span><span class="token punctuation">(</span>j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>pi <span class="token operator">/</span> k <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span>pi <span class="token operator">/</span> k <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wInv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nlim <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>maxv <span class="token operator">/</span> <span class="token punctuation">(</span>mod <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>mod <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxn <span class="token operator">-</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>sp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>sp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> mod<span class="token punctuation">;</span> <span class="token operator">++</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>        msk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">FFT</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> cp a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> bitLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bitRev<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitLen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>bitLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitLen <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>bitLen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bitRev<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>bitLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> d <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> d<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cp <span class="token operator">&amp;</span>AL <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AH <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> k <span class="token operator">+</span> d<span class="token punctuation">]</span><span class="token punctuation">;</span>                    cp TP <span class="token operator">=</span> w<span class="token punctuation">[</span>k <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>maxLen <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> AH<span class="token punctuation">;</span>                    AH <span class="token operator">=</span> AL <span class="token operator">-</span> TP<span class="token punctuation">,</span> AL <span class="token operator">=</span> AL <span class="token operator">+</span> TP<span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">polyMul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> aLen<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> bLen<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// c not in {a, b}</span>        <span class="token keyword">static</span> cp A<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> D<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">,</span> cLen <span class="token operator">=</span> aLen <span class="token operator">+</span> bLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// optional: parameter</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> aLen <span class="token operator">+</span> bLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>aLen<span class="token punctuation">,</span> bLen<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> nlim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> aLen <span class="token operator">?</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">&lt;</span> bLen <span class="token operator">?</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cp <span class="token function">tr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                j <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> tr<span class="token punctuation">;</span>            <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// if min(aLen, bLen) * mod &lt;= maxv</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> aLen <span class="token operator">?</span> <span class="token function">cp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> msk<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> sp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> bLen <span class="token operator">?</span> <span class="token function">cp</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> msk<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> sp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cp <span class="token function">trL</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">trH</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">tr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cp AL <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trL<span class="token punctuation">;</span>            cp AH <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trH<span class="token punctuation">;</span>            cp BL <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trL<span class="token punctuation">;</span>            cp BH <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trH<span class="token punctuation">;</span>            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> AL <span class="token operator">*</span> <span class="token punctuation">(</span>BL <span class="token operator">+</span> BH <span class="token operator">*</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span>            D<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> AH <span class="token operator">*</span> <span class="token punctuation">(</span>BL <span class="token operator">+</span> BH <span class="token operator">*</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> C<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> D<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v11 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> v12 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token keyword">int</span> v21 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> v22 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>v22 <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">+</span> v12 <span class="token operator">+</span> v21<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">+</span> v11<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> ar<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">cdq</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>ar<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>__<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">cdq</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        b<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    FFT<span class="token operator">::</span><span class="token function">polyMul</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>mid<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token function">ll</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>__<span class="token punctuation">;</span>    <span class="token function">cdq</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> AC</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("data.out", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    FFT<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ar <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> ar<span class="token punctuation">[</span>i<span class="token punctuation">]</span> __<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">cdq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="解法二-1"><a href="#解法二-1" class="headerlink" title="解法二"></a>解法二</h2><p>多项式求逆</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Filename:    hdu5730.cpp* Created:     Tuesday, October 17, 2017 12:57:58 PM* Author:      crazyX* More:**/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mp make_pair</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int) (x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> all(x) (x).begin(), (x).end()</span><span class="token macro property">#<span class="token directive keyword">define</span> sqr(x) ((x) * (x))</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,b) (memset(a,b,sizeof(a)))</span><span class="token macro property">#<span class="token directive keyword">define</span> y0 y3487465</span><span class="token macro property">#<span class="token directive keyword">define</span> y1 y8687969</span><span class="token macro property">#<span class="token directive keyword">define</span> fastio std::ios::sync_with_stdio(false)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">double</span> DB<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> maxm <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> maxLen <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll maxv <span class="token operator">=</span> <span class="token number">1e10</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1e14, 1e15</span><span class="token keyword">const</span> DB pi <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double is enough</span>ll mod <span class="token operator">=</span> <span class="token number">313</span><span class="token punctuation">,</span> nlim<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> msk<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> _ %mod</span><span class="token macro property">#<span class="token directive keyword">define</span> __ %=mod</span>ll <span class="token function">qpow</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">)</span> __<span class="token punctuation">;</span>        <span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">)</span> __<span class="token punctuation">;</span>        p <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> FFT<span class="token punctuation">{</span>    <span class="token keyword">struct</span> cp <span class="token punctuation">{</span>        DB r<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token function">cp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">cp</span><span class="token punctuation">(</span>DB r<span class="token punctuation">,</span> DB i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">r</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">+</span> t<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i <span class="token operator">+</span> t<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">-</span> t<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i <span class="token operator">-</span> t<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span>cp <span class="token keyword">const</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r <span class="token operator">*</span> t<span class="token punctuation">.</span>r <span class="token operator">-</span> i <span class="token operator">*</span> t<span class="token punctuation">.</span>i<span class="token punctuation">,</span> r <span class="token operator">*</span> t<span class="token punctuation">.</span>i <span class="token operator">+</span> i <span class="token operator">*</span> t<span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        cp <span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cp</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span> w<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> wInv<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ilim <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> maxLen<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilim<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">,</span> k <span class="token operator">=</span> ilim <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 pi / ilim</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token operator">!</span><span class="token punctuation">(</span>j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>pi <span class="token operator">/</span> k <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span>pi <span class="token operator">/</span> k <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wInv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nlim <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>maxv <span class="token operator">/</span> <span class="token punctuation">(</span>mod <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>mod <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxn <span class="token operator">-</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>sp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>sp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> mod<span class="token punctuation">;</span> <span class="token operator">++</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>        msk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">FFT</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> cp a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> bitLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bitRev<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitLen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>bitLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bitLen <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>bitLen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bitRev<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>bitLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>bitRev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> d <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> d <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> d<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cp <span class="token operator">&amp;</span>AL <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>AH <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> k <span class="token operator">+</span> d<span class="token punctuation">]</span><span class="token punctuation">;</span>                    cp TP <span class="token operator">=</span> w<span class="token punctuation">[</span>k <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>maxLen <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> AH<span class="token punctuation">;</span>                    AH <span class="token operator">=</span> AL <span class="token operator">-</span> TP<span class="token punctuation">,</span> AL <span class="token operator">=</span> AL <span class="token operator">+</span> TP<span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">polyMul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> aLen<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> bLen<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// c not in {a, b}</span>        <span class="token keyword">static</span> cp A<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> D<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">,</span> cLen <span class="token operator">=</span> aLen <span class="token operator">+</span> bLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// optional: parameter</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> aLen <span class="token operator">+</span> bLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>aLen<span class="token punctuation">,</span> bLen<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> nlim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cp</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> aLen <span class="token operator">?</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">&lt;</span> bLen <span class="token operator">?</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cp <span class="token function">tr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                j <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> tr<span class="token punctuation">;</span>            <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// if min(aLen, bLen) * mod &lt;= maxv</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> aLen <span class="token operator">?</span> <span class="token function">cp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> msk<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> sp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> bLen <span class="token operator">?</span> <span class="token function">cp</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> msk<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> sp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cp <span class="token function">trL</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">trH</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">tr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cp AL <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trL<span class="token punctuation">;</span>            cp AH <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trH<span class="token punctuation">;</span>            cp BL <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trL<span class="token punctuation">;</span>            cp BH <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> trH<span class="token punctuation">;</span>            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> AL <span class="token operator">*</span> <span class="token punctuation">(</span>BL <span class="token operator">+</span> BH <span class="token operator">*</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span>            D<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> AH <span class="token operator">*</span> <span class="token punctuation">(</span>BL <span class="token operator">+</span> BH <span class="token operator">*</span> tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> C<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FFT</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> D<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v11 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> v12 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token keyword">int</span> v21 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> v22 <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>v22 <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">+</span> v12 <span class="token operator">+</span> v21<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> sp<span class="token punctuation">)</span> <span class="token operator">+</span> v11<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// y should clear to 0</span>    <span class="token keyword">void</span> <span class="token function">polyInv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> deg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>deg <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">qpow</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">polyInv</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> deg<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> deg <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">polyMul</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> deg<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> mod<span class="token punctuation">)</span> _<span class="token punctuation">;</span>        <span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> __<span class="token punctuation">;</span>        <span class="token function">polyMul</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> deg<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> tmp <span class="token operator">+</span> deg<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> AC</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("data.out", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    FFT<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mod <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> _<span class="token punctuation">;</span>        FFT<span class="token operator">::</span><span class="token function">polyInv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDQ分治 </tag>
            
            <tag> 多项式求逆 </tag>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU - 5324 - Boring Class - CDQ分治</title>
      <link href="/2017/10/03/hdu-5324-boring-class-cdq-fen-zhi/"/>
      <url>/2017/10/03/hdu-5324-boring-class-cdq-fen-zhi/</url>
      
        <content type="html"><![CDATA[<p>简单来说，给出n个二维点对，求$LIS$长度和编号字典序最小的$LIS$（$x$非增，$y$非减），并输出最优$LIS$。</p><p>显然有一个$DP[i] = \max{DP[j] + 1\ | \ i &gt; j, L[i] \geq L[j], R[i] \leq R[j] }$</p><p>那么就是一个三维偏序问题。</p><a id="more"></a><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5324" target="_blank" rel="noopener">Boring Class</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先$DP[i] = \max{DP[j] + 1\ | \ i &gt; j, L[i] \geq L[j], R[i] \leq R[j] }$， 然后很明显的三维偏序问题，直接上CDQ没跑，sort一下$L[i]$，然后cdq中处理一下下标$i$,剩下的需要做的是，找一个数据结构维护$(R, value, id)$ （value为DP值，id维下标）这样一个三元组，同时对于某个$R_x$,查询所有满足$R \leq R_x $的三元组中$value$最大并且$id$最小(为了字典序最小？)的一个，这个可以考虑用线段树做，线段树直接存一个$pair&lt;int, int&gt;$，为了使得$id$最小，将$id$取负存入然后直接用线段树做单点更新和区间查询即可。</p><p>但是现在还有一个问题需要仔细思考，如果用上述方式$DP$,并且记录最优转移路线，那么只能保证每个点的前驱是最小的字典序，这样并不能保证输出的字典序最小，所以$DP$式子应该换一下:</p><p>$DP[i] = \max{DP[j] + 1\ | \ i &lt; j, L[i] \geq L[j], R[i] \leq R[j] }$</p><p>倒过来$DP$,并且同时记录最优转移路线，这样通过记录后继，就可以保证求出来的$LIS$字典序最小。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e4</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> Seg<span class="token punctuation">{</span>    <span class="token macro property">#<span class="token directive keyword">define</span> lson l, m, rt &lt;&lt; 1</span>    <span class="token macro property">#<span class="token directive keyword">define</span> rson m + 1, r, rt &lt;&lt; 1 | 1</span>    <span class="token macro property">#<span class="token directive keyword">define</span> args int l = 1, int r = N, int rt = 1</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    P dat<span class="token punctuation">[</span>maxn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> clr<span class="token punctuation">[</span>maxn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>clr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> dat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">pu</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span> <span class="token punctuation">{</span>dat<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dat<span class="token punctuation">[</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">pd</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clr<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dat<span class="token punctuation">[</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dat<span class="token punctuation">[</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clr<span class="token punctuation">[</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> clr<span class="token punctuation">[</span>rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            clr<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> R<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> dat<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">P</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token operator">-</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">pd</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>R <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> value<span class="token punctuation">,</span> id<span class="token punctuation">,</span> lson<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">update</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> value<span class="token punctuation">,</span> id<span class="token punctuation">,</span> rson<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pu</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    P <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token keyword">return</span> dat<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">pd</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        P <span class="token function">ret</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">,</span> lson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>R <span class="token operator">></span> m<span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">,</span> rson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pu</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> oper<span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">;</span>    <span class="token keyword">int</span> pre<span class="token punctuation">;</span><span class="token punctuation">}</span>q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> q1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> q2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> oper<span class="token operator">&amp;</span> o1<span class="token punctuation">,</span> <span class="token keyword">const</span> oper<span class="token operator">&amp;</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token punctuation">.</span>l <span class="token operator">==</span> o2<span class="token punctuation">.</span>l<span class="token punctuation">)</span> <span class="token keyword">return</span> o1<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> o2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token keyword">return</span> o1<span class="token punctuation">.</span>l <span class="token operator">></span> o2<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cmp2</span><span class="token punctuation">(</span><span class="token keyword">const</span> oper<span class="token operator">&amp;</span> o1<span class="token punctuation">,</span> <span class="token keyword">const</span> oper<span class="token operator">&amp;</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> o1<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> o2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> q1<span class="token punctuation">[</span>c1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> q2<span class="token punctuation">[</span>c2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c1<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>q<span class="token punctuation">[</span>i <span class="token operator">+</span> l<span class="token punctuation">]</span> <span class="token operator">=</span> q1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c2<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>q<span class="token punctuation">[</span>i <span class="token operator">+</span> l <span class="token operator">+</span> c1<span class="token punctuation">]</span> <span class="token operator">=</span> q2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">cdq</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">divide</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cdq</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>q <span class="token operator">+</span> l<span class="token punctuation">,</span> q <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    Seg<span class="token operator">::</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">>=</span> l<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">></span> mid<span class="token punctuation">)</span> Seg<span class="token operator">::</span><span class="token function">update</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        P x <span class="token operator">=</span> Seg<span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> Seg<span class="token operator">::</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> x<span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> id <span class="token operator">&lt;</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre<span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">divide</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cdq</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    freopen("data.out", "r", stdin);</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> i<span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> q <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> tmp <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> tmp <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> tmp <span class="token operator">+</span> m<span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> tmp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        Seg<span class="token operator">::</span>N <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token function">cdq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> q <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">></span> ans<span class="token punctuation">)</span> ans <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span> id <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vc<span class="token punctuation">;</span> vc<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">~</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            vc<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            id <span class="token operator">=</span> q<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>pre<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>vc<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> vc<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%c"</span><span class="token punctuation">,</span> vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" \n"</span><span class="token punctuation">[</span>i <span class="token operator">==</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDQ分治 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>偏序和CDQ分治</title>
      <link href="/2017/10/03/pian-xu-he-cdq-fen-zhi/"/>
      <url>/2017/10/03/pian-xu-he-cdq-fen-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="偏序关系"><a href="#偏序关系" class="headerlink" title="偏序关系"></a>偏序关系</h1><h2 id="关系："><a href="#关系：" class="headerlink" title="关系："></a>关系：</h2><p>集合$X$的关系，是$X$与$X$的笛卡尔积$X × X$ 的子集R，即$X$的元素的有序对集合的一个子集</p><p>属于$X × X$的有序对$(a,b)$记为$aRb$</p><p>$R$的一些概念：<br><strong>自反</strong>：$\forall x \in X, xRx $<br><strong>对称</strong>：$\forall x, y \in X, xRy \rightarrow yRx $<br><strong>传递</strong>：$\forall x, y, z \in X, xRy, yRz \rightarrow xRz $</p><h2 id="偏序："><a href="#偏序：" class="headerlink" title="偏序："></a>偏序：</h2><p><strong>偏序关系</strong>：自反，反对称且传递 符号 $ \leq $<br><strong>严格偏序</strong>：自反，反对称且传递 符号 $ &lt; $<br><strong>可比</strong>：$ \forall x, y \in X, xRy \vee yRx = true$</p><a id="more"></a><h1 id="CDQ分治"><a href="#CDQ分治" class="headerlink" title="CDQ分治"></a>CDQ分治</h1><p>我们暂且定义偏序中几个比较关系就是几维，如LIS是二维偏序</p><p>CDQ分治可以解决一类偏序问题，将多维的偏序问题减维</p><p><strong>减维的原理：</strong></p><p>通过规定用$[L,MID]更新[MID+1,R]$，使得在满足上一维顺序的同时可以对这一维进行排序来满足这一维的顺序</p><ul><li>其他的减维手段还有排序和数据结构维护</li></ul><p><strong>二维偏序</strong></p><p>通常用排序和数据结构维护就可以解决，如LIS，用CDQ分治强行做复杂度反而多一个log</p><p>但也有适合CDQ分治的，如逆序对。归并排序是CDQ的基础和最简单形式</p><p><strong>三维偏序</strong></p><p>可以用树套树或者CDQ分治+树</p><ul><li><strong>套路做法是第一维排序对其分治，第二维CDQ分治里排序，第三维用数据结构维护(常用树状数组)</strong></li></ul><p>因为前两维已经满足了，数据结构只维护一维就很简单了，常见区间和、区间最大值</p><p><strong>常见形式：</strong></p><p>目前遇到的三维偏序问题有两种形式</p><ol><li><p>更新时不需要完整信息，可以把左更新右放到最后，如统计类问题</p><p>这类问题的排序可以使用归并排序，或者提前排序然后在分治里把序列分成两份(这时候递归调用写在最后)</p><p>$CDQ(l,r)$</p><p>$CDQ(l,mid) $</p><p>$CDQ(mid+1,r)$</p><p>$[l, mid] \rightarrow [mid+1, r]$</p></li><li><p>更新时需要完整信息，用左更新右后才可以递归右面，如最优化问题<br>这类问题通常需要在分治里单独排序</p><p>$CDQ(l,r)$</p><p>$CDQ(l,mid) sort(l,r) $</p><p>$[l, mid] \rightarrow [mid+1, r]$</p><p>$CDQ(mid+1,r)$</p></li></ol><p><strong>复杂度分析</strong>:</p><p>基本就是以下两种复杂度:</p><p>$T(n)=2T(n/2)+O(kn)=O(knlogn)$</p><p>$T(n)=2T(n/2)+O(knlogn)=O(knlog^2n)$</p><p><strong>常见用途</strong>:</p><ol><li><p>数据结构题</p><p>在这类问题中通常将时间(操作序列)作为第一维，剩下的二维问题使用CDQ分治和数据结构，如Mokia，动态逆序对，天使玩偶，对应上文的第一种形式，注意必须要“修改独立”才行，强制在线GG </p></li><li><p>DP</p><p>(1)三维LIS</p><p>将序列编号作为第一维，分治里需要单独排序，感觉使用间接排序比较好,如SDOI2011拦截导弹</p><p>(2)斜率优化DP维护凸包</p><p>如：cash,WF2011 Machine Works</p><p>序列编号作为第一维，然后使用一种“先按斜率排序，分治时按序列编号(时间)分成两块再递归”的技巧</p><p>递归完$[l,mid]$后需要按x排好序，然后维护一个凸包</p><p>因为这时$[mid+1,r]$是斜率排好序的，在凸包上扫描一遍就可以了</p><p>为了避免精度问题可以使用叉积与点斜式</p></li></ol><p><strong>四维偏序</strong>:</p><p>CDQ分治套CDQ分治</p><p>$设四维a,b,c,d$</p><p>$sort \ at \ a $</p><p>$CDQ(l, r)$</p><p>$CDQ(l, mid)$</p><p>$CDQ(mid+1, r)$</p><p>$MergeSort\ at\ b, 每个元素标记属于[l,mid]还是[mid+1,r]$</p><p>$CDQ2(l, r)$</p><p>$CDQ2(l,r)$要做的和普通的三维偏序一样，就是多了一个标记的限制(来自CDQ中a的限制，必须用标记不能判断$a≤mid$，因为CDQ2是要递归下去的，mid就变了)<br>总结一下就是有一个序b和限制a，然后处理c,d的二维问题<br>复杂度$O(nlog^3n)$ ,每多套一个CDQ分治就多一个log</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDQ分治 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 16.04 /usr/bin/time 的使用</title>
      <link href="/2017/09/26/ubuntu-16-04-usr-bin-time-de-shi-yong/"/>
      <url>/2017/09/26/ubuntu-16-04-usr-bin-time-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>最近在尝试使用docker以及docker-py通过python实现一个基于Ubuntu 16.04运行代码的沙箱，之前遇到的问题暂且按下不表，最近遇到了一个很令人烦恼的问题。</p><p>Docker本身是有丰富的资源调度控制的，比如说使用的cpu核心数、cpu运行时间、实际运行时间、内存使用、交换内存使用等等，甚至可以利用ulimits来对linux系统进行限制，可以说是很完备了。</p><a id="more"></a><p>获取时间以及stdout，stderr，exit code都很方便，但是发现，虽然可以限制最高内存，但是好像没有什么好方法获取运行期间达到的最高内存，Google、stackoverflow 搜了一圈都没找到什么好的解决方案，23333然后有一个不成熟的想法，既然可以限制最高内存，那么就可以通过二分实际使用最高内存……不过感觉这样搞很蠢……</p><p>然后突然想到自己好像有点思维僵化……一直在找docker获取内存最高使用的方法，为何不直接搜索linux是如何做的呢？然后就发现了这个<a href="https://stackoverflow.com/questions/583779/how-can-i-determine-max-memory-usage-of-a-process-in-linux" target="_blank" rel="noopener">time has a verbose mode which gives you the maximum and average resident set size.</a></p><pre class=" language-bash"><code class="language-bash">$ /usr/bin/time -v command_that_needs_to_measured <span class="token operator">|</span><span class="token operator">&amp;</span> <span class="token function">grep</span> resident    Maximum resident <span class="token keyword">set</span> size <span class="token punctuation">(</span>kbytes<span class="token punctuation">)</span>: 6596    Average resident <span class="token keyword">set</span> size <span class="token punctuation">(</span>kbytes<span class="token punctuation">)</span>: 0</code></pre><p>ubuntu16.04中可能没有自带，需要使用<code>sudo apt install time</code> 安装，注意区分和系统自带函数time的区别，调用时需要带上路径。</p><p>然后尝试着测试了一下，首先是直接在代码里重定向标准输入输出，然后开了一个$10^7$大小的int数组且循环赋值（避免编译器优化），结果如下：</p><pre class=" language-bash"><code class="language-bash">$ /usr/bin/time -v <span class="token string">"./a"</span> <span class="token operator">|</span><span class="token operator">&amp;</span> <span class="token function">grep</span> resident    Maximum resident <span class="token keyword">set</span> size <span class="token punctuation">(</span>kbytes<span class="token punctuation">)</span>: 40628    Average resident <span class="token keyword">set</span> size <span class="token punctuation">(</span>kbytes<span class="token punctuation">)</span>: 0</code></pre><p>看起来很正常没有问题……然后我多了个心眼，测试了一下用<code>&lt; &gt;</code>来重定向输入输出，结果……</p><pre class=" language-bash"><code class="language-bash">$ /usr/bin/time -v <span class="token string">"./a &lt; 1.in > 1.out"</span> <span class="token operator">|</span><span class="token operator">&amp;</span> <span class="token function">grep</span> resident    Maximum resident <span class="token keyword">set</span> size <span class="token punctuation">(</span>kbytes<span class="token punctuation">)</span>: 1124    Average resident <span class="token keyword">set</span> size <span class="token punctuation">(</span>kbytes<span class="token punctuation">)</span>: 0</code></pre><p>内存竟然变小这么多……不过也很好理解，显然是将“重定向”这个操作作为监控对象了，解决方案是加上<code>sh -c</code>参数以及在command之前加上<code>exec</code>，如下：</p><pre class=" language-bash"><code class="language-bash">$ /usr/bin/time -v sh -c <span class="token string">'exec ./a &lt; 1.in > 1.out'</span> <span class="token operator">|</span><span class="token operator">&amp;</span> <span class="token function">grep</span> <span class="token string">'Maximum resident'</span>    Maximum resident <span class="token keyword">set</span> size <span class="token punctuation">(</span>kbytes<span class="token punctuation">)</span>: 40632</code></pre><p>至此问题完美解决。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Tools </tag>
            
            <tag> Resource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主定理及其应用</title>
      <link href="/2017/09/24/zhu-ding-li-ji-qi-ying-yong/"/>
      <url>/2017/09/24/zhu-ding-li-ji-qi-ying-yong/</url>
      
        <content type="html"><![CDATA[<p>主定理用来处理以下形式的复杂度求解问题：</p><p>$T(n) = \alpha\ T(n / \beta ) + f(n)$</p><a id="more"></a><h1 id="主定理-Master-Theorem-内容"><a href="#主定理-Master-Theorem-内容" class="headerlink" title="主定理(Master Theorem)内容"></a>主定理(Master Theorem)内容</h1><p><img src="http://ow2gecrwu.bkt.clouddn.com/master" alt=""></p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>Karatsuba 大整数的快速乘积算法的运行时间（时间复杂度的递推关系式）为 $T(n)=O(n)+4⋅T(n/2)$，求其最终的时间复杂度。</p><p>根据主定理的判别方法，可知对于$ T(n)=O(n)+4⋅T(n/2)，a=4,b=2，$ $则 f(n)=O(n)&lt;n^{log_ab=2}，符合第一个判别式，因此，T(n)=O(n^2)$</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 计算机科学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeForces Gym 101190 B - Binary Code</title>
      <link href="/2017/09/22/codeforces-gym-101190-b-binary-code/"/>
      <url>/2017/09/22/codeforces-gym-101190-b-binary-code/</url>
      
        <content type="html"><![CDATA[<p>给定$n (n \leq 5e5, \sum length \leq 5e5)$个01字符串,每个字符串<b>最多</b>包含一个问号，问是否存在一种将所有问号都用$0 /\ 1$替代的方案，并且使得$n$个字符串任意两个都互不是对方的前缀。</p><a id="more"></a><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://codeforces.com/gym/101190" target="_blank" rel="noopener">Binary Code</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>既然只有$0 /\ 1$,那么很自然的会联想到可能使用Trie树搞一搞，然后因为每个问号只会被替换成0或1，又可以想到用2-SAT来处理。</p><p>首先可以将字符串插入到Trie中，对于含有问号的字符串，把问号用0、1替换之后分别插入Trie中，对于每个字符串的终点，往对应的Trie树上的节点插入该字符串的id。</p><p>首先考虑特殊一点的情况，每个Trie上的节点如果最多只有一个字符串的终点，那么由这个节点往上走，一直到Trie的根节点，是不能出现其他字符串的终点的，这里可以用经典的2-SAT建模的方式维护。</p><p>接下来考虑稍微一般的情况，对于一个Trie上的节点，如果有多个字符串的终点，显然最多只有一个点可以为$true$，那么可以维护一下这若干个点的前缀和以及后缀和，具体做法是通过分别引入k个点作为辅助节点来实现的，下图以四个点为例：</p><p><img src="http://ow2gecrwu.bkt.clouddn.com/170922-135755.jpg" alt=""></p><p><img src="http://ow2gecrwu.bkt.clouddn.com/170922-135746.jpg" alt=""></p><p>对于四个点的情况如图，其中$H 点和 D 点$即Trie上这个节点的出口$st[j]$和入口$ed[j]$，这样的话，我们就可以遍历每个字符串的终端节点$i$的所有非空父节点$j$，然后$i -&gt; st[j]$建边，$ed[j] -&gt; i \wedge 1$ 建边即可。</p><p>然后就可以对原图进行scc缩点，缩点之后分别判断n个字符串的两个变量值所对应的点是否在一个联通块内，如果都不在，那么将缩点之后的新图求一个拓扑序并染色即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Filename:    B-final.cpp* Created:     Thursday, September 21, 2017 03:25:19 PM* Author:      crazyX* More:        2-SAT trie优化建图 前缀和 后缀和**/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mp make_pair</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int) (x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> all(x) (x).begin(), (x).end()</span><span class="token macro property">#<span class="token directive keyword">define</span> sqr(x) ((x) * (x))</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,b) (memset(a,b,sizeof(a)))</span><span class="token macro property">#<span class="token directive keyword">define</span> y0 y3487465</span><span class="token macro property">#<span class="token directive keyword">define</span> y1 y8687969</span><span class="token macro property">#<span class="token directive keyword">define</span> fastio std::ios::sync_with_stdio(false)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">3e6</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> outs<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> sst<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sed<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sn<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> N<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> g<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tol<span class="token punctuation">;</span><span class="token keyword">int</span> nxt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> re<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vc<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> dir <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nxt<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nxt<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>dir<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tol<span class="token punctuation">;</span>            pre<span class="token punctuation">[</span>tol<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur <span class="token operator">=</span> nxt<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    re<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>    vc<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> st<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ed<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    N <span class="token operator">=</span> n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tol<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">SZ</span><span class="token punctuation">(</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>j<span class="token punctuation">)</span> g<span class="token punctuation">[</span>N<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> g<span class="token punctuation">[</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>N<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">SZ</span><span class="token punctuation">(</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>j<span class="token punctuation">)</span> g<span class="token punctuation">[</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>N<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> g<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>vc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>N<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> pre<span class="token punctuation">[</span>re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token punctuation">;</span> j <span class="token operator">=</span> pre<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vc<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>ed<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>i <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> tp<span class="token punctuation">,</span> tim<span class="token punctuation">,</span> num<span class="token punctuation">,</span> scc<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> sta<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tim<span class="token punctuation">;</span>    sta<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> y <span class="token operator">:</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scc<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>            low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> x<span class="token punctuation">)</span>            scc<span class="token punctuation">[</span>cur <span class="token operator">=</span> sta<span class="token punctuation">[</span>tp <span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> opp<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> du<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span> col<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">gao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scc<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> scc<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>         opp<span class="token punctuation">[</span>scc<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> scc<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        opp<span class="token punctuation">[</span>scc<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> scc<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> y <span class="token operator">:</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scc<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> scc<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>                G<span class="token punctuation">[</span>scc<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>scc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> du<span class="token punctuation">[</span>scc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>du<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>opp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> y <span class="token operator">:</span> G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>du<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>vis<span class="token punctuation">[</span>scc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> col<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> sst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> outs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">outg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">SZ</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d->%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"binary.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"binary.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        sst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sn<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> outs<span class="token punctuation">[</span>sn<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        sed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sn<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span> <span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span> <span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//outg();</span>    <span class="token function">gao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-SAT </tag>
            
            <tag> 字典树 </tag>
            
            <tag> Trie </tag>
            
            <tag> SCC缩点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>install eclipse Neon on jdk9</title>
      <link href="/2017/09/18/install-eclipse-neon-on-jdk9/"/>
      <url>/2017/09/18/install-eclipse-neon-on-jdk9/</url>
      
        <content type="html"><![CDATA[<p>今天要写Java的时候突然发现还没有安装Eclipse，先是直接下载了网络安装包……结果因为墙的问题卡住……然后去下载完整安装包，直接运行却报错了：</p><pre class=" language-java"><code class="language-java">org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>e4<span class="token punctuation">.</span>core<span class="token punctuation">.</span>di<span class="token punctuation">.</span>InjectionException<span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NoClassDefFoundError<span class="token operator">:</span> javax<span class="token operator">/</span>annotation<span class="token operator">/</span>PostConstruct</code></pre><p>想了想看了一下Eclipse运行的配置文件，发现里面有这么几行：</p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>Dosgi<span class="token punctuation">.</span>requiredJavaVersion<span class="token operator">=</span><span class="token number">1.8</span></code></pre><p>然后看了下自己的java版本，竟然是jdk9……我啥时候装的java9……无奈不想卸载java9重装java8，求助于Google</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在$eclipse.ini$文件中，<code>-vmargs</code> 之下添加一行：<br><code>--add-modules=java.se.ee</code></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/34947994/neon-how-to-run-on-jdk9" target="_blank" rel="noopener">Neon: how to run on jdk9?</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
            <tag> Java </tag>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCPC 2016-2017 Finals - HDU 6005Pandaland</title>
      <link href="/2017/09/16/ccpc-2016-2017-finals-hdu-6005pandaland/"/>
      <url>/2017/09/16/ccpc-2016-2017-finals-hdu-6005pandaland/</url>
      
        <content type="html"><![CDATA[<p>给定了 $m(m \leq 4000)$ 条边，每条边有不同的权值$w_{i}$，问其中权值最小的环的权值是多少，如果不存在环，则输出0</p><a id="more"></a><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6005" target="_blank" rel="noopener">Pandaland</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>可以这样想，如果所有的边联通，我们可以按照求最小生成树的方式处理一遍，然后找出未使用的不是重边的最小权值边（这一步再扫一遍排序之后的边即可），加上这条边之后一定可以和原来的最小生成树构成一个最小环，同样的，如果有不连通的边，按照最小生成树的方式处理，最后可以得到多棵最小生成树，那么剩下的没有选取的点肯定也不可能连接任意两棵树，只能是在同一棵树内，于是又规约到单棵树时的问题，求树上两点间的距离可以利用LCA预处理后$O(1)$查询，排序$O(mlogm)$, LCA预处理$O(nlogn)$,本题中$n \leq 2m $, 总复杂度即$O(mlogm)$</p><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p>模拟赛赛后去网上找该题的题解，发现题解都是什么dij+剪枝……玄学复杂度卡时间过……并且本题也给了$3s$时限，事实上好像按照我的做法……这道题的边数可以上到$1e5$甚至$1e6$……不明白赛时为啥过的人这么少……赛后杭电上一看，结果我的代码是跑的最快的（第一名第二名都是我233333）<br><img src="http://ow2gecrwu.bkt.clouddn.com/Screenshot%20from%202017-09-16%2014-13-12.png" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,x) memset(a,x,sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int)(x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> lson l,m,rt&lt;&lt;1</span><span class="token macro property">#<span class="token directive keyword">define</span> rson m+1,r,rt&lt;&lt;1|1</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e4</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">4e3</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> T<span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">;</span>    <span class="token keyword">bool</span> fg<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> _u<span class="token punctuation">,</span> <span class="token keyword">int</span> _v<span class="token punctuation">,</span> <span class="token keyword">int</span> _w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        u <span class="token operator">=</span> _u<span class="token punctuation">;</span> v <span class="token operator">=</span> _v<span class="token punctuation">;</span> w <span class="token operator">=</span> _w<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        fg <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>E<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>P<span class="token operator">></span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>P<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> M<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>P<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> vis<span class="token punctuation">;</span><span class="token keyword">int</span> F<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>F<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> u<span class="token punctuation">)</span> <span class="token keyword">return</span> u<span class="token punctuation">;</span>    <span class="token keyword">return</span> F<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>F<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unite</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    u <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span> v <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> v<span class="token punctuation">)</span> F<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> dep<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> _dist<span class="token punctuation">,</span> <span class="token keyword">int</span> _dep<span class="token punctuation">,</span> <span class="token keyword">int</span> _fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> _dist<span class="token punctuation">;</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> _dep<span class="token punctuation">;</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> _fa<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">SZ</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> to <span class="token operator">=</span> g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fi<span class="token punctuation">,</span> w <span class="token operator">=</span> g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>se<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">==</span> u <span class="token operator">||</span> to <span class="token operator">==</span> _fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> _dist <span class="token operator">+</span> w<span class="token punctuation">,</span> _dep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">presolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clr</span><span class="token punctuation">(</span>fa<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">DFS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">LCA</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> u <span class="token operator">=</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">return</span> u<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            u <span class="token operator">=</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            v <span class="token operator">=</span> fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">-</span> dist<span class="token punctuation">[</span><span class="token function">LCA</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> F<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>E<span class="token punctuation">,</span> E <span class="token operator">+</span> m<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>edge e1<span class="token punctuation">,</span> edge e2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e1<span class="token punctuation">.</span>w <span class="token operator">&lt;</span> e2<span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> st <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> et <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span> v <span class="token operator">=</span> E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">unite</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fg <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span><span class="token function">P</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">presolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> INF<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span> v <span class="token operator">=</span> E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fg<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> w <span class="token operator">+</span> <span class="token function">query</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans <span class="token operator">==</span> INF <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> AC</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> tc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> w<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: "</span><span class="token punctuation">,</span> tc<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> M<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>M<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> M<span class="token punctuation">[</span><span class="token function">P</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>n<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>M<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> M<span class="token punctuation">[</span><span class="token function">P</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>n<span class="token punctuation">;</span>            E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token function">P</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> M<span class="token punctuation">[</span><span class="token function">P</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">gao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gym 101201G Maximum Islands 最大点权独立集</title>
      <link href="/2017/09/14/gym-101201g-maximum-islands-zui-da-dian-quan-du-li-ji/"/>
      <url>/2017/09/14/gym-101201g-maximum-islands-zui-da-dian-quan-du-li-ji/</url>
      
        <content type="html"><![CDATA[<p>给定一个$n × m$的矩阵，每个点可能是陆地、水面或者未定，求最多的陆地联通块的数量。</p><a id="more"></a><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://codeforces.com/gym/101201" target="_blank" rel="noopener">G - Maximum Islands</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先对于已经给定的图，有一个明显的贪心是，对于每个陆地，周围的未定点我们都可以看做水面，因为如果将其看做陆地，并不会使得答案更优而且会占用位置，剩下的需要处理的只有若干个未定联通块，对于每个联通块，可以二分图染色，然后未定点的权值设为1，为了方便可以将其他点的权值都设为0，那么就是一个最大点权独立集的问题，套个板子就可以了。</p><h2 id="Something"><a href="#Something" class="headerlink" title="Something"></a>Something</h2><h4 id="最小点权覆盖和最大点权独立集"><a href="#最小点权覆盖和最大点权独立集" class="headerlink" title="最小点权覆盖和最大点权独立集"></a>最小点权覆盖和最大点权独立集</h4><p>二分图最小点覆盖和最大独立集都可以转化为最大匹配求解。在这个基础上，把每个点赋予一个非负的权值，这两个问题就转化为：二分图最小点权覆盖和二分图最大点权独立集。</p><h4 id="二分图最小点权覆盖"><a href="#二分图最小点权覆盖" class="headerlink" title="二分图最小点权覆盖"></a>二分图最小点权覆盖</h4><p>从x或者y集合中选取一些点，使这些点覆盖所有的边，并且选出来的点的权值尽可能小。</p><p>建模：  原二分图中的边(u,v)替换为容量为INF的有向边(u,v)，设立源点s和汇点t，将s和x集合中的点相连，容量为该点的权值；将y中的点同t相连，容量为该点的权值。在新图上求最大流，最大流量即为最小点权覆盖的权值和。</p><h4 id="二分图最大点权独立集"><a href="#二分图最大点权独立集" class="headerlink" title="二分图最大点权独立集"></a>二分图最大点权独立集</h4><p> 在二分图中找到权值和最大的点集，使得它们之间两两没有边。其实它是最小点权覆盖的对偶问题。答案=总权值-最小点覆盖集。具体证明参考胡波涛的论文。</p><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p> 本题第二部分似乎用不着二分图最大点权独立集……只需要二分图染色一下，取其中点数多的那半边图即可……</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"> <span class="token comment" spellcheck="true">/** Filename:    G.cpp* Created:     Wednesday, September 13, 2017 09:03:19 AM* Author:      crazyX* More:**/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mp make_pair</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int) (x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> all(x) (x).begin(), (x).end()</span><span class="token macro property">#<span class="token directive keyword">define</span> sqr(x) ((x) * (x))</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,b) (memset(a,b,sizeof(a)))</span><span class="token macro property">#<span class="token directive keyword">define</span> y0 y3487465</span><span class="token macro property">#<span class="token directive keyword">define</span> y1 y8687969</span><span class="token macro property">#<span class="token directive keyword">define</span> fastio std::ios::sync_with_stdio(false)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> k <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tx <span class="token operator">=</span> i <span class="token operator">+</span> dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> ty <span class="token operator">=</span> j <span class="token operator">+</span> dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ty <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> tx <span class="token operator">>=</span> n <span class="token operator">||</span> ty <span class="token operator">>=</span> m<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> ty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  Dinic  //</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_V<span class="token operator">=</span>maxn<span class="token operator">*</span>maxn<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span><span class="token keyword">int</span> to<span class="token punctuation">,</span>cap<span class="token punctuation">,</span>rev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>edge<span class="token operator">></span>G<span class="token punctuation">[</span>MAX_V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> level<span class="token punctuation">[</span>MAX_V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> iter<span class="token punctuation">[</span>MAX_V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span><span class="token keyword">int</span> to<span class="token punctuation">,</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span><span class="token punctuation">{</span>    edge h<span class="token punctuation">;</span>    h<span class="token punctuation">.</span>to<span class="token operator">=</span>to<span class="token punctuation">;</span>    h<span class="token punctuation">.</span>cap<span class="token operator">=</span>cap<span class="token punctuation">;</span>    h<span class="token punctuation">.</span>rev<span class="token operator">=</span>G<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    G<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">.</span>to<span class="token operator">=</span>from<span class="token punctuation">;</span>    h<span class="token punctuation">.</span>cap<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    h<span class="token punctuation">.</span>rev<span class="token operator">=</span>G<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    G<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>    level<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> v<span class="token operator">=</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">SZ</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            edge <span class="token operator">&amp;</span>e<span class="token operator">=</span>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>cap<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>level<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                level<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token operator">=</span>level<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t<span class="token punctuation">)</span>        <span class="token keyword">return</span> f<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i<span class="token operator">=</span>iter<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">SZ</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        edge <span class="token operator">&amp;</span>e<span class="token operator">=</span>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>cap<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>level<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&lt;</span>level<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>to<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>e<span class="token punctuation">.</span>cap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                e<span class="token punctuation">.</span>cap<span class="token operator">-</span><span class="token operator">=</span>d<span class="token punctuation">;</span>                G<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">.</span>rev<span class="token punctuation">]</span><span class="token punctuation">.</span>cap<span class="token operator">+</span><span class="token operator">=</span>d<span class="token punctuation">;</span>                <span class="token keyword">return</span> d<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">max_flow</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">bfs</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>level<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> flow<span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            flow<span class="token operator">+</span><span class="token operator">=</span>f<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Dinic  //</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> i <span class="token operator">*</span> m <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">add_edge</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> t<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> t <span class="token operator">-</span> m<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> t <span class="token operator">+</span> m<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">add_edge</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> end<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> AC</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("data.out", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> k <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tx <span class="token operator">=</span> i <span class="token operator">+</span> dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> ty <span class="token operator">=</span> j <span class="token operator">+</span> dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> ty <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> tx <span class="token operator">>=</span> n <span class="token operator">||</span> ty <span class="token operator">>=</span> m<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'W'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token function">clr</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> st <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> n <span class="token operator">*</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">max_flow</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tol <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span> tol<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    for (int i = 0; i &lt; n; i += 1)</span><span class="token comment" spellcheck="true">//        printf("%s\n", s[i]);</span><span class="token comment" spellcheck="true">//    printf("%d %d %d\n", ans, tol, res);</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans <span class="token operator">+</span> tol <span class="token operator">-</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 最大点权独立集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gym 101201F Illumination - 2SAT</title>
      <link href="/2017/09/14/gym-101201f-illumination-2sat/"/>
      <url>/2017/09/14/gym-101201f-illumination-2sat/</url>
      
        <content type="html"><![CDATA[<p>1000*1000的矩形区域内给定$n(n \leq 1000)$盏灯，每盏灯可以横着亮或者竖着亮并照亮该方向上加上自己的$2 l + 1$个格点，要求点亮所有的灯，使得没有两个同一方向上点亮的灯有重合照亮的位置。</p><a id="more"></a><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://codeforces.com/gym/101201" target="_blank" rel="noopener">F - Illumination</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>可以发现每盏灯只有两个状态横着点亮或者竖着点亮，用$0/1$表示，那么可以$O(n^2)$枚举两盏灯在某个点亮方向上是否和另外一盏灯冲突，这个限制即两盏灯的状态不能同时为$0或1$，由这个逻辑关系，剩下的就是2-SAT的事了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Filename:    2-SAT.cpp* Created:     Wednesday, September 13, 2017 04:06:32 PM* Author:      crazyX* More:**/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mp make_pair</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int) (x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> all(x) (x).begin(), (x).end()</span><span class="token macro property">#<span class="token directive keyword">define</span> sqr(x) ((x) * (x))</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,b) (memset(a,b,sizeof(a)))</span><span class="token macro property">#<span class="token directive keyword">define</span> y0 y3487465</span><span class="token macro property">#<span class="token directive keyword">define</span> y1 y8687969</span><span class="token macro property">#<span class="token directive keyword">define</span> fastio std::ios::sync_with_stdio(false)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Twosat <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> g<span class="token punctuation">[</span>maxn <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> mark<span class="token punctuation">[</span>maxn <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> S<span class="token punctuation">[</span>maxn <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">[</span>x <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>c<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">SZ</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">clr</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// x=xval || y=yval</span>    <span class="token keyword">void</span> <span class="token function">add_clause</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> xval<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> yval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> xval<span class="token punctuation">;</span>        y <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> yval<span class="token punctuation">;</span>        g<span class="token punctuation">[</span>x <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>y <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mark<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> mark<span class="token punctuation">[</span>S<span class="token punctuation">[</span><span class="token operator">--</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>tsat<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> R<span class="token punctuation">;</span><span class="token keyword">int</span> r<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> AC</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("data.out", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>R<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    tsat<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">abs</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span>                tsat<span class="token punctuation">.</span><span class="token function">add_clause</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">abs</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span>                tsat<span class="token punctuation">.</span><span class="token function">add_clause</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tsat<span class="token punctuation">.</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-SAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 16.04 Apt Update Stuck %0</title>
      <link href="/2017/09/10/ubuntu-16-04-apt-update-stuck-0/"/>
      <url>/2017/09/10/ubuntu-16-04-apt-update-stuck-0/</url>
      
        <content type="html"><![CDATA[<p>今天使用Ubuntu 16.04时，执行apt update时卡在了某个地方：</p><pre class=" language-bash"><code class="language-bash">0% <span class="token punctuation">[</span>Connecting to security.ubuntu.com <span class="token punctuation">(</span>2001:67c:1360:8001::17<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><a id="more"></a><p>就是连接不上更新服务器，一个很奇怪的地方是后面的IP地址竟然是v6地址，若有所思的打开了校园网登录页面，看到了这样的界面：</p><p><img src="http://ow2gecrwu.bkt.clouddn.com/Screenshot%20from%202017-09-10%2021-35-42.png" alt="图片"></p><p>哦也就是说之前更新使用了IPV6去更新，然后apt大概默认就以IPV6去更新List了？对于校园网偶尔获取不到V6地址，尝试了几次注销登录无果之后，找了一下apt强制走v4的方法：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update -o Acquire::ForceIPv4<span class="token operator">=</span>true</code></pre><p>类似的，可以强制apt走v6流量，记录在此，以备不时之需。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Ipv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017广西邀请赛B题-Colorit-HDU-6183-CDQ分治</title>
      <link href="/2017/09/07/2017-guang-xi-yao-qing-sai-b-ti-colorit-hdu-6183-cdq-fen-zhi/"/>
      <url>/2017/09/07/2017-guang-xi-yao-qing-sai-b-ti-colorit-hdu-6183-cdq-fen-zhi/</url>
      
        <content type="html"><![CDATA[<p>维护两种操作，操作1往点$(x, y) (1 \leq x, y \leq 10^6)$加入一个颜色为$c (0 \leq c \leq 50)$的点，操作2查询矩形区域 $(1 \leq a \leq x, y_1 \leq b \leq y_2) (1 \leq x, y_1, y_2 \leq 10^6)$区域中所有$(a, b)$点的颜色种类数。</p><a id="more"></a><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6183" target="_blank" rel="noopener">Color it</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先要注意到颜色最多只有51种，51这个数字足够进行状态压缩，或者做一些其他的trick，然后对于类似的区间查询题目，因为大多数满足区间减法的性质，查询上可能会随便给，这个题不一样，有一个很明显的特殊的地方就是，矩形的左边是从1开始的，然后注意到题目中的输入格式，可以理解为多组输入（最多10组），然后每组操作数最多$1.5 × 10^5 $，那么就可以考虑对每组操作进行离线处理，考察修改操作对查询操作的贡献。</p><p>然后注意到题目中其实有一个三维偏序关系，即操作顺序（时间），x坐标，y坐标，很自然的，可以想到CDQ分治是否能维护，首先第一维按时间顺序，第二维x坐标用CDQ维护，第三维y坐标用数据结构维护，当$t_i &lt; t_j \ and \ x_i &lt;= x_j $ 且$i$是修改操作，$j$是查询操作时，由于矩形查询左端一定接到$x=1$, 所以就只剩下一个第三维$y$坐标需要维护了，修改和查询分别相当于单点修改和区间查询，具体可以将颜色用$long  \ long$压位，然后用线段树维护，每次两个值直接取或即可。</p><h3 id="Something-About-CDQ"><a href="#Something-About-CDQ" class="headerlink" title="Something About CDQ"></a>Something About CDQ</h3><p>关于CDQ具体细节，这题可以是第一维时间也可以是第一维x坐标，不过y坐标是肯定要作为第三维的，两种做法并无多大区别，时间复杂度上是一样的，只是具体实现上和思路上有那么一点区别，具体看代码。</p><p>需要注意的一点是，需要时刻记住CDQ过程中需要保证在第一维和第二维都是不大于的关系时才可以去更新第三维……自己赛时犯蠢……CDQ过程中把区间分成两半之后才进行数据结构维护……其实应该一边分一边维护……大概是意识模糊了……</p><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>题解还有开51棵线段树分别维护各个点的搞法……回头有空再看</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>以时间作为第一维，X坐标作为第二维，不需要对操作提前进行排序，cdq函数需要四个参数。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Filename:    B.cpp* Created:     Thursday, September 07, 2017 02:30:58 PM* Author:      crazyX* More:**/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mp make_pair</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int) (x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> all(x) (x).begin(), (x).end()</span><span class="token macro property">#<span class="token directive keyword">define</span> sqr(x) ((x) * (x))</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,b) (memset(a,b,sizeof(a)))</span><span class="token macro property">#<span class="token directive keyword">define</span> y0 y3487465</span><span class="token macro property">#<span class="token directive keyword">define</span> y1 y8687969</span><span class="token macro property">#<span class="token directive keyword">define</span> fastio std::ios::sync_with_stdio(false)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">300000</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> tot<span class="token punctuation">,</span> op<span class="token punctuation">;</span>ll ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> SegTree<span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">define</span> lson l,m,rt&lt;&lt;1</span><span class="token macro property">#<span class="token directive keyword">define</span> rson m+1,r,rt&lt;&lt;1|1</span><span class="token macro property">#<span class="token directive keyword">define</span> arg int l=1,int r=N,int rt=1</span><span class="token macro property">#<span class="token directive keyword">define</span> args l,r,rt</span>    ll sum<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> Clr<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">clr</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">clr</span><span class="token punctuation">(</span>Clr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Clr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>sum<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">pu</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span><span class="token punctuation">{</span>sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|</span> sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">pd</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Clr<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            Clr<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Clr<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            Clr<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>ll v<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">pd</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>v<span class="token punctuation">,</span>lson<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">update</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>v<span class="token punctuation">,</span>rson<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pu</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ll <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>R<span class="token punctuation">)</span><span class="token keyword">return</span> sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">pd</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            ll ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>ret <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>R<span class="token punctuation">,</span>lson<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>R<span class="token operator">></span>m<span class="token punctuation">)</span>ret <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>R<span class="token punctuation">,</span>rson<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pu</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>S<span class="token punctuation">;</span><span class="token keyword">struct</span> oper<span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">,</span> type<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> v<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>         type <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> Q1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> Q2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">cdq</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ql <span class="token operator">==</span> qr<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        S<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ql<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> qr<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> S<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">1ll</span><span class="token operator">&lt;&lt;</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> ans<span class="token punctuation">[</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    S<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ql<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> qr<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Q1<span class="token punctuation">[</span>c1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> S<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">1ll</span><span class="token operator">&lt;&lt;</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Q2<span class="token punctuation">[</span>c2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c1<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>Q<span class="token punctuation">[</span>i <span class="token operator">+</span> ql<span class="token punctuation">]</span> <span class="token operator">=</span> Q1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c2<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>Q<span class="token punctuation">[</span>i <span class="token operator">+</span> ql <span class="token operator">+</span> c1<span class="token punctuation">]</span> <span class="token operator">=</span> Q2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">cdq</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> ql <span class="token operator">+</span> c1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cdq</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ql <span class="token operator">+</span> c1<span class="token punctuation">,</span> qr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">gao</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ret<span class="token operator">++</span><span class="token punctuation">;</span>        x<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">cdq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1e6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">gao</span><span class="token punctuation">(</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> AC</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"B3.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    S<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> Q<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以X坐标作为第一维，时间作为第二维，需要预先对查询排序,但是cdq函数只需要两个参数：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Filename:    B.cpp* Created:     Thursday, September 07, 2017 02:30:58 PM* Author:      crazyX* More:**/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mp make_pair</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int) (x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> all(x) (x).begin(), (x).end()</span><span class="token macro property">#<span class="token directive keyword">define</span> sqr(x) ((x) * (x))</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,b) (memset(a,b,sizeof(a)))</span><span class="token macro property">#<span class="token directive keyword">define</span> y0 y3487465</span><span class="token macro property">#<span class="token directive keyword">define</span> y1 y8687969</span><span class="token macro property">#<span class="token directive keyword">define</span> fastio std::ios::sync_with_stdio(false)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">300000</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> tot<span class="token punctuation">,</span> op<span class="token punctuation">;</span>ll ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> SegTree<span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">define</span> lson l,m,rt&lt;&lt;1</span><span class="token macro property">#<span class="token directive keyword">define</span> rson m+1,r,rt&lt;&lt;1|1</span><span class="token macro property">#<span class="token directive keyword">define</span> arg int l=1,int r=N,int rt=1</span><span class="token macro property">#<span class="token directive keyword">define</span> args l,r,rt</span>    ll sum<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> Clr<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">clr</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">clr</span><span class="token punctuation">(</span>Clr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Clr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>sum<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">pu</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span><span class="token punctuation">{</span>sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|</span> sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">pd</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Clr<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            Clr<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Clr<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            Clr<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>ll v<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">pd</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>v<span class="token punctuation">,</span>lson<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">update</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>v<span class="token punctuation">,</span>rson<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pu</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ll <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>R<span class="token punctuation">)</span><span class="token keyword">return</span> sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">pd</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            ll ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>ret <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>R<span class="token punctuation">,</span>lson<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>R<span class="token operator">></span>m<span class="token punctuation">)</span>ret <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>R<span class="token punctuation">,</span>rson<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pu</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>S<span class="token punctuation">;</span><span class="token keyword">struct</span> oper<span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">,</span> type<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> v<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>         type <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> Q1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> Q2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> oper <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token keyword">const</span> oper <span class="token operator">&amp;</span>x2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1<span class="token punctuation">.</span>x <span class="token operator">==</span> x2<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> x1<span class="token punctuation">.</span>type <span class="token operator">&lt;</span> x2<span class="token punctuation">.</span>type<span class="token punctuation">;</span>     <span class="token keyword">return</span> x1<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> x2<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">cdq</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>  <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    S<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Q1<span class="token punctuation">[</span>c1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> S<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">1ll</span><span class="token operator">&lt;&lt;</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Q2<span class="token punctuation">[</span>c2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c1<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>Q<span class="token punctuation">[</span>i <span class="token operator">+</span> l<span class="token punctuation">]</span> <span class="token operator">=</span> Q1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c2<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>Q<span class="token punctuation">[</span>i <span class="token operator">+</span> l <span class="token operator">+</span> c1<span class="token punctuation">]</span> <span class="token operator">=</span> Q2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">cdq</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cdq</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">gao</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ret<span class="token operator">++</span><span class="token punctuation">;</span>        x<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> Q <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cdq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">gao</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> AC</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"B4.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    S<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> Q<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDQ分治 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试数据生成器CYaRon</title>
      <link href="/2017/09/06/ce-shi-shu-ju-sheng-cheng-qi-cyaron/"/>
      <url>/2017/09/06/ce-shi-shu-ju-sheng-cheng-qi-cyaron/</url>
      
        <content type="html"><![CDATA[<h1 id="Project-CYaRon"><a href="#Project-CYaRon" class="headerlink" title="Project CYaRon"></a>Project CYaRon</h1><p><strong>CYaRon</strong> <strong>Y</strong>et <strong>A</strong>nother <strong>R</strong>andom <strong>O</strong>lympic-i<strong>N</strong>formatics test data generator</p><p><strong>By Luogu</strong> 项目地址: <a href="https://github.com/luogu-dev/cyaron" target="_blank" rel="noopener">https://github.com/luogu-dev/cyaron</a></p><p><a href="https://travis-ci.org/luogu-dev/cyaron" target="_blank" rel="noopener"><img src="https://travis-ci.org/luogu-dev/cyaron.svg?branch=master" alt=""></a></p><p>你是否遇到以下情况：</p><ul><li>希望在5分钟内写出一组随机数据，并方便地使用它们对拍几个程序</li><li>希望生成一个合适的随机图或者树，且有一定强度</li><li>希望生成一组随机数列或者向量，且不能重复。</li></ul><p>那么，你可以借助 CYaRon 和 Python ，来快速生成一组数据。</p><a id="more"></a><p>目前支持的特性有：</p><ul><li>建一个随机图（简单图或者非简单图，有向图或无向图，带权图或者无权图）</li><li>建一个随机树（链状、随机树、或者菊花图，而且可以设定树的强弱）</li><li>生成一组允许相同或者互相不同的多维向量（可以较快速度生成10^6组、范围到10^9的向量或者数列）</li><li>根据函数解析式生成数列</li><li>生成一些随机多边形，并且可以求面积、周长等</li><li>从字典生成随机字符串、单词、句子、段落</li><li>使用以上功能生成的数据和您其他地方下载的测试数据方便地进行程序对拍</li></ul><p><strong>快速上手指南</strong></p><p>稳定版本可以从pip获取: <code>pip install cyaron</code>，在此之前，需要准备好Python。</p><p>最新开发版可以克隆GitHub源代码: <code>git clone https://github.com/luogu-dev/cyaron.git</code></p><p>请您查看<a href="https://github.com/luogu-dev/cyaron/wiki" target="_blank" rel="noopener">CYaRon文档</a>和<a href="https://github.com/luogu-dev/cyaron/wiki/%E5%9F%BA%E6%9C%AC%E5%85%A5%E9%97%A8" target="_blank" rel="noopener">CYaRon基本入门</a>来学习如何使用CYaRon。</p><p>若您发现文档中有缺漏，请提出Issue并暂时根据<code>examples</code>和源代码进行YY。 </p><p>CYaRon基于Python。若您对Python不熟悉，可看<a href="https://github.com/luogu-dev/cyaron/wiki/Python-30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">快速入门教程</a>。</p><p>之后计划实现云Generator，即只需提供写好的脚本以及std，上传到服务器，即可下载一个测试数据的压缩包，真正实现5分钟生成一个测试数据！</p><p>希望各位大佬一起来协助改进这个项目。希望这个项目可以帮助大家节省时间！</p><p><strong>使用范例</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token keyword">from</span> cyaron <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token comment" spellcheck="true"># 引入CYaRon的库</span>_n <span class="token operator">=</span> ati<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">1E4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ati函数将数组中的每一个元素转换为整形，方便您可以使用1E4一类的数来表示数据大小</span>_m <span class="token operator">=</span> ati<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1E4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这是一个图论题的数据生成器，该题目在洛谷的题号为P1339</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 即在[1, 4)范围内循环，也就是从1到3</span>    test_data <span class="token operator">=</span> IO<span class="token punctuation">(</span>file_prefix<span class="token operator">=</span><span class="token string">"heat"</span><span class="token punctuation">,</span> data_id<span class="token operator">=</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 生成 heat[1|2|3].in/out 三组测试数据</span>    n <span class="token operator">=</span> _n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 点数</span>    m <span class="token operator">=</span> _m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 边数</span>    s <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 源点，随机选取一个</span>    t <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 汇点，随机选取一个</span>    test_data<span class="token punctuation">.</span>input_writeln<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 写入到输入文件里，自动以空格分割并换行</span>    graph <span class="token operator">=</span> Graph<span class="token punctuation">.</span>graph<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> weight_limit<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 生成一个n点，m边的随机图，边权限制为5</span>    test_data<span class="token punctuation">.</span>input_writeln<span class="token punctuation">(</span>graph<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 自动写入到输入文件里，默认以一行一组u v w的形式输出</span>    test_data<span class="token punctuation">.</span>output_gen<span class="token punctuation">(</span><span class="token string">"D:\\std_binary.exe"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 标程编译后的可执行文件，不需要freopen等，CYaRon自动给该程序输入并获得输出作为.out</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制hexo博客</title>
      <link href="/2017/09/05/ding-zhi-hexo-bo-ke/"/>
      <url>/2017/09/05/ding-zhi-hexo-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>之前花了点时间将博客从WordPress迁移到了hexo，并且使用了著名的next作为博客主题，整体上还是很不错的，然后自己稍微添加了一些东西，在这里做一些记录。</p><a id="more"></a><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>由于hexo可以将内容生成静态页面，那么就可以很方便的利用github来维护并利用username.github.io来运营博客，按照找到的资料，我将该github库新建了一个hexo分支，用来存储主要的代码，master分支用来push生成的静态页面。<br>主要参考了<a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="noopener">CrazyMilk</a>这篇博客内容，按照其中流程搭建之后，日常修改按照如下方式进行：</p><blockquote><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：<br>依次执行<code>git add .</code>、<code>git commit -m “…”</code>、<code>git push origin hexo</code>指令将改动推送到GitHub（此时当前分支应为hexo）；<br>然后才执行<code>hexo generate -d</code>发布网站到master分支上。</p></blockquote><h2 id="Git子模块"><a href="#Git子模块" class="headerlink" title="Git子模块"></a>Git子模块</h2><p>由于我将整个项目扔在github上维护，并且采用了Next主题，这时候问题就来了，我像定制一部分Next主题中的内容，但是又想保持上游的更新，这个时候Git子模块就派上用场了～</p><p>主要参考这个Git文档：<a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">git工具 - 子模块</a></p><p>需要注意的是，如果现在已经有了对应的文件夹，需要将其舍弃之后重新拉取，然后每次就都可以本地将两个仓库独立使用git命令维护了。</p><h2 id="一言网-amp-amp-Next-v5-1-2"><a href="#一言网-amp-amp-Next-v5-1-2" class="headerlink" title="一言网 &amp;&amp; Next v5.1.2"></a>一言网 &amp;&amp; Next v5.1.2</h2><p>在<a href="https://loj.ac/" target="_blank" rel="noopener">LOJ</a>的首页右上角，有一个小小的一言，我一直觉得这个东西挺不错的，然后右键审查元素，发现了一言网这个网站：<a href="http://hitokoto.cn/" target="_blank" rel="noopener">一言网</a></p><h3 id="about"><a href="#about" class="headerlink" title="about"></a>about</h3><blockquote><p>这个网站是干什么的？</p></blockquote><blockquote><p>一言网(Hitokoto.cn)创立于2016年，隶属于萌创Team，目前网站主要提供一句话服务。</p></blockquote><blockquote><p>动漫也好、小说也好、网络也好，不论在哪里，我们总会看到有那么一两个句子能穿透你的心。我们把这些句子汇聚起来，形成一言网络，以传递更多的感动。如果可以，我们希望我们没有停止服务的那一天。</p></blockquote><blockquote><p>简单来说，一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。<br>或是感动，或是开心，有或是单纯的回忆。来到这里，留下你所喜欢的那一句句话，与大家分享，这就是一言存在的目的。*<br>*:本段文本源自hitokoto.us.</p></blockquote><blockquote><p>我可以干什么呢？</p></blockquote><blockquote><p>您可以…<br>分享句子 : 注册并和大家分享感动你的那个句子。<br>获取接口 : 我们提供了Api（支持HTTPS）用以各位获取句子以及信息。<br>点赞 : 您可以为您喜欢的句子点赞。点赞越多，句子被取得到的几率越大。<br>获取感动 : 在茫茫句海中寻找能感动你的句子。只要刷新首页就好了。（不要忘记随手点赞）<br>More and more…</p></blockquote><p>这里是官方的介绍，然后该网站提供了专门的API接口<a href="http://hitokoto.cn/api" target="_blank" rel="noopener">http://hitokoto.cn/api</a></p><p>通过不同类型参数可以随机获取不同的一言，于是我写了一个小小的JS，在此之前我稍微研究了一下Next的目录结构，在Next项目的<code>layout</code>文件夹下，有一个<code>_custom</code>文件夹，在这里可以很方便的定制一部分内容，修改对应的swig文件即可。</p><p>然后我在<code>sidebar.swig</code>文件中添加了如下内容:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hitokoto motion-element<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hitokoto-loader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://sslapi.hitokoto.cn/?c=a'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#hitokoto-content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'display'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>hitokoto<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#hitokoto-from'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'display'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'——'</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span> <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span>em<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hitokoto-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0.9</span>em<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">102</span>, <span class="token number">102</span>, <span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hitokoto-from<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>最终效果即如博客侧边栏最下面所示。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长理12届重现-G-跑路ing-高斯消元</title>
      <link href="/2017/09/03/chang-li-12-jie-chong-xian-g-pao-lu-ing-gao-si-xiao-yuan/"/>
      <url>/2017/09/03/chang-li-12-jie-chong-xian-g-pao-lu-ing-gao-si-xiao-yuan/</url>
      
        <content type="html"><![CDATA[<p>给定一个n个点m条边的有向图$(1&lt;=n&lt;=100, 1&lt;=m&lt;=10000)$，从1号点出发，每单位时间必须从目前位置等概率选择一条边然后移动到对应的节点上去或者不动（如果当前节点有t条边，则有1/(t+1)的概率选择一条边移动或者原地不动），可以认为每次需要花费1 单位时间。</p><p>保证在每个位置的概率收敛，求最大概率的那个位置的概率。</p><a id="more"></a><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://www.nowcoder.com/acm/contest/submit/fd8e9451406b4ef8bdeb27c0e2d4cd6b?ACMContestId=1&amp;tagId=4" target="_blank" rel="noopener">G-跑路ing</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先我们可以把从一号点可以到达的点都拎出来重新编号为$[1, c]$，考虑$DP[i]$代表编号之后$i$号节点最终的概率，那么有：</p><p>$$ DP[i] = \sum_{j \in A} \frac{DP[j]}{SZ(j)+1} $$</p><p>其中$A$集合代表所有能到达点$i$的点的集合，$SZ(j)$代表从$j$向外连出的边的数量。</p><p>共有$c$个这样的式子，将这些式子移项整理，即得出$c$个方程，再加上<br>$$ \sum_{i=1}^{c} DP[i]= 1 $$<br>共$c+1$个方程，$c$个未知数，由于数据保证收敛，即该方程组有解，套一个高斯消元的板子即可。需要注意的一个坑点是会有重边和自环。</p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>这题还可以构造转移矩阵，因为题目保证收敛，那么将矩阵用快速幂乘上个1000次左右，得到的就是最终状态。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** Filename:    G.cpp* Created:     Sunday, September 03, 2017 03:59:46 PM* Author:      crazyX* More:**/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mp make_pair</span><span class="token macro property">#<span class="token directive keyword">define</span> pb push_back</span><span class="token macro property">#<span class="token directive keyword">define</span> fi first</span><span class="token macro property">#<span class="token directive keyword">define</span> se second</span><span class="token macro property">#<span class="token directive keyword">define</span> SZ(x) ((int) (x).size())</span><span class="token macro property">#<span class="token directive keyword">define</span> all(x) (x).begin(), (x).end()</span><span class="token macro property">#<span class="token directive keyword">define</span> sqr(x) ((x) * (x))</span><span class="token macro property">#<span class="token directive keyword">define</span> clr(a,b) (memset(a,b,sizeof(a)))</span><span class="token macro property">#<span class="token directive keyword">define</span> y0 y3487465</span><span class="token macro property">#<span class="token directive keyword">define</span> y1 y8687969</span><span class="token macro property">#<span class="token directive keyword">define</span> fastio std::ios::sync_with_stdio(false)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////////////Gauss///////////</span><span class="token comment" spellcheck="true">//接口：Gauss();解存在x数组中。equ，var分别表示方程个数和变量的个数，（因为是变量 的个数不算常数的个数）要赋值。a就是行列式，其中常数是在方程右侧的符号。  </span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-10</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> equ<span class="token punctuation">,</span>var<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">Gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> max_r<span class="token punctuation">,</span> col<span class="token punctuation">;</span>      <span class="token keyword">double</span> tmp<span class="token punctuation">;</span>      col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>equ <span class="token operator">&amp;&amp;</span> col<span class="token operator">&lt;</span>var<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">,</span> col<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          max_r <span class="token operator">=</span> k<span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> equ<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">fabs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>max_r<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> eps<span class="token punctuation">)</span>              max_r <span class="token operator">=</span> i<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>max_r <span class="token operator">!=</span> k<span class="token punctuation">)</span>              <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> k<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> var<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>max_r<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> eps<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              k<span class="token operator">--</span><span class="token punctuation">;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> equ<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> eps<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  <span class="token keyword">double</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">/</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这里和整型的不同。  </span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> col<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> var<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>t<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> var<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> eps<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>          tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>var<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> var<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>          tmp <span class="token operator">-</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//if(tmp%a[i][i] != 0) return -2;  </span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">/</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">////////////Gauss///////////</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> idx<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> rid<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> tot<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> rg<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    idx<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span>    rid<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    tot<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> y <span class="token operator">:</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> AC</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"data.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("data.out", "w", stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> rg<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">clr</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        equ <span class="token operator">=</span> var <span class="token operator">=</span> tot<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> equ<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> var<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">-</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">SZ</span><span class="token punctuation">(</span> g<span class="token punctuation">[</span>rid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> y <span class="token operator">:</span> rg<span class="token punctuation">[</span> rid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>idx<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">SZ</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> equ<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>var<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> var<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>equ<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>equ<span class="token punctuation">]</span><span class="token punctuation">[</span>var<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        equ<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        for (int i = 0; i &lt; equ; i += 1) </span><span class="token comment" spellcheck="true">//            for (int j = 0; j &lt;= var; j += 1)</span><span class="token comment" spellcheck="true">//                printf("%.2f%c",a[i][j], " \n"[j==var]);</span>        <span class="token function">Gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> var<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.8f\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-06-26 重新开始</title>
      <link href="/2017/06/26/2017-06-26-e9-87-8d-e6-96-b0-e5-bc-80-e5-a7-8b/"/>
      <url>/2017/06/26/2017-06-26-e9-87-8d-e6-96-b0-e5-bc-80-e5-a7-8b/</url>
      
        <content type="html"><![CDATA[<p>这一年的时间，发生了太多太多的事情，从脱单到恢复单身，从区域赛打铁拿铜到今年邀请赛夺金，从心理，从认知，可能是我这么多年来，跨度最大的一年。</p><p>看开了很多事情，也明白了什么才是自己真正应该坚持的，年轻真好，还有后悔的机会，虽然后悔也需要付出不小的代价，从14级变成15级，说实话真的很难瞬间接受，原来的同学朋友瞬间变成学长学姐，可能从此便渐行渐远，有那么一点难过，可是我更应该要坚持自己想做的事情，加油啦，这过去的一年，就当买个教训，以后，只为自己而活。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并树模板</title>
      <link href="/2017/04/07/e5-bd-92-e5-b9-b6-e6-a0-91-e6-a8-a1-e6-9d-bf/"/>
      <url>/2017/04/07/e5-bd-92-e5-b9-b6-e6-a0-91-e6-a8-a1-e6-9d-bf/</url>
      
        <content type="html"><![CDATA[<pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;#define pb push_back#define sz(x) ((int)x.size())#define clr(a,b) memset(a,b,sizeof(a))#define lson l,m,rt&lt;&lt;1#define rson m+1,r,rt&lt;&lt;1|1#define all(x) x.begin(),x.end()typedef long long ll;const int maxn=1e3+7;const int INF=1e9+7;int n,m,t;int a[maxn];int l,r,c;//归并树模板 /*注意：    1.在build()之后需要将输入数组a[i] sort        2.query(L,R,V) 返回在[L,R]区间内&lt;=V的数的数量 */vector&lt;int&gt; dat[maxn&lt;&lt;2];void pushup(int rt){    merge(all(dat[rt&lt;&lt;1]),all(dat[rt&lt;&lt;1|1]),dat[rt].begin());}void build(int l=1,int r=n,int rt=1){    dat[rt].clear();    if(l==r)dat[rt].pb(a[l]);    else{        int m=(l+r)&gt;&gt;1;        build(lson);        build(rson);        dat[rt].resize(r-l+1);        pushup(rt);    } }//query 返回在[L,R]区间内小于等于v的数的数量 int query(int L,int R,int v,int l=1,int r=n,int rt=1){    if(L&lt;=l&amp;&amp;r&lt;=R)return upper_bound(all(dat[rt]),v)-dat[rt].begin();    int m=(l+r)&gt;&gt;1;    int res=0;    if(L&lt;=m)res+=query(L,R,v,lson);    if(R&gt;m)res+=query(L,R,v,rson);    return res;}//返回第K小 int get_k_min(int L,int R,int c){    int l=1,r=n;    while(l&lt;r){        int mid=(l+r)&gt;&gt;1;        int res=query(L,R,a[mid]);//        printf("res:%d mid:%d a[mid]:%d \n\n",res,mid,a[mid]);        if(res&lt;c)l=mid+1;        else r=mid;    }    return a[r];}//返回第k大int get_k_max(int L,int R,int c){    return get_k_min(L,R,R-L+1-(c-1));}int main(){#ifdef ACfreopen("data.txt","r",stdin);#endif    scanf("%d",&amp;n);    for(int i=1;i&lt;=n;i++)scanf("%d",&amp;a[i]);    build();    scanf("%d",&amp;m);    sort(a+1,a+n+1);    while(m--){        scanf("%d%d%d",&amp;l,&amp;r,&amp;c);        printf("%d\n",get_k_max(l,r,c));//        for(int i=l-1;i&lt;r;i++)tmp[i-l+1]=a[i];//        sort(tmp,tmp+r-l+1);//        printf("%d\n",tmp[r-l+1-c]);    }    return 0;}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归并树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生日快乐</title>
      <link href="/2017/03/07/birthday-2017/"/>
      <url>/2017/03/07/birthday-2017/</url>
      
        <content type="html"><![CDATA[<p><strong>悬弧令旦，元服既成。</strong></p><p>** 罄无不宜，以莫不兴。**</p><p>** 如冈如阜，如丘如陵。**</p><p>** 如川方至，以莫不增。**</p><p>** 如月之恒，如日之升。**</p><p>** 如山之韧，不骞不崩。**</p><p>** 俾尔多益，以莫不成。**</p><hr><p>每天我都在12点之后睡去，我不知道我在等什么。今天又是一个00:00，我想明白了，我是在等你。我们又相伴了一年。</p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生日 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python &amp; Mysql</title>
      <link href="/2017/03/05/python-mysql/"/>
      <url>/2017/03/05/python-mysql/</url>
      
        <content type="html"><![CDATA[<p>为了准备GPLT比赛，需要自己拼凑散题和练真题，散题的话，直接vjudge就好，真题的话，需要到源oj上去，不方便以比赛形式练习，自己开发的oj功能也不够完善，时间紧迫，经过和队长smile的商讨，最后决定采用爬虫+hustoj的形式解决需求。</p><p>我负责爬虫部分，操作hustoj的数据库，然后模拟登录GPLT官网提交代码，拉取结果，然后再更新数据库，至于hustoj前端的修改，全部交由了队长处理。</p><p>下面主要记录一下思路和碰到的坑，其实大多坑都是编码问题，也学到了很多：</p><p>1.交题：这个在之前开发OJ的时候，就抽象了一套比较完善的爬虫框架，结合GPLT练习题系统，最终选定了使用python的robobrowser框架，再配合beautifulsoup进行一些处理，可以很方便的进行模拟登录，交题，获取结果等操作，但是在这里需要注意的一点是，这里得到的结果之后需要插入数据库，而robobrowser默认是放回的Unicode的字符串，需要进行encode，像这样：</p><pre class="lang:python decode:true ">cols = [ele.text.strip() for ele in cols]case_result.append([ele.encode('utf8') for ele in cols])</pre><p>我们需要将case_result也存到数据库里，前端取用，为了尽量仿真，采取的做法是如上构建数组，然后调用json.dumps(case_result)之后写入数据库，可是出现了一些问题，因为编码的问题，中文存储进去都变成了’\xE7\xAD\x94\xE6\xA1\x88…’这样的形式，从网上找到了这样的内容：</p><blockquote><p>我们知道，python中的字符串分普通字符串和unicode字符串，<strong>一般从数据库中读取的字符串会自动被转换为unicode字符串</strong></p><p><strong>下面回到重点，使用json.dumps时，一般的用法为：</strong></p><p>&gt;&gt;&gt; obj={“name”:”测试”}</p><p>&gt;&gt;&gt; json.dumps(obj)</p><p>‘{“name”: “<a href="file://u6d4b//u8bd5%22%7D" target="_blank" rel="noopener">\u6d4b\u8bd5”}’</a></p><p>&gt;&gt;&gt; print json.dumps(obj)</p><p>{“name”: “\u6d4b\u8bd5”}</p><p>&gt;&gt;&gt; json.dumps(obj).encode(“utf-8”)</p><p>‘{“name”: “<a href="file://u6d4b//u8bd5%22%7D" target="_blank" rel="noopener">\u6d4b\u8bd5”}’</a></p><p>可以看到这里输出的字符串为普通字符串，但是里面的内容却是unicode字符串的内容，即使对结果进行encode(“utf-8”) ，因为这个字符串本身就已经编码过了，所有进行encode不会有变化</p><p>&nbsp;</p><p>要想得到字符串的真实表示，需要用到参数<strong>ensure_ascii=False(默认为True)</strong>：</p><p>&gt;&gt;&gt; json.dumps(obj,ensure_ascii=False)</p><p>‘{“name”: “\xe6\xb5\x8b\xe8\xaf\x95”}’</p><p>&gt;&gt; print json.dumps(obj,ensure_ascii=False)</p><p>{“name”: “测试”}<br>OK添加了之后确实可以，结果数据库又报错Incorrect string value: 很快查出了问题，也暴露了自己基础不扎实：在向数据库添加表的时候，忘记设置表的编码为utf-8，导致无法识别，于是drop掉表重新建立，问题解决。</p></blockquote><p>关于数据库的操作，其实就是几个sql语句而已，写成函数方便调用即可。</p><p>另外一个重点是考虑到要满足并发的需求，考虑使用多线程或者多进程，在这点上python都可以很方便的处理，注意到我们的爬虫其实没有什么计算，属于io密集型，采用多线程更为合适，另外比赛人数也不算多，不需要增加额外的队列使用分布式之类的东西，直接用自带的threading和Queue即可满足要求。</p><p>&nbsp;</p><p>但是GPLT官网上其实是有提交频率的限制的，我的想法是从json配置文件里读取对应的账号密码，生成对应个数的多线程worker，worker类：</p><pre class="lang:python decode:true ">class SubmitWorker(Thread):    def __init__(self, uid, pwd, queue):        self.uid = uid        self.pwd = pwd        self.time_stamp = 0        self.queue = queue        self.db = MySQLdb.connect("localhost", "test", "test", "oj", charset='utf8')        super(SubmitWorker, self).__init__()    def run(self):        while True:            sid = self.queue.get()            cur_time = time.time()            if cur_time - self.time_stamp &lt; 15:                wait_time = int(15+self.time_stamp-cur_time+1)                logger.info('{uid} should wait for {wait}s.'.format(uid=self.uid, wait=wait_time))                time.sleep(wait_time)            res = submit(self.db, sid, self.uid, self.pwd)            if not res:                s = '{uid} submit {sid} failed.'.format(uid=self.uid, sid=sid)                logger.exception(s)                self.time_stamp = time.time()                self.queue.task_done()            else:                result = res['result']                score = int(result[2])                status = str(result[1].encode("utf-8"))                try:                    status = RESULT_MAP[status]                except:                    status = RESULT_MAP['default']                time_s = int(result[5]) if result[5] else 0                memory_s = int(result[6]) if result[6] else 0                case_result = json.dumps(res['case_result'], ensure_ascii=False)                # db, solution_id, score, result_id, time_s, memory_s, case_result                update(self.db, sid, score, status, time_s, memory_s, case_result)                self.time_stamp = time.time()                self.queue.task_done()</pre><p>添加了时间戳，以便节省不必要的网络开销。</p><p>主函数类似这样初始化worker：</p><pre class="lang:python decode:true">    info = json.load(open('user-pwd.json'))    for ele in info:        uid = ele['user']        pwd = ele['pwd']        worker = SubmitWorker(uid, pwd, que)        worker.daemon = True        worker.start()    .......    que.join()</pre><p>大概就是这样，有什么记起来的，再更新上来。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决校内网HTTP劫持的问题</title>
      <link href="/2017/02/06/e8-a7-a3-e5-86-b3-e6-a0-a1-e5-86-85-e7-bd-91http-e5-8a-ab-e6-8c-81-e7-9a-84-e9-97-ae-e9-a2-98/"/>
      <url>/2017/02/06/e8-a7-a3-e5-86-b3-e6-a0-a1-e5-86-85-e7-bd-91http-e5-8a-ab-e6-8c-81-e7-9a-84-e9-97-ae-e9-a2-98/</url>
      
        <content type="html"><![CDATA[<p>今天在用apt安装一个软件的时候，出现了奇怪的错误：</p><pre class="lang:sh decode:true">Get:1 http://202.204.48.68/files/50420000001D8F93/cdn.packages.deepin.com/deepin xenial/main amd64 libgnomecanvas2-0 amd64 2.30.3-2 [82.7 kB]Err:1 http://202.204.48.68/files/50420000001D8F93/cdn.packages.deepin.com/deepin xenial/main amd64 libgnomecanvas2-0 amd64 2.30.3-2  Writing more data than expected (82993 &gt; 82720)E: Failed to fetch http://202.204.48.68/files/50420000001D8F93/cdn.packages.deepin.com/deepin/pool/main/libg/libgnomecanvas/libgnomecanvas2-0_2.30.3-2_amd64.deb  Writing more data than expected (82993 &gt; 82720)E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?</pre><p>后来在网上查找资料，联系之前校园网的通知，想到了校园网采用了文件缓存。。。</p><blockquote><p>中国的网络是奇葩的，原因之一是有奇葩的屌丝运营商。</p><p>许多小运营商（二级运营商、三级运营商、N级运营商）为了节省成本，会使用缓存系统。 这个缓存系统可以认为是一种CDN，如果做得好的话，不仅会节省成本，也会提高用户体验， 例如许多小区里大家看优酷视频从来不会缓冲，下载速度都有3MB/s以上的速度。 然而，这些缓存系统并不是CDN，而是一种非常没有节操的黑盒子。</p><ul><li>你不知道什么请求会被缓存，没法控制。</li><li>你不知道会被缓存多久。</li><li>这种缓存不遵守任何行业内的规则（例如不遵守Cache-Control头）。</li><li>发现缓存了错误的内容，你没有地方投诉。</li></ul><p>其劫持的手段也是非常的无节操的，主要受益于郭嘉的某墙开发的成果。其劫持原理大致如下：</p><ul><li>客户端C向服务器S发出一个HTTP请求；</li><li>运营商网关将该请求分光（复制）送到缓存服务器；</li><li>缓存服务器如果发现命中缓存，则伪装成S返回一个302响应，该响应通常比S的正确响应早到，因此C接受 了该响应，而忽略了S的响应，从而跳转到缓存服务器取数据；</li></ul><p>是的，这正是伟大的墙发送RST的方法。</p></blockquote><pre class="lang:c++ decode:true">After this operation, 508 kB of additional disk space will be used.Do you want to continue? [Y/n] yGet:1 http://202.204.48.68/files/50420000001D8F93/cdn.packages.deepin.com/deepin xenial/main amd64 libgnomecanvas2-0 amd64 2.30.3-2 [82.7 kB]Err:1 http://202.204.48.68/files/50420000001D8F93/cdn.packages.deepin.com/deepin xenial/main amd64 libgnomecanvas2-0 amd64 2.30.3-2  Writing more data than expected (82993 &gt; 82720)E: Failed to fetch http://202.204.48.68/files/50420000001D8F93/cdn.packages.deepin.com/deepin/pool/main/libg/libgnomecanvas/libgnomecanvas2-0_2.30.3-2_amd64.deb  Writing more data than expected (82993 &gt; 82720)E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?</pre><p>显然我用apt更新的时候，某一个依赖文件被劫持到了202.204.48.68….</p><p>解决办法：</p><p>通常缓存服务器的IP是有限的，因此我们可以这样绕过运营商的劫持，在或自己机器上添加一条iptables规则：</p><pre class="lang:sh decode:true ">sudo iptables -A INPUT -p tcp --sport 80 -m string --string "Location: http://202.204.48.68" --algo bm -j DROP</pre><p>如果是网关，则将INPUT替换成OUTPUT</p><p>该规则的意义是，如果某个HTTP响应包（这里并没有真正判断是否HTTP，仅分析来自80端口的包）中含有 Location: <a href="http://202.204.48.68" target="_blank" rel="noopener">http://202.204.48.68</a> 字样，就直接丢弃。这样后续S真实的响应包就能被客户端接收，从而保证正确的通信。</p><p>这里我们要感谢该运营商没有像某墙那样的没节操，某墙在向C发送RST的同时，也向S发送了RST，而该缓存服务器并没有 向S发送RST，彻底破坏tcp通信。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校园网 </tag>
            
            <tag> HTTP劫持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码查重工具sim</title>
      <link href="/2017/01/21/e4-bb-a3-e7-a0-81-e6-9f-a5-e9-87-8d-e5-b7-a5-e5-85-b7sim/"/>
      <url>/2017/01/21/e4-bb-a3-e7-a0-81-e6-9f-a5-e9-87-8d-e5-b7-a5-e5-85-b7sim/</url>
      
        <content type="html"><![CDATA[<p>在瞎搜东西的时候，发现了一个大牛的<a href="http://www.dickgrune.com/" target="_blank" rel="noopener">博客</a></p><p>看起来很厉害的样子。。。做了一个LaTeX的语法检查并给出适当的提示，上wiki上一查发现他竟然是CVS第一个版本的发明者和开发者。。。<a href="http://dickgrune.com/Programs/" target="_blank" rel="noopener">Dick grune</a>这是他开发的程序 = =</p><p>当然，也发现了一个代码查重工具<a href="http://dickgrune.com/Programs/similarity_tester/" target="_blank" rel="noopener">sim</a>，看文档是支持Windows和各种版本系统的，我是在Ubuntu下，下载下来之后根据文档，首先应该修改Makefile，删除掉无用的系统配置文件，比如我是linux系统，就把Windows相关的删掉；其次修改安装路径，为了方便使用，配置系统和二进制文件和man 文档的路径，二进制文件放在 <span id="crayon-5882a68500b39987821326" class="crayon-syntax crayon-syntax-inline  crayon-theme-eclipse crayon-theme-eclipse-inline crayon-font-monaco"><span class="crayon-pre crayon-code"><span class="crayon-o">/</span><span class="crayon-v">usr</span><span class="crayon-o">/</span><span class="crayon-i">bin/</span></span></span>下，man文档放在 <span id="crayon-5882a68500b43255537918" class="crayon-syntax crayon-syntax-inline  crayon-theme-eclipse crayon-theme-eclipse-inline crayon-font-monaco"><span class="crayon-pre crayon-code"><span class="crayon-o">/</span><span class="crayon-v">usr</span><span class="crayon-o">/</span><span class="crayon-v">share</span><span class="crayon-o">/</span><span class="crayon-v">man</span></span></span> 下就行。</p><p>以及这个小工具还有一个依赖flex，直接用apt安装即可。</p><h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a><strong>用法：</strong></h2><p>１、选择语言：sim 支持多种语言：C, Java, Pascal, Modula-2, Lisp , Miranda, or text files，对应的命令分别是： sim_c ，sim_java，sim_pasc ，sim_m2，sim_lisp ，sim_mira，sim_text 。</p><p>２、选择参数：常用的参数有三个：</p><p>-p 　　　　：表示以“F consists for x % of G material”的形式输出相似度；</p><p>-t N 　　　：表示只显示相似度大于Ｎ％的条目（除text 默认为２０％外，其余默认为１%）；</p><p>-o file 　　：表示将结果输出到file中；</p><p>最后可以输入文件名，支持通配符。</p><p>具体的使用细节，还是可以看文档：<a href="http://dickgrune.com/Programs/similarity_tester/sim.pdf" target="_blank" rel="noopener">sim.pdf</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Online Judge&amp;Virtual Judge 策划</title>
      <link href="/2017/01/15/online-judgevirtual-judge-e7-ad-96-e5-88-92/"/>
      <url>/2017/01/15/online-judgevirtual-judge-e7-ad-96-e5-88-92/</url>
      
        <content type="html"><![CDATA[<p>这个东西总是还想做，之前做的acmnote已经积攒了不少经验，发现了很多问题，有些甚至是要动整个结构的问题。。。于是觉得还是需要狠心切掉，重新做一个OJ，加上VJ，甚至考虑加上之前acmnote的功能，顺便学学计算机底层的一些东西。</p><p>&nbsp;</p><p>三大块概述：</p><p>&nbsp;</p><ul><li>OJ</li></ul><p>1.web部分：显然已经确定要用python以及django框架完成，关于前端，感觉vue很火的样子。。虽然很想用vue…但是感觉学的东西有点多，还是不要乱点技能树了，先用bootstrap搞搞吧，前端东西好多好乱啊= =<br>另外，需要学习一下restful的设计，转化成api访问。。。<br>2.judger部分：我觉得还是应该先实现judger，目前考虑用docker来监控运行情况<br>judger是核心部分，先考虑将这部分设计好，再看其他。</p><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><table class="modules" style="height: 444px;" width="950"><tbody><tr><th>module</th><th>description</th><th>status</th></tr><tr><td>sandbox</td><td>Runs the contestant's solution in a controlled and secure environment, limiting its execution time, memory consumption and system calls. We have a stable implementation (`box`) based on ptrace and a new one (`isolate`) based on Linux kernel containers.</td><td class="statedone">works</td></tr><tr><td>judges</td><td>A set of utilities for comparing the solution's output with the correct answer at a given level of strictness.</td><td class="statedone">works</td></tr><tr><td>evaluator(a.k.a. grader)</td><td>This module controls the whole process of grading the solution. It runs the compilers, the sandbox and the judges as described in configuration files.</td><td class="statedone">works</td></tr><tr><td>queue manager</td><td>Distributes grading between a cluster of computers, each of them running the evaluator.</td><td class="statepart">works, but needs revision</td></tr><tr><td>submitter</td><td>Handles submitting of solutions by contestants and passing them to the evaluation system. Contains a server daemon and a front-end for contestants. (If your contest uses a web-based contestant interface, you probably do not need this, although it can serve as a clean interface between your web services and the evaluator.)</td><td class="statepart">works, but needs revision</td></tr></tbody></table><ul><li>VJ</li><li>NOTE<br>2017年1月23日update:</li></ul><p>目前完成：</p><p>Judge：</p><ul><li>sandbox：经过多方考虑，主要是由于时间限制，sandbox采用ioi使用的isolate沙箱，日后若有时间再自己开发；</li><li>judgeserver：采用flask框架，构建restful api,基本构建完成，具体可以查看<a href="http://jingwei.site/judgeserver%e7%9a%84%e8%ae%be%e8%ae%a1%e5%92%8c%e5%bc%80%e5%8f%91/" target="_blank" rel="noopener">JudgeServer</a><br>Web：在慎重考虑之后，还是决定采用django作为整体的构建框架，前端样式采用bootstrap和bootswatch以提供可主题化的样式，暂时利用jquery作为前端辅助（视学习vue.js的情况决定是否替代），在web这里，我认为没有必要完全构建成restful api的模式，只需要针对性的对某些内容进行序列化即可，django自带的model，form，view的模式还是挺高效的。</li></ul><p>Web端分为这么几部分：</p><ul><li>queuemanager：控制不同电脑上的集成的judgeServer，提供队列管理作用，将提交分发到最合适的JudgeServer，以及从JudgeServer获取信息和判题结果；</li><li>submiter：处理用户提交的代码，加入提交queue中；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JudgeServer的设计和开发</title>
      <link href="/2017/01/15/judgeserver-e7-9a-84-e8-ae-be-e8-ae-a1-e5-92-8c-e5-bc-80-e5-8f-91/"/>
      <url>/2017/01/15/judgeserver-e7-9a-84-e8-ae-be-e8-ae-a1-e5-92-8c-e5-bc-80-e5-8f-91/</url>
      
        <content type="html"><![CDATA[<p>由现在的已有知识，可能要我完全设计一个判题沙箱是比较困难的，需要补充较多的操作系统的知识以及c底层的东西，感觉不太现实，时间成本太高，所以想由今年才了解的docker入手，以及加上python辅助来做JudgeServer。另外，为了方便后续添加多种语言，也需要考虑一种较为统一的格式来处理编译运行等操作。</p><p>那么，首先，</p><h3 id="docker是什么呢"><a href="#docker是什么呢" class="headerlink" title="docker是什么呢"></a>docker是什么呢</h3><p>Docker允许你很方便的在任何机器上部署web应用，并且不需要担心os和依赖库之类的东西，这是Docker设计的核心理念。</p><p>但是它远远不止这样，一个比较自然的想法就是，可以建立大量web应用甚至本地构建分布式集群环境，也可以在一个安全的环境下运行一些不值得信赖的代码。</p><p>不过需要注意的是，docker团队有提出，docker并不是绝对安全，可能存在绕过。</p><h3 id="我考虑的策略"><a href="#我考虑的策略" class="headerlink" title="我考虑的策略"></a>我考虑的策略</h3><p>在github上寻求一个开源的运行代码的沙箱（isolate），然后将构建judgeServer配合isolate，将整个环境部署到Docker中去，再用真实机器的nginx将judgeServer代理出来，这样可以保证，首先，沙箱会杜绝大部分不安全的代码，其次，如果沙箱出了自己的内核错误，也只会影响到Docker这个虚拟机器，真实机器将Docker重新构建即可，方便快捷。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>首先安装好必备环境，isolate等等。。。</p><p>利用Python的commands（python2的commands.getstatusoutput，在Python3中被subprocess.check_output取代）库，直接调用安装好的isolate命令行集成环境，用一个class Runner 处理好其中的细节，比如内存开到限制内存的三倍，再方便监控是否是RE或者MLE等等，然后，再写一个class Compiler根据自定义的compile 配置文件向Runner扔参数和编译命令，同时注意捕获编译错误方便后续处理，同时，也需要一个class judger用来运行代码，重定向代码和判断PE，WA，AC等等，最后，利用方便的flask框架，根据需求构建API。</p><h3 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h3><p>以下所有api请求都需要添加如下header，并且以json类型传输数据：</p><pre class="">headers= {"Authorization": 'Token ' + token,          "Content-Type": "application/json"}</pre><p>/ping/：用来测试JudgeServer的连接性以及查看JudgeServer的编译和运行参数；</p><p>/judge/：用来判题和返回判题结果</p><p>/sync/：用来同步单个或者所有题目用例</p><p>目前基本功能已经完成，但是代码整体上还是有很多可以优化的地方，所有代码都已经上传到<a href="https://github.com/joeyac/JudgeServer" target="_blank" rel="noopener">github</a></p><p>&nbsp;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-ICPC年度总结</title>
      <link href="/2016/12/12/acm-icpc-e5-b9-b4-e5-ba-a6-e6-80-bb-e7-bb-93/"/>
      <url>/2016/12/12/acm-icpc-e5-b9-b4-e5-ba-a6-e6-80-bb-e7-bb-93/</url>
      
        <content type="html"><![CDATA[<p><a href="http://news.ustb.edu.cn/xinwendaodu/2016-12-13/64704.html" target="_blank" rel="noopener">贝壳新闻网</a></p><p>一年的训练结束了</p><p>今年参加了ICPC区域赛沈阳站（smile，Martian，crazyX），北京站（Tom，Martian，crazyX）</p><p>以及上海China Final（smile，Tom，crazyX）</p><p>分别获得了铁牌，铜牌，铜牌</p><p>第一场沈阳站，第一次参加这样形式的大型比赛，难免有些紧张，全场题没过导致最终打铁。。。</p><p>第二场北京站，基本算正常发挥，自己不会的东西还是太多，铜牌算是基本符合自己实力的。。。</p><p>第三场上海，google出题，赛前一晚和Tom讨论了一下往年google出题的情况，感觉google喜欢搞一些trick，将一些简单的知识点，通过比较巧妙的方式体现出来，最终四题，其实是有很大希望五题的，在还有一个小时的时候，我们卡在了一道有精度问题的题上，其实通分之后用java大数直接就可以怼过去了，但是却把时间浪费在证明充分必要性上= =有点可惜，如果五题的话，是肯定银牌了= =</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 14.04搭建vjudge完全教程</title>
      <link href="/2016/08/31/ubuntu-14-04-e6-90-ad-e5-bb-bavjudge-e5-ae-8c-e5-85-a8-e6-95-99-e7-a8-8b/"/>
      <url>/2016/08/31/ubuntu-14-04-e6-90-ad-e5-bb-bavjudge-e5-ae-8c-e5-85-a8-e6-95-99-e7-a8-8b/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感觉去各大oj上刷题有点麻烦,搭建一个oj感觉没有那个需要,考虑到virtual judge的方便,准备搭建一个个人vjudge,网上的资料不多,泛滥的大量博文中,信息相当杂,精品相当少 大多数都是转载来转载去,内容相同还没有营养,搭建Vjudge方面的博文更是稀少,但是最后还是折腾出来了.</p></blockquote><h2 id="1-前期准备工作"><a href="#1-前期准备工作" class="headerlink" title="1. 前期准备工作"></a>1. 前期准备工作</h2><h3 id="1-1-一个Linux系统"><a href="#1-1-一个Linux系统" class="headerlink" title="1.1 一个Linux系统"></a>1.1 一个Linux系统</h3><p>因为现场赛的缘故，我一直使用的都是乌邦图。<br>这里我测试用的是ubuntu14.04 Desktop 64bit ,当然选择Server会更好一些.<br>系统的安装不再赘述，作为服务器请选用Server版本。</p><h3 id="1-2-更新源及其他"><a href="#1-2-更新源及其他" class="headerlink" title="1.2 更新源及其他"></a>1.2 更新源及其他</h3><p>在搭建环境之前，请确保你的源是有效的，速度是给力的，<br>建议选择一个国内的源14.04 LTS 更新源</p><pre class="lang:sh decode:true">sudo gedit /etc/apt/sources.list 将原来的源覆盖并保存最后执行 sudo apt-get update        sudo apt-get upgrade</pre><h3 id="1-3-必要文件准备"><a href="#1-3-必要文件准备" class="headerlink" title="1.3 必要文件准备"></a>1.3 必要文件准备</h3><p>我们需要下载这几个文件（部分链接需要翻墙才能访问）：</p><p><code>&lt;span class="lit"&gt;1&lt;/span&gt;&lt;span class="pun"&gt;．*.&lt;/span&gt;&lt;span class="pln"&gt;sql https&lt;/span&gt;&lt;span class="pun"&gt;:&lt;/span&gt;&lt;span class="com"&gt;//gist.github.com/trcnkq/a3cf7004759d41d79eb7&lt;/span&gt;</code></p><p><code>&lt;span class="lit"&gt;2&lt;/span&gt;&lt;span class="pun"&gt;．&lt;/span&gt;&lt;span class="pln"&gt;http_client&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;json https&lt;/span&gt;&lt;span class="pun"&gt;:&lt;/span&gt;&lt;span class="com"&gt;//gist.github.com/trcnkq/7a5deff639ff99475138&lt;/span&gt;</code></p><p><code>&lt;span class="lit"&gt;3&lt;/span&gt;&lt;span class="pun"&gt;．&lt;/span&gt;&lt;span class="pln"&gt;remote_accounts&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;json https&lt;/span&gt;&lt;span class="pun"&gt;:&lt;/span&gt;&lt;span class="com"&gt;//gist.github.com/trcnkq/e9dac7eea72d2b781949&lt;/span&gt;</code></p><p><code>&lt;span class="lit"&gt;4&lt;/span&gt;&lt;span class="pun"&gt;．&lt;/span&gt;&lt;span class="kwd"&gt;virtual&lt;/span&gt;&lt;span class="pln"&gt; judge&lt;/span&gt;&lt;span class="pun"&gt;源文件&lt;/span&gt;&lt;span class="pln"&gt; https&lt;/span&gt;&lt;span class="pun"&gt;:&lt;/span&gt;&lt;span class="com"&gt;//github.com/trcnkq/virtual-judge&lt;/span&gt;</code></p><p>如果无法翻墙或者链接失效，请用我的百度云链接： <a href="http://pan.baidu.com/s/1skxS5dj" target="_blank" rel="noopener">Vjudge搭建</a> (这里面包含了之后会用到的一系列文件,嫌麻烦可以都下载下来)</p><h3 id="1-4-先决环境搭建（针对新手）"><a href="#1-4-先决环境搭建（针对新手）" class="headerlink" title="1.4 先决环境搭建（针对新手）"></a>1.4 先决环境搭建（针对新手）</h3><pre class="lang:sh decode:true">sudo apt-get install gccsudo apt-get install cppsudo apt-get install make//以上是为了能正常makesudo apt-get install vsftpd  //安装ftp方便本地上传某些脚本，配置方法百度一下一大把sudo apt-get install git     //git clone 大家都懂sudo apt-get install vim   //编辑器</pre><h2 id="2-必要环境搭建"><a href="#2-必要环境搭建" class="headerlink" title="2. 必要环境搭建"></a>2. 必要环境搭建</h2><h3 id="2-1-Mysql的安装"><a href="#2-1-Mysql的安装" class="headerlink" title="2.1 Mysql的安装"></a>2.1 Mysql的安装</h3><pre class="lang:sh decode:true">    sudo apt-get install mysql-server -y    安装过程中会要求你输入数据库的密码，这里我直接用的123456，连续输入两次即可。    进入数据库测试一下    mysql -u root -p</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/12.png" alt="此处输入图片的描述"></p><pre class="lang:sh decode:true">    mysql -u root -p      create database vhoj;      exit;</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/19.png" alt="此处输入图片的描述"></p><h3 id="2-1-0-额外配置"><a href="#2-1-0-额外配置" class="headerlink" title="2.1.0 额外配置"></a>2.1.0 额外配置</h3><pre class="lang:sh decode:true">//以下内容根据需要安装（crontab定时备份数据库并发送到邮箱）：//mysqldump应该在安装mysql的时候一并安装了，请查看/usr/bin/mysqldumpsudo mkdir /home/backup  //存放备份文件//邮件发送配置sudo apt-get -y install msmtpsudo apt-get install mutt//建立配置文件具体配置请查看我的另外一篇文章   [链接](http://jingwei.site/msmtp-mutt/)</pre><pre class="lang:sh decode:true">touch mysql_databak.sh    //创建备份文件sudo vim mysql_databak.sh  //脚本内容</pre><pre class="lang:sh decode:true">#!/bin/shDUMP=/usr/bin/mysqldumpOUT_DIR=/home/backupLINUX_USER=rootDB_NAME=vhojDB_USER=rootDB_PASS=123456DAYS=7cd $OUT_DIRDATE=`date +%Y%m%d%H%M`OUT_SQL=$DATE.sqlTAR_SQL="mysqldata_bak_$DATE.tar.gz"$DUMP -u$DB_USER -p$DB_PASS $DB_NAME --default-character-set=gbk --opt -Q -R --skip-lock-tables&gt;$OUT_SQLtar -czf $TAR_SQL ./$OUT_SQLrm $OUT_SQLchown $LINUX_USER:$LINUX_USER $OUT_DIR/$TAR_SQLfind $OUT_DIR -name "mysqldata_bak*" -type f -mtime +$DAYS -exec rm {} ; /usr/bin/mutt -s "Backup file for database." 123456789@qq.com -a $OUT_DIR/$TAR_SQL &lt;$OUT_DIR/mysql_datamail.txt代码解释： #!/bin/shDUMP=/usr/bin/mysqldump #mysqldump备份程序执行路径OUT_DIR=/home/mysql_data #备份文件存放路径LINUX_USER=root #系统用户名DB_NAME=jqg2 #要备份的数据库名字DB_USER=root #数据库账号 注意：非root用户要使用备份参数 --skip-lock-tables，否则可能会报错DB_PASS=123456 #数据库密码DAYS=7 #DAYS=7代表要删除7天前的备份，即只保留最近7天的备份cd $OUT_DIR #进入备份存放的目录DATE=`date +%Y%m%d%H%M` #获取当前系统的时间，注意：date写法OUT_SQL=$DATE.sql #备份数据库的文件名TAR_SQL="mysqldata_bak_$DATE.tar.gz" #最终保存的数据库备份文件名$DUMP -u$DB_USER -p$DB_PASS $DB_NAME --default-character-set=gbk --opt -Q -R --skip-lock-tables&gt;$OUT_SQL #执行备份命令tar -czf $TAR_SQL ./$OUT_SQL #压缩为备份数据库文件为.tar.gz格式rm $OUT_SQL #删除.sql格式的备份文件chown $LINUX_USER:$LINUX_USER $OUT_DIR/$TAR_SQL #更改备份数据库文件的所有者find $OUT_DIR -name "mysqldata_bak*" -type f -mtime +$DAYS -exec rm {} ; #删除7天前的备份文件，注意：{} ;中间有空格:wq 保存退出 /usr/bin/mutt -s "Backup file for database." 123456789@qq.com -a $OUT_DIR/$TAR_SQL &lt;$OUT_DIR/mysql_datamail.txt   用mutt发送到你自己的邮箱</pre><pre class="lang:sh decode:true">//修改文件属性，使其可执行 sudo chmod +x /home/mysql_data/mysql_databak.sh 安装crontab并配置脚本自动执行：[链接](http://jingwei.site/%e5%9c%a8ubuntu-14-04%e4%bd%bf%e7%94%a8cron%e5%ae%9e%e7%8e%b0%e4%bd%9c%e4%b8%9a%e8%87%aa%e5%8a%a8%e5%8c%96/)</pre><h3 id="2-2-Redis的安装和配置"><a href="#2-2-Redis的安装和配置" class="headerlink" title="2.2 Redis的安装和配置"></a>2.2 Redis的安装和配置</h3><pre class="lang:sh decode:true">    1.)    下载安装Redis:    wget http://download.redis.io/releases/redis-2.8.9.tar.gz      tar xvzf redis-2.8.9.tar.gz      cd redis-2.8.9/      make    //建议make test，在make test之前sudo    sudo make install      2.)    配置init脚本：    wget https://github.com/ijonas/dotfiles/raw/master/etc/init.d/redis-server    wget https://github.com/ijonas/dotfiles/raw/master/etc/redis.conf    sudo mv redis-server /etc/init.d/redis-server    sudo chmod +x /etc/init.d/redis-server    sudo mv redis.conf /etc/redis.conf     3.)    初始化用户和日志路径    第一次启动Redis前，建议为Redis单独建立一个用户，并新建data和日志文件夹    sudo useradd redis    sudo mkdir -p /var/lib/redis    sudo mkdir -p /var/log/redis    sudo chown redis.redis /var/lib/redis    sudo chown redis.redis /var/log/redis    4.) 设置开机自动启动，关机自动关闭    update-rc.d redis-server defaults    5.) 启动Redis：    /etc/init.d/redis-server start</pre><h3 id="2-3-Maven3的安装和配置"><a href="#2-3-Maven3的安装和配置" class="headerlink" title="2.3 Maven3的安装和配置"></a>2.3 Maven3的安装和配置</h3><pre class="lang:sh decode:true">    1.)    通过apt-get安装Maven3    ubuntu12.04之后，可直接用apt-get来获得    sudo apt-get install maven -y</pre><p>安装完后，sudo su 进入root<br>用 mvn –v 查看一下Maven的版本，如下图：<br>因为Maven3安装的同时把openjdk也一并安装了。</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/3.png" alt="此处输入图片的描述"></p><h3 id="2-3-1-JDK的安装和配置"><a href="#2-3-1-JDK的安装和配置" class="headerlink" title="2.3.1 JDK的安装和配置"></a>2.3.1 JDK的安装和配置</h3><p>首先需要下载JDK，地址：<a href="https://jdk7.java.net/download.html" target="_blank" rel="noopener">https://jdk7.java.net/download.html</a> (之前的云盘链接内有64位的,请认准这个jdk版本)<br>注意系统是32位还是64位</p><p><code>&lt;span class="lit"&gt;1.&lt;/span&gt;&lt;span class="pun"&gt;)&lt;/span&gt; &lt;span class="pun"&gt;解压下载的文件&lt;/span&gt;</code></p><pre class="lang:sh decode:true">tar -xzvf jdk1.7.0_80</pre><p>2.) 移动文件夹到指定目录下</p><pre class="lang:sh decode:true">sudo mkdir /usr/lib/jvmsudo mv jdk1.7.0_80/ /usr/lib/jvm/</pre><p>3.) 设置环境变量</p><pre class="lang:sh decode:true">sudo vi /etc/profile//在本篇文章中,建议用vi或者vim编辑文档,用gedit会报错(虽然好像没什么影响...)</pre><p>在文件最后加入如下内容：</p><pre class="lang:sh decode:true">export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_80export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/libexport PATH=${JAVA_HOME}/bin:$PATH</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/1.png" alt=""></p><p>4.) 使修改生效：</p><pre class="lang:sh decode:true">sudo source /etc/profile//如果提示source command not found//请执行以下两步://sudo -s//source /etc/profile</pre><p>这时候在终端输入 java –version 查看当前 JDK 版本<br>至此，JDK 配置完成</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/2.png" alt=""></p><pre class="lang:sh decode:true">    2.)  修改系统默认的jdk    update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_80/bin/java 300    update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.7.0_80/bin/javac 300    update-alternatives --config java     //请选择jdk1.7.0_80版本的jdk    update-alternatives --config javac</pre><p>使用java -version或者mvn -v再次查看,JDK版本已更改</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/4.png" alt="此处输入图片的描述"></p><h3 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h3><h3 id="2-4-Tomcat7的安装和配置"><a href="#2-4-Tomcat7的安装和配置" class="headerlink" title="2.4 Tomcat7的安装和配置"></a>2.4 Tomcat7的安装和配置</h3><pre class="lang:sh decode:true">    1.)    apt-get安装tomcat7：    sudo apt-get install tomcat7 -y      tomcat7默认会被安装在目录/var/lib/tomcat7/下,    安装完之后在浏览器下输入localhost:8080查看是否安装成功    如果出现下图，即为安装成功</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/5.png" alt=""></p><pre class="lang:sh decode:true">    2.)    安装tomcat7-admin    安装成后，我们还需要安装一个tomcat7-admin    sudo apt-get install tomcat7-admin</pre><pre class="lang:sh decode:true">    3.)    修改账户：    安装完毕之后，我们进入tomcat7的conf目录下修改tomcat-users.xml文件    cd /var/lib/tomcat7/conf/    vim tomcat-users.xml     我这里用的是    &lt;role rolename="manager-gui"/&gt;    &lt;role rolename="admin-gui"/&gt;    &lt;user username="tomcat" password="tomcat" roles="manager-gui,admin-gui"/&gt;</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/6.png" alt="此处输入图片的描述"></p><pre class="lang:sh decode:true">    4.)    重启tomcat:    sudo /etc/init.d/tomcat7 restart</pre><p>重新在浏览器打开tomcat界面<br>点击manager webapp，用刚才我们建立的用户登陆</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/8.png" alt="此处输入图片的描述"></p><p><code>&lt;span class="lit"&gt;5.&lt;/span&gt;&lt;span class="pun"&gt;)&lt;/span&gt; &lt;span class="pun"&gt;修改&lt;/span&gt;&lt;span class="pln"&gt;JDK&lt;/span&gt;&lt;span class="pun"&gt;默认的&lt;/span&gt;&lt;span class="pln"&gt;JDK&lt;/span&gt;&lt;span class="pun"&gt;版本&lt;/span&gt;</code></p><ol><li><code>&lt;span class="pun"&gt;检查&lt;/span&gt;&lt;span class="pln"&gt; tomcat7 &lt;/span&gt;&lt;span class="pun"&gt;的&lt;/span&gt; &lt;span class="typ"&gt;Server&lt;/span&gt; &lt;span class="typ"&gt;Information&lt;/span&gt;&lt;span class="pun"&gt;，版本可能不是我们自己的&lt;/span&gt;&lt;span class="pln"&gt;jdk&lt;/span&gt;&lt;span class="pun"&gt;版本。&lt;/span&gt;</code></li><li><code>&lt;span class="pun"&gt;这里我们要修改&lt;/span&gt;&lt;span class="pln"&gt;tomcat&lt;/span&gt;&lt;span class="pun"&gt;使用的&lt;/span&gt;&lt;span class="pln"&gt;JDK&lt;/span&gt;&lt;span class="pun"&gt;版本，这步很重要，否则会出现很多问题&lt;/span&gt;</code><br><img src="http://7xi3e9.com1.z0.glb.clouddn.com/9.png" alt="此处输入图片的描述"><pre class="lang:sh decode:true">    sudo gedit /etc/default/tomcat7加入如下内容：JAVA_HOME=/usr/lib/jvm/jdk1.7.0_80再次重启tomcat7：sudo /etc/init.d/tomcat7 restart</pre><img src="http://7xi3e9.com1.z0.glb.clouddn.com/11.png" alt="此处输入图片的描述"></li></ol><p>OK， tomcat7的JDK版本修改完毕。</p><p>&nbsp;</p><p>至此，搭建 Virtual Judge 所需的所有环境，都已搭建完毕！</p><h2 id="3-工程代码实施"><a href="#3-工程代码实施" class="headerlink" title="3. 工程代码实施"></a>3. 工程代码实施</h2><p>准备好四个文件，就是一开始下载的那四个：<br><img src="http://7xi3e9.com1.z0.glb.clouddn.com/14.png" alt="此处输入图片的描述"></p><div class="md-section-divider"></div><h3 id="3-1-Vjudge的打包"><a href="#3-1-Vjudge的打包" class="headerlink" title="3.1 Vjudge的打包"></a>3.1 Vjudge的打包</h3><pre class="lang:sh decode:true ">进入virtual-judge-master 目录：cd virtual-judge-master/用 Maven 将 Virtual Judge 打包:mvn clean package</pre><p>里面会有一个vjudge.war文件，就是我们打包完成的 Virtual Judge。<br>把这个war文件拷到tomcat7的webapps目录下。</p><p>打包的过程可能会相当长，特别是网络不好的情况下，万一掉包了，非常蛋疼，如果你不想等待太久，可以直接下载此文件，在文章开头的百度云网盘链接里.</p><p>放到webapps目录后，会自动生成一个vjudge文件夹，如果没有生成，你也可以自行解压。</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/16.png" alt="此处输入图片的描述"></p><h3 id="3-2-remote-accounts-json文件的编辑"><a href="#3-2-remote-accounts-json文件的编辑" class="headerlink" title="3.2 remote_accounts.json文件的编辑"></a>3.2 remote_accounts.json文件的编辑</h3><p>把各个OJ的提交账号添加到remote_accounts.json里。</p><h3 id="3-3-config-properties文件的编辑"><a href="#3-3-config-properties文件的编辑" class="headerlink" title="3.3 config.properties文件的编辑"></a>3.3 config.properties文件的编辑</h3><p>如不需要代理或VPN访问国外OJ，保留http_client.json里面的[“direct”]即可。</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/17.png" alt="此处输入图片的描述"></p><div class="md-section-divider"></div><h3 id="3-4-vjudge的简单部署"><a href="#3-4-vjudge的简单部署" class="headerlink" title="3.4 vjudge的简单部署"></a>3.4 vjudge的简单部署</h3><p>把 remote_accounts.json 和 http_client.json 两个文件放在指定的文件夹下<br>这里我放在 /var/lib/tomcat7/webapps/vjudge/ 目录下</p><pre class="lang:sh decode:true">    sudo mv http_client.json /var/lib/tomcat7/webapps/vjudge/    sudo mv remote_accounts.json /var/lib/tomcat7/webapps/vjudge/</pre><p>更改/webapps/vjudge/WEB-INF/classes/的目录下config.properties文件<br>将remote_accounts.json和http_client.json的绝对路径改为正确的路径</p><pre class="lang:sh decode:true">    cd /var/lib/tomcat7/webapps/vjudge/WEB-INF/classes/    sudo vim config.properties</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/18.png" alt="此处输入图片的描述"></p><p>PS:如果你的数据库密码不是123456，那么上面的root密码你也需要修改，默认为123456</p><h3 id="3-5-vhoj数据库的导入"><a href="#3-5-vhoj数据库的导入" class="headerlink" title="3.5 vhoj数据库的导入"></a>3.5 vhoj数据库的导入</h3><p>表vhoj_20141109.sql导入(可能我的版本略微旧了点)。</p><pre class="lang:sh decode:true">mysql -h localhost -u root -p vhoj &lt; vhoj_20141109.sql</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/20.png" alt="此处输入图片的描述"></p><pre class="lang:sh decode:true">sudo /etc/init.d/tomcat7 restart</pre><pre><code>    最后，重启tomcat7，进入manager    查看Application，可以看到vjudge已经处于running状态了。</code></pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/21.png" alt="此处输入图片的描述"></p><h2 id="4-大功告成的Vjudge"><a href="#4-大功告成的Vjudge" class="headerlink" title="4. 大功告成的Vjudge"></a>4. 大功告成的Vjudge</h2><p>在地址栏输入localhost:8080/vjudge，进入搭建成功的vjudge:</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/22.png" alt="此处输入图片的描述"></p><p><strong>到此为止，Virtual Judge 终于搭建成功，just enjoy it！</strong></p><p>参考文献:<a href="https://www.zybuluo.com/BIGBALLON/note/76405" target="_blank" rel="noopener">Virtual Judge 环境搭建与配置</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Find the Duplicate Number</title>
      <link href="/2016/08/31/find-the-duplicate-number/"/>
      <url>/2016/08/31/find-the-duplicate-number/</url>
      
        <content type="html"><![CDATA[<p>最近偶然发现了一个oj（<a href="https://leetcode.com/" target="_blank" rel="noopener">Leetcode</a>）(^o^)/上面的题目很有意思，各种脑洞hhhh刷上瘾了，一些比较好的题目决定做记录在博客中～</p><blockquote><p><a href="https://leetcode.com/problems/find-the-duplicate-number/" target="_blank" rel="noopener">287. Find the Duplicate Number</a></p><p>Given an array <em>nums</em> containing <em>n</em> + 1 integers where each integer is between 1 and <em>n</em> (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.</p><p><strong>Note:</strong></p><ol><li>You <strong>must not</strong> modify the array (assume the array is read only).</li><li>You must use only constant, <em>O</em>(1) extra space.</li><li>Your runtime complexity should be less than <code>O(n&lt;sup&gt;2&lt;/sup&gt;)</code>.</li><li>There is only one duplicate number in the array, but it could be repeated more than once.<br>首先是要证明至少有一个数会重复，这个由鸽巢原理很容易得出。其次题目保证只有一个数字会重复，但是可能会重复多次。</li></ol></blockquote><p>给出的四个限制把常规的四种解法都禁掉了，苦思一下午都没想出什么好解法，然后在讨论版发现了三种解法（时间复杂度分别为O(32*n),O(nlogn),O(n)），一种比一种 =  =╮(╯▽╰)╭下面来观摩一下：</p><p>solution 1：</p><p>由于传入的是一个vector&lt;int&gt;，也就是说2进制表示每个数都不超过32位，我们来对二进制下的每一位来处理，例如现在来处理第p位，计算输入的动态数组中每个数中第p位的和（存储到变量b）以及数组[1, 2, 3, …, n]中每个数第p位的和（存储到变量a），如果b比a大，那就说明那个重复的数在第p位上为1，否则b不可能比a大。通过这种方式得出重复数值的每一位。</p><p>code(时间复杂度O(32*n))：</p><pre class="lang:c++ decode:true">    int findDuplicate1(vector&lt;int&gt;&amp; nums) {   //O(32*N)        int n = nums.size()-1, res = 0;        for (int p = 0; p &lt; 32; ++ p) {            int bit = (1 &lt;&lt; p), a = 0, b = 0;            for (int i = 0; i &lt;= n; ++ i) {                if (i &gt; 0 &amp;&amp; (i &amp; bit) &gt; 0) ++a;//为了便于理解，加上了i&gt;0的判断                                                        //但其实有点多余，因为当i=0时i&amp;bit=0                if ((nums[i] &amp; bit) &gt; 0) ++b;            }            if (b &gt; a) res += bit;        }        return res;    }</pre><p>solution 2:</p><p>基于二分搜索以及鸽巢原理（抽屉原理）的方法。</p><p>一开始我们搜索的范围为1到n之间的数字，每次选择搜索范围中间的那个数mid，并且计算输入数组中，所有不大于mid的数的个数（记为count）。然后，如果count比mid大，那么我们就可以将搜索范围缩小到[1，mid]而不是 [mid+1，n]，由鸽巢原理（<a href="https://en.wikipedia.org/wiki/Pigeonhole_principle" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Pigeonhole_principle</a>），很容易可以得出，[1,mid]中一定存在某个数至少出现了两次，然后题目保证只有一个且必定有一个数重复，于是可以不断进行二分搜索得出答案，复杂度为O（nlogn）。n显然不大于2的32次方(4294967296)，然而很有趣的是log4294967296仅仅为9.633，也就是说这个算法的复杂度要比前者高那么一些。</p><p>Code(时间复杂度O(nlogn))：</p><pre class="lang:c++ decode:true ">    int findDuplicate2(vector&lt;int&gt;&amp; nums) {  //O(nlogn)        int len=nums.size();        int left=0,right=len-1,mid;        int count;        while(left&lt;right){            mid=(left+right)/2;            count=0;            for(int i=0;i&lt;len;i++){                if(nums[i]&lt;=mid)count++;            }            if(count&gt;mid)right=mid;            else left=mid+1;        }        return left;    }</pre><p>solution 3：</p><p>最后一个，重头戏来了～</p><p>首先附上原作者的解答链接以及表达我不能用语言来形容的敬佩：<a href="http://keithschwarz.com/interesting/code/find-duplicate/FindDuplicate.python.html" target="_blank" rel="noopener">http://keithschwarz.com/interesting/code/find-duplicate/FindDuplicate.python.html</a></p><p>&nbsp;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TRAVEL!TRAVEL!</title>
      <link href="/2016/08/18/e6-90-ad-e5-bb-ba-e8-87-aa-e5-b7-b1-e7-9a-84-e6-97-85-e6-b8-b8-e5-8d-9a-e5-ae-a2/"/>
      <url>/2016/08/18/e6-90-ad-e5-bb-ba-e8-87-aa-e5-b7-b1-e7-9a-84-e6-97-85-e6-b8-b8-e5-8d-9a-e5-ae-a2/</url>
      
        <content type="html"><![CDATA[<p>(⊙o⊙)…</p><p>校队第一阶段即将结束，迎来8天的小长假，准备出去旅游～</p><p>想要采取完全不同的旅游方式，一开始考虑随机生成下一站目的地，后来发现完全不可行啊！这要是一下东北一下南部不说车费，时间上也来不及=  =</p><p>那么，决定先挑选几个城市，然后城市之间两两连边，以距离或者车票价格作为权值，建立一张图。</p><p>目标：从起点出发，经过所有的城市并且不走重复路线最后回到起点。</p><p>那么，这就是个<a href="https://zh.wikipedia.org/wiki/%E6%97%85%E8%A1%8C%E6%8E%A8%E9%94%80%E5%91%98%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">旅行商问题</a>。</p><p>顺便还搭建了一个开源GPS定位系统，方便统计自己的路线。</p><p>如图。</p><p><img src="/images/2016-08-18-21-36-17%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2016-08-18 21-36-17屏幕截图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>加入BOINC（伯克利开放式网络计算平台）</title>
      <link href="/2016/08/14/e5-8a-a0-e5-85-a5boinc-ef-bc-88-e4-bc-af-e5-85-8b-e5-88-a9-e5-bc-80-e6-94-be-e5-bc-8f-e7-bd-91-e7-bb-9c-e8-ae-a1-e7-ae-97-e5-b9-b3-e5-8f-b0-ef-bc-89/"/>
      <url>/2016/08/14/e5-8a-a0-e5-85-a5boinc-ef-bc-88-e4-bc-af-e5-85-8b-e5-88-a9-e5-bc-80-e6-94-be-e5-bc-8f-e7-bd-91-e7-bb-9c-e8-ae-a1-e7-ae-97-e5-b9-b3-e5-8f-b0-ef-bc-89/</url>
      
        <content type="html"><![CDATA[<h1 id="BOINC：为科学而计算"><a href="#BOINC：为科学而计算" class="headerlink" title="BOINC：为科学而计算"></a>BOINC：为科学而计算</h1><p>通过 BOINC 你可以将闲置的计算机时间贡献给 SETI@home, Climateprediction.net, Rosetta@home, World Community Grid 等科学研究项目。 在计算机上安装好 BOINC 之后，你可以加入各式各样你喜欢的项目。</p><p>通过贡献自己闲置的计算机或者服务器为科学而计算！</p><p>有兴趣的请查看中国官网～！<a href="http://www.equn.com/wiki/%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">http://www.equn.com/wiki/%E9%A6%96%E9%A1%B5</a></p><p>提醒一下如果是ubuntu需要安装BOINC的话可以直接</p><pre class="lang:sh decode:true ">sudo apt install boinc</pre><p>目前挑选了以下项目贡献自己的力量：</p><ul><li><a href="http://www.equn.com/wiki/PrimeGrid" target="_blank" rel="noopener">PrimeGrid</a>  （寻找质数，其下还有很多相关的子项目）</li><li><a href="http://www.equn.com/wiki/NFS@Home" target="_blank" rel="noopener">NFS</a> （是一个运用网络连接计算机来进行大型整数数域筛选分解格筛步骤的一个研究项目）</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-web django ACM解题记录本设计</title>
      <link href="/2016/07/24/python-web-django-acm-e8-a7-a3-e9-a2-98-e8-ae-b0-e5-bd-95-e6-9c-ac-e8-ae-be-e8-ae-a1/"/>
      <url>/2016/07/24/python-web-django-acm-e8-a7-a3-e9-a2-98-e8-ae-b0-e5-bd-95-e6-9c-ac-e8-ae-be-e8-ae-a1/</url>
      
        <content type="html"><![CDATA[<p>想要练习一下Python以及它的django框架，同时为自己的ACM训练提供一点便利。</p><p>首先需要导入三个主要OJ（POJ，HDOJ，codeforces）的题目，这些信息之前YZL的脚本可以拉取；</p><p>对于每个题目，定义一个记录（类似评论），每个用户可以为每个题目添加记录，记录是含有{Note，Tag}的一个模型，每个人对每个题目添加自己的理解，笔记和标签，同时可以方便统计各大oj大家做过的题目。</p><p>管理员可以添加比赛，比赛中的题目可以从现有题目列表里添加，也可以额外添加，额外添加的题目自动添加到题目列表中。<br>1.在某一场比赛内，生成每个人对应的总结（参考<strong>LETTers 2016 Regional Training Report</strong> Version 1.0），以及对应每个人和每个题的记录链接。<br>2.类比problem给contest增加记录{Note,Tag},contest中还需要有公告，以便提示Note所需要填写的内容</p><p>管理员对于每个题目可以添加一个官方性质的Tag，这个Tag在每个题目中默认隐藏显示。此Tag与Problem为多对多关系</p><p>其余对应关系：多个record对应一个Problem和一个user，多个Problem对应一个contest，每个总结对应一个user，多个总结对应一个contest。</p><p>&nbsp;</p><p>后期：   1.通过简单脚本拉取各个oj的题目列表；（是否需要？）</p><p>2.通过UserProfile里的各个oj的ID去拉取AC的题目，添加已做过题目标记。</p><p>首先建立一个site项目，其中应该含有account,problem,contest(Summary),record,utils应用；</p><p>account：正常用户登录，注册，验证app，其中model应有User以及Userprofile两项；</p><p>User：{username,real_name,email,create_time,admin_type,<span style="color: #ff0000;">problems_status</span>,</p><p>reset_password_token,reset_password_token_create_time,</p><p>auth_token,two_factor_auth,tfa_token,openapi_appkey,is_forbidden,}</p><p>UserProfile：{user,avatar,blog,hduoj_username,poj_username,</p><p>codeforces_username,<span style="color: #ff0000;">problems_status</span>,phone_number,school,student_id,}</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建自己的私人git服务器</title>
      <link href="/2016/06/02/e5-88-9b-e5-bb-ba-e8-87-aa-e5-b7-b1-e7-9a-84-e7-a7-81-e4-ba-bagit-e6-9c-8d-e5-8a-a1-e5-99-a8/"/>
      <url>/2016/06/02/e5-88-9b-e5-bb-ba-e8-87-aa-e5-b7-b1-e7-9a-84-e7-a7-81-e4-ba-bagit-e6-9c-8d-e5-8a-a1-e5-99-a8/</url>
      
        <content type="html"><![CDATA[<p>由于来回在windows还有linux下的双系统编程，源代码记录比较麻烦，一些，嗯，比较奇怪的代码又不想放在github上给别人看，遂自己研究了一波搭建简单的git服务器。方便代码在不同系统甚至不同电脑上转移和修改并且版本控制还是佷赞的。</p><p>&nbsp;</p><p>第一步，首先git应该是服务器必备的，如果没有安装，采用下面的命令：（ubuntu系统</p><pre class="lang:sh decode:true ">apt-get install git</pre><p>第二步，建议不要使用root账户来运行git服务，新建一个名为git的用户用来运行git服务：</p><pre class="lang:c++ decode:true">sudo adduser git</pre><p>第三步，创建证书登录：</p><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p><p>其中.ssh/及文件夹及authorized_keys建议用git用户创建。</p><p>在root用户下，可用下面命令创建：</p><pre class="lang:sh decode:true ">mkdir /home/git/.sshchmod 700 /home/git/.sshtouch /home/git/.ssh/authorized_keyschmod 600 /home/git/.ssh/authorized_keyschown git /home/git/.ssh/chown git /home/git/.ssh/authorized_keys</pre><p>可如下导入公钥：</p><pre class="lang:sh decode:true ">cat &gt;&gt;.ssh/authorized_keys &lt;&lt;\EOFpaste-key-as-one-lineEOFexit</pre><p>另外，另外etc/ssh/sshd_config里面要修改几个参数</p><p>StrictModes no</p><p>RSAAuthentication yes</p><p>PubkeyAuthentication yes</p><p>AuthorizedKeysFile .ssh/authorized_keys</p><p>（均需要去掉前面的#，使其生效）</p><p>第四步，初始化Git仓库：</p><p>先选定一个目录作为Git仓库，假定是<code>/home/git/sample.git</code>，在<code>/home/git/</code>目录下输入命令：</p><pre class="lang:sh decode:true ">sudo git init --bare sample.git</pre><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code>：</p><pre class="lang:sh decode:true ">sudo chown -R git:git sample.git</pre><p>第五步，禁用shell登录：</p><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑<code>/etc/passwd</code>文件完成。找到类似下面的一行：</p><pre class="lang:sh decode:true ">git:x:1001:1001:,,,:/home/git:/bin/bash</pre><p>改为：</p><pre class="lang:sh decode:true ">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</pre><p>这样，<code>git</code>用户可以正常通过ssh使用git，但无法登录shell，因为我们为<code>git</code>用户指定的<code>git-shell</code>每次一登录就自动退出。</p><p>第六步，克隆远程仓库：</p><p>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：</p><pre class="lang:c++ decode:true "> git clone git@server:/home/git/sample.git</pre><p>由于只是自己用，把自己的每个系统的公钥收集起来放到服务器的<code>/home/git/.ssh/authorized_keys</code>文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。</p><p>&nbsp;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Running Bash On Ubuntu On Windows</title>
      <link href="/2016/05/17/running-bash-on-ubuntu-on-windows/"/>
      <url>/2016/05/17/running-bash-on-ubuntu-on-windows/</url>
      
        <content type="html"><![CDATA[<p>Windows在不久的将来会能支持在Windows下使用Ubuntu的bash，简而言之，将Ubuntu作为一个应用程序，期待ing…</p><p>&nbsp;<iframe src="https://channel9.msdn.com/Events/Build/2016/P488/player#ccLang=zh-cn&amp;autoplay" width="560" height="315" allowfullscreen="" frameborder="0"></iframe></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决wordpress xmlrpc.php利用漏洞及被攻击问题</title>
      <link href="/2016/05/04/e8-a7-a3-e5-86-b3wordpress-xmlrpc-php-e5-88-a9-e7-94-a8-e6-bc-8f-e6-b4-9e-e5-8f-8a-e8-a2-ab-e6-94-bb-e5-87-bb-e9-97-ae-e9-a2-98/"/>
      <url>/2016/05/04/e8-a7-a3-e5-86-b3wordpress-xmlrpc-php-e5-88-a9-e7-94-a8-e6-bc-8f-e6-b4-9e-e5-8f-8a-e8-a2-ab-e6-94-bb-e5-87-bb-e9-97-ae-e9-a2-98/</url>
      
        <content type="html"><![CDATA[<p>2016.05.03下午15.40左右，自己的wordpress博客突然登陆不上了，显示502 bad gateway错误（或者504 gateway timeout错误），很奇怪，遂ssh连上服务器，明显感觉到连接速度缓慢，由于这两天校园网正在升级，本以为是校园网的原因，遂又接入了自己多台他国服务器去尝试连接博客所在服务器，全部报错。</p><p>于是开始debug模式：</p><p>由于502或者504错误的原因可能有很多，只能一个个排除。</p><p>1.首先我的wordpress是建立在nginx+php5+mariadb基础上的，首先看是否nginx出现了故障，添加了一个conf配置文件，端口设为800，根目录下放置了一个“hello test”的index.html文件，通过jingwei.site:800可以正常访问，排除nginx的问题；</p><p>2.这时候突然发现空间有new mail，需要接收但是没有安装mailutils，apt安装时竟然提示内存不够，<br>free -m看一下内存768MB已使用720MB+，就算算上cached的占用，也是很不科学的。<br>于是继续排查，top命令查看内存具体使用情况，出现了大量php5-fpm且占用大量内存的进程，这个时候我还以为是php5又出现了什么bug（php5貌似确实很容易抽风），索性将nginx+php5+mariadb三个服务一次性重启，关闭时内存使用恢复到了正常情况，开启之后测试访问博客主页，大概几分钟才刷出来了主页，这时候再刷新博客又挂掉了。再次查看内存使用情况，又恢复到了原来的状态。</p><p>3.到这里的时候我就很是怀疑，哦不，应该说基本确定有人在攻击我的博客了，查看nginx的日志文件（位于/var/log/nginx/），cat error.log然后疯狂刷屏，对于我这样的个人博客，这样的访问简直太搞笑了，应该还是写了个脚本，强制终止cat输出，查看信息，不过基本就是这种形式：</p><pre class="lang:sh decode:true">2016/05/03 05:02:16 [error] 1634#0: *566225 connect() to unix:///home/wordpress/phpfpm.sock failed (11: Resource temporarily unavailable) while connecting to upstream, client: 185.103.252.3, server: jingwei.site, request: "POST /xmlrpc.php HTTP/1.0", upstream: "fastcgi://unix:///home/wordpress/phpfpm.sock:", host: "45.32.249.139"</pre><p>这个时候我注意到了“client: 185.103.252.3”，大致看了一下，基本请求都来自这么四个ip：</p><p>185.103.252.170俄罗斯<br>185.103.252.3俄罗斯<br>185.130.4.197多米尼加<br>185.130.4.120多米尼加</p><p>好嘛，就是有人在打我博客，而且应该就是一个人，只不过挂了多个vps或者挂了代理之类的，让我一直很迷惑的时，无冤无仇打我这么一个小型vps是要干啥？</p><p>//05.03结束，由于有课程和训练，只完成了这么多</p><p>//下面是05.04日的排查</p><p>第二天五四青年节，下午半天假，回来继续排查，再次调出log文件，发现了一个关键的地方：</p><pre class="lang:sh decode:true">server: jingwei.site, request: "POST /xmlrpc.php HTTP/1.0",</pre><p>上面四个ip的访问无一例外，都是在请求这个php文件，cd到wordpress主目录，果然有这样一个文件，而且很明显，对方是通过脚本的方式不断请求的，遂改名为xmlrpc.motherfuck.php,然后再重启数据库,nginx,phpfpm等服务，这时候能够正常访问博客了。</p><p>在重启的这段时间内，google了一下xmlrpc.php这个文件，原来这是wordpress自身存在的一个漏洞：</p><blockquote><p>Pingback 是三种类型的反向链接中的一种，当有人链接或者盗用作者文章时来通知作者的一种方法。可以让作者了解和跟踪文章被链接或被转载的情况。一些全球最受欢迎的 blog 系统比如 Movable Type、Serendipity、WordPress 和 Telligent Community 等等，都支持 Pingback 功能，使得可以当自己的文章被转载发布的时候能够得到通知。 WordPress 中有一个可以通过 xmlrpc.php 文件接入的 XMLRPC API，可以使用 pingback.ping 的方法加以利用。 其他 BLOG 网站向 WordPress 网站发出 pingback，当WordPress处理 pingback 时，会尝试解析源 URL。如果解析成功，将会向该源 URL 发送一个请求，并检查响应包中是否有本 WordPress 文章的链接。如果找到了这样一个链接，将在这个博客上发一个评论，告诉大家原始文章在自己的博客上。 黑客向使用WordPress论坛的网站发送数据包，带有被攻击目标的 URL（源 URL）。WordPress 论坛网站收到数据包后，通过 xmlrpc.php 文件调用 XMLRPC API,向被攻击目标 URL 发起验证请求。如果发出大量的请求，就会对目标 URL 形成 HTTP Flood。当然，单纯向 WordPress 论坛网站发出大量的请求，也会导致 WordPress 网站自身被攻瘫。 除了 DDoS 之外，黑客可以通过源 URL 主机存在与否将返回不同的错误信息这个线索，如果这些主机在内网中确实存在，攻击者可以进行内网主机扫描。</p><p><a href="http://yusi123.com/3764.html" target="_blank" rel="noopener">来源</a><br>在google上转了一圈，这个漏洞大致有两种利用途径，一是用来爆破wp-admin后台账号密码，不过这个对我来说没有影响，因为我的账号密码都不是常规字典里能有的，而且，似乎这个利用方式已经被wordpress官方修复；其次，就是利用pingback的功能将wordpress所在服务器当做肉鸡，转而对第三个网站进行ddos攻击。所以就是被人当做肉鸡了=  =</p></blockquote><p>另外从网上搜集了一下解决方案：</p><p>一开始确实考虑过用ufw直接屏蔽ip，但这样不能解决其他IP也出现这样的攻击，我们需要禁止xmlrpc文件的访问功能才可以彻底的解决。</p><p>我之前采用的改名其实和删除文件是一个道理，目的就是让xmlrpc无法访问；</p><p>另外还有三种方法：</p><blockquote><p>第一种是屏蔽 XML-RPC (pingback) 的功能。</p><div><p>add_filter(‘xmlrpc_enabled’, ‘__return_false’);</p></div><p>第二种方法就是通过.htaccess屏蔽xmlrpc.php文件的访问</p><div><div><h1 id="protect-xmlrpc"><a href="#protect-xmlrpc" class="headerlink" title="protect xmlrpc"></a>protect xmlrpc</h1><p>&lt;Files xmlrpc.php&gt;</p><p>Order Deny,Allow</p><p>Deny from all</p><p>&lt;/Files&gt;</p></div></div><p>第三种同样的是修改.htaccess文件，如果有用户访问xmlrpc.php文件，然后让其跳转到其他不存在或者存在的其他页面，降低自身网站的负担。</p><div><div><h1 id="protect-xmlrpc-1"><a href="#protect-xmlrpc-1" class="headerlink" title="protect xmlrpc"></a>protect xmlrpc</h1><p>&lt;IfModule mod_alias.c&gt;</p><p>Redirect 301 /xmlrpc.php <a href="http://example.com/custom-page.php" target="_blank" rel="noopener">http://example.com/custom-page.php</a></p><p>&lt;/IfModule&gt;</p></div></div>终于修复了=  =博客可以正常访问，然后又出现了后台访问速度极慢的问题：</blockquote><p>google了一下，原因如下：</p><blockquote><p>在新版的 WordPress 中，为了后台的美观度，开发者在页面上加入了 Google Web 字体，这本来会让英文显示更加精美。但在国内，由于 googleapis.com 等域名常年抽风(你懂的)，直接导致的结果就是后台经常打开一点就卡住打不开了，加载极为缓慢，其实我们只要移除 Google 在线字体即可恢复原来的速度。<br>05.03日为了测试网络，将火狐浏览器设为直连而谷歌是连的梯子， 所以才会出现这种情况。（之前都是默认整个系统翻墙的）</p></blockquote><p>想想为了方便还是移除了google的在线字体，在主题顶部的function.php顶部加入：</p><pre class="lang:php decode:true ">add_filter('gettext_with_context', 'disable_open_sans', 888, 4 );function disable_open_sans( $translations, $text, $context, $domain ){if ( 'Open Sans font: on or off' == $context &amp;&amp; 'on' == $text ) {$translations = 'off';}return $translations;}</pre><p>至此所有问题都完美解决。</p><p>&nbsp;</p><p>最后，对于怎么会被攻击，有一个小小的疑问，因为我自己的博客，除了一些熟人，基本是没有外人知道的，05.04由于一些原因在wx中发送了我博客某几篇博文的链接给别人，由于之前搞过一段时间wx公众号，如果用wx内置浏览器打开链接，它会将链接提交到服务器进行转换，再返回转换之后的链接地址，有点怀疑；另外就可能是，并不是针对我的网站攻击，而是对方利用某个关键字扫到我的网站，转而作为肉鸡去执行ddos。</p><p>╮(╯▽╰)╭还是自己太弱，努力学习！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hacker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>岩石力学第2章 岩石强度与变形-作业</title>
      <link href="/2016/04/06/rock-mechanics-secondchapter-task/"/>
      <url>/2016/04/06/rock-mechanics-secondchapter-task/</url>
      
        <content type="html"><![CDATA[<p>岩石力学第一章作业,顺便学习了一下mathjax的简单使用。</p><h2 id="请回答下列问题："><a href="#请回答下列问题：" class="headerlink" title="请回答下列问题："></a>请回答下列问题：</h2><h3 id="A-什么是岩石的单向抗压、单向抗拉、单向抗剪和残余强度？"><a href="#A-什么是岩石的单向抗压、单向抗拉、单向抗剪和残余强度？" class="headerlink" title="A.什么是岩石的单向抗压、单向抗拉、单向抗剪和残余强度？"></a>A.什么是岩石的单向抗压、单向抗拉、单向抗剪和残余强度？</h3><h3 id="B-论述Mohr-Coulomb准则的本质及假设条件是什么？"><a href="#B-论述Mohr-Coulomb准则的本质及假设条件是什么？" class="headerlink" title="B.论述Mohr-Coulomb准则的本质及假设条件是什么？"></a>B.论述Mohr-Coulomb准则的本质及假设条件是什么？</h3><h3 id="C-岩石强度的影响因素有哪些？这些因素是怎样影响的？"><a href="#C-岩石强度的影响因素有哪些？这些因素是怎样影响的？" class="headerlink" title="C.岩石强度的影响因素有哪些？这些因素是怎样影响的？"></a>C.岩石强度的影响因素有哪些？这些因素是怎样影响的？</h3><h2 id="answer："><a href="#answer：" class="headerlink" title="answer："></a>answer：</h2><h3 id="problem-A："><a href="#problem-A：" class="headerlink" title="problem A："></a>problem A：</h3><p>岩石的——</p><p>单向抗压强度:即单轴抗压强度，概念:岩石试件在单轴压力（无围压而轴向加压力）下抵抗破坏的极限能力或极限强度，数值上等于破坏时的最大压应力。</p><p>单向抗拉强度:即单轴抗拉强度，概念:是指岩石试件在单向拉伸条件下试件达到破坏的极限值，它在数值上等于破坏时的最大拉应力。</p><p>单向抗剪强度:即单轴抗剪强度，就是岩石抵抗单向剪切滑动的能力。</p><p>残余强度：广义：残余强度是指岩石在破坏后所残留的抵抗外荷的能力。<br>针对抗剪强度：破坏后的抗剪强度将随着剪切变形的增加而逐渐降低,最后趋近于一稳定值,这一稳定的强度值称为残余强度.</p><h3 id="problem-B："><a href="#problem-B：" class="headerlink" title="problem B："></a>problem B：</h3><p>Mohr-Coulomb准则的——</p><p>假设条件：材料内某一点的破坏主要决定于它的大主应力和小主应力，而与中间主应力无关(可研究平面应力状态)。<br>本质：对于Mohr圆包络线，存在多种假设（抛物线、双曲线或摆线），一般认为，当$σ$&lt;10MPa时，包络线近似为直线。岩石的强度条件可用库伦方程表示：$$τ_{f}=c+σtanφ$$上式称为Mohr-Coulomb方程/准则（M-C准则）。且将岩石视为连续均匀介质，属于宏观强度理论。</p><h3 id="problem-C"><a href="#problem-C" class="headerlink" title="problem C:"></a>problem C:</h3><p>岩石强度的影响因素有哪些？这些因素是怎样影响的？</p><p>岩石的强度=岩块的强度+结构面的强度+耦合效益＋地质环境因素影响（地应力、地下水等）。</p><ol><li>岩块的强度：受矿物成分影响，<br>矿物硬度越大，岩石的弹性越明显，强度越高。<br>含有不稳定矿物如黄铁矿，霞石以及易溶于水的盐类等，具有易变性和溶解性，含有这些矿物的岩石其力学性质随时间变化。<br>含有粘土矿物（如蒙脱石，伊利石，高岭石等），遇水时发生膨胀和软化，强度明显降低。</li><li>结构面的强度：岩石中的晶粒或者岩石颗粒的大小，形状，以及结合方式会对结构面的强度造成不同的影响，其次，岩石中不同矿物集合体之间或矿物集合体与其他组成部分之间的排列方式与填充方式也会影响结构面的强度，最后，结构面粗糙度也会对强度造成影响，主要是影响岩体的剪切破坏。</li><li>耦合效益（效应？）：按我的理解，即多种不同作用同时加载在岩石之上时对岩石性质造成的额外的影响，比如同时受热，力，化学溶液，应力等共同作用对岩石强度的影响并不是简单的单独作用影响的叠加。</li><li>地质环境因素影响：除了上面提到的化学溶液（其实也可以归结为水的影响），地应力，和风化等外界因素的影响，水的影响应该是占最大比例的。水会改变岩石的物理力学性质（胶结构被破坏，化学溶蚀等） $$渗透压力 →空隙压力 → 降低有效应力 → 强度降低$$根据库伦理论，考虑孔隙水压力的作用时，饱和多孔岩石的抗剪强度为：$$τ<em>{f}=c+(σ-P</em>{w})tanφ$$若用主应力表示库伦理论，并考虑孔隙水压力：<br>$$σ<em>{1}-P</em>{w}=\frac{1+sinφ}{1-sinφ} (σ<em>{3}-P</em>{w})+\frac{2csinφ}{1-sinφ}.$$若$σ<em>{1},σ</em>{3}$一定，随着$P_{w}$增加，岩石可能发生破坏。<br>&nbsp;</li></ol><p>&nbsp;</p><p>mathjax使用起来十分方便，<a href="http://docs.mathjax.org/en/latest/start.html" target="_blank" rel="noopener">mathjax官方文档</a>，对于wordpress，只需在header.php中的&lt;head&gt;中添加一段js代码导入mathjax官方的athJax.js：</p><pre class="lang:js decode:true">&lt;script type="text/x-mathjax-config"&gt;  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});&lt;/script&gt;&lt;script type="text/javascript" async  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_CHTML"&gt;&lt;/script&gt;</pre><p>然后直接在博文中使用即可。比如这个公式$$σ<em>{1}-P</em>{w}=\frac{1+sinφ}{1-sinφ} (σ<em>{3}-P</em>{w})+\frac{2csinφ}{1-sinφ}.$$即</p><pre class="lang:sh decode:true">$$σ_{1}-P_{w}=\frac{1+sinφ}{1-sinφ} (σ_{3}-P_{w})+\frac{2csinφ}{1-sinφ}.$$</pre><p>更多用法参考：<a href="http://iori.sinaapp.com/17.html" target="_blank" rel="noopener">http://iori.sinaapp.com/17.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Something </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>online judge的策划</title>
      <link href="/2016/04/04/online-judge-e7-9a-84-e7-ad-96-e5-88-92/"/>
      <url>/2016/04/04/online-judge-e7-9a-84-e7-ad-96-e5-88-92/</url>
      
        <content type="html"><![CDATA[<p>挖坑管挖不管埋啦啦啦啦啦啦～</p><p>测试了很多网上的开源online judge系统(目前测试：<a href="http://oj.jingwei.site" target="_blank" rel="noopener">http://oj.jingwei.site</a> time(2016.04.04))，没有一个能完全达到我想要的状态的，(⊙_⊙)，反正现在才大二，自己做一个，慢慢来～</p><ul><li>服务器：首先，服务器这个不是问题，自己本机就是ubuntu，还有一个阿里云一个加拿大一个日本的服务器，先本机测试，再放上vps。</li><li>原创还是修改开源：其实觉得codeforces挺棒的=  =然而并没有开源，其他的要么功能不全，要么功能完备美工太差（这个真不能忍）=  =所以没有选择了，自己搞一个吧～</li><li>现在能想到的以及技术困难：</li></ul><ol><li>web服务器和判题服务器肯定是需要分开的，最好还能在web后台管理中动态添加；</li><li>基于 Python 和 Django ，现在主流oj似乎都是利用python和django框架，那么自然有它的独到之处，暂且就定为采取这种模式；</li><li>判题语言至少需要支持c，c++，以及java，考虑到后期维护，<del>在添加判题服务器时应该附带着更新可支持的判题语言，</del>或者在web端就指定已经支持的语言，然后直接添加判题服务器；（前者先更新判题服务器，通过判题服务器更新web端，后者更新web端，web端存在支持后判题服务器上的语言支持才能作用）；</li><li>判题流程：<strong>用户提交–&gt;Web界面–&gt;Web服务器在数据库中新建评测–&gt;Web服务器找到应轮到的评测机，下发评测指令和相关数据（用户代码、标准输入输出）–&gt;评测机开始评测，返回结果，web服务器向数据库写入结果–&gt;用户在Web界面获取结果；</strong></li><li>用户提交：暂时只支持提交代码就好了，提交文件在我看来其实可有可无，还会增加处理的复杂度度，另外，在提交的时候可以做一个小小的检测，比如选择语言错误，或者采用了一些非法代码；</li><li>1. 用户类型：超级管理员，普通管理员（用于创建比赛），普通用户</li><li>2. 功能：是否需要增加小组功能？以便对小组发布比赛或者对某些用户发布比赛？或者比赛单纯以密码的形式来区分参与用户？</li><li>web界面，需要有problem，submission，status，rating，contest，about（FAQ）；</li><li>题目：除了常规的信息，增加题目分类（某场比赛的题目自成一个分类，同一个来源自成一个分类等等）和题目标签（水题，DP，暴力等等）（<del>题目难度等级？无法有效区分</del>）</li><li>提交：和常规oj显示信息相同即可；</li><li>排名：考虑是否给每道题增加权值？按权值排名或者按解题数目和AC率排名？</li><li>比赛：题目（可新建可从已有题目导入新建，仅仅导入信息即可<del>若导入需要可编辑</del>）开始时间，终止时间，是否封榜（管理员和创建者始终需要看到整个榜单），acm-icpc机制和codeforces排名机制（每题一个初始分值，设定分值递减函数），比赛进行中有人AC给创建者推送通知（通知check功能）（考虑给页面单独留出一个板块放通知，超级管理员可全局推送通知，管理员在比赛开始后可推送给参加比赛的人通知），</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>岩石力学第1章 岩石性质与应力状态-作业</title>
      <link href="/2016/03/31/rock-mechanics-fisrtchapter-task/"/>
      <url>/2016/03/31/rock-mechanics-fisrtchapter-task/</url>
      
        <content type="html"><![CDATA[<p>岩石力学第一章作业,顺便学习了一下markdown语法的简单使用。</p><h2 id="请完成下列名词解释，在系统中输入答案。"><a href="#请完成下列名词解释，在系统中输入答案。" class="headerlink" title="请完成下列名词解释，在系统中输入答案。"></a>请完成下列名词解释，在系统中输入答案。</h2><h1 id="1-岩（体）石力学"><a href="#1-岩（体）石力学" class="headerlink" title="1. 岩（体）石力学"></a>1. 岩（体）石力学</h1><ul><li>岩石力学是研究岩石的力学性状的一门理论和应用的科学，它是固体力学的一个分支，是探讨岩石对其周围物理环境中力场反应的学科。</li><li>具体而言，研究岩石在荷载作用下的应力、变形和破坏规律以及工程稳定性等问题。</li><li>上述定义是把“岩石”看成固体力学中的一种材料，然而岩石材料不同于一般的人工制造的固体材料。它经历了漫长的地质构造作用，内部产生了较大的内应力，以及不连续面、孔洞等，是一种典型的“非连续介质”，具有复杂的地质构造和赋存条件的天然地质体。</li></ul><h1 id="2-岩石"><a href="#2-岩石" class="headerlink" title="2. 岩石"></a>2. 岩石</h1><ul><li>岩石是组成地壳的基本物质，它是由矿物或岩屑在地质作用下按一定规律凝聚而成的天然地质体。</li><li>岩石按照其成因可分为三类：岩浆岩，沉积岩，变质岩，不同成因类型的岩石具有不同的物理力学性质。</li></ul><h1 id="3-岩体"><a href="#3-岩体" class="headerlink" title="3. 岩体"></a>3. 岩体</h1><ul><li>岩体是指在一定地质条件下，含有诸如节理、断层、裂隙、层理、劈理等不连续结构面的复杂地质体。</li><li>岩石和岩体的重要区别就是岩体包含若干不连续面。由于不连续面的存在，岩体的强度远低于岩石的强度。</li></ul><h1 id="4-结构体"><a href="#4-结构体" class="headerlink" title="4. 结构体"></a>4. 结构体</h1><ul><li>岩体结构的基本要素之一，被结构面所包围的完整岩石或隐蔽裂隙的岩石，由不同产状的结构面组合切割而形成的岩石块体。</li></ul><h1 id="5-结构面"><a href="#5-结构面" class="headerlink" title="5. 结构面"></a>5. 结构面</h1><ul><li>岩体结构的另一要素，岩体内具有一定方向、延展较大、厚度较小的面状地质界面，包括物质的分界面和不连续面。<blockquote><p>above from 0.0《岩石力学》大纲与绪论.ppt</p></blockquote></li></ul><h1 id="6-岩石孔隙比（率）"><a href="#6-岩石孔隙比（率）" class="headerlink" title="6. 岩石孔隙比（率）"></a>6. 岩石孔隙比（率）</h1><ul><li>指岩石内孔隙体积与总体积之比。</li></ul><h1 id="7-岩石的碎胀性"><a href="#7-岩石的碎胀性" class="headerlink" title="7. 岩石的碎胀性"></a>7. 岩石的碎胀性</h1><ul><li>岩石破碎后体积比原体积膨大的一种性质，通常用碎胀性系数(K)表示。</li><li>岩石体积碎胀后，在其重力作用下又逐渐压实。</li><li>直到不能再压密时的碎胀系数称为永久碎胀性系数。</li></ul><h1 id="8-扩容与扩容现象"><a href="#8-扩容与扩容现象" class="headerlink" title="8. 扩容与扩容现象"></a>8. 扩容与扩容现象</h1><ul><li>岩石扩容是指在偏应力作用下，当应力达到某一定值时，岩石的体积不但不缩小反而增大的一种力学现象。</li></ul><h1 id="9-软化性和软化系数"><a href="#9-软化性和软化系数" class="headerlink" title="9. 软化性和软化系数"></a>9. 软化性和软化系数</h1><ul><li>岩石浸水饱和后强度降低的性质，称为软化性，用软化系数（ηc）表示。</li><li>ηc定义为岩石试件的饱和状态抗压强度与干压强度的比值</li></ul><h1 id="10-各向异性"><a href="#10-各向异性" class="headerlink" title="10. 各向异性"></a>10. 各向异性</h1><ol><li>正交各向异性: 概念：岩石的强度、变形指标（力学性质）随空间方位不同而异的特性。(从岩石的不同方向施加荷载，其抵抗破坏的能力不同)</li><li>横观各向同性: 层面内 ―力学性质相同（多向同性面）； 层间 ―力学性质差异；<blockquote><p>above except problem 8 from 1.1 岩石的物理性质.pptx<br>markdown文件：</p></blockquote><pre class="lang:sh decode:true "># 1\. 岩（体）石力学</pre></li></ol><ul><li>岩石力学是研究岩石的力学性状的一门理论和应用的科学，它是固体力学的一个分支，是探讨岩石对其周围物理环境中力场反应的学科。</li><li>具体而言，研究岩石在荷载作用下的应力、变形和破坏规律以及工程稳定性等问题。</li><li>上述定义是把“岩石”看成固体力学中的一种材料，然而岩石材料不同于一般的人工制造的固体材料。它经历了漫长的地质构造作用，内部产生了较大的内应力，以及不连续面、孔洞等，是一种典型的“非连续介质”，具有复杂的地质构造和赋存条件的天然地质体。</li></ul><h1 id="2-岩石-1"><a href="#2-岩石-1" class="headerlink" title="2. 岩石"></a>2. 岩石</h1><ul><li>岩石是组成地壳的基本物质，它是由矿物或岩屑在地质作用下按一定规律凝聚而成的天然地质体。</li><li>岩石按照其成因可分为三类：岩浆岩，沉积岩，变质岩，不同成因类型的岩石具有不同的物理力学性质。</li></ul><h1 id="3-岩体-1"><a href="#3-岩体-1" class="headerlink" title="3. 岩体"></a>3. 岩体</h1><ul><li>岩体是指在一定地质条件下，含有诸如节理、断层、裂隙、层理、劈理等不连续结构面的复杂地质体。</li><li>岩石和岩体的重要区别就是岩体包含若干不连续面。由于不连续面的存在，岩体的强度远低于岩石的强度。</li></ul><h1 id="4-结构体-1"><a href="#4-结构体-1" class="headerlink" title="4. 结构体"></a>4. 结构体</h1><ul><li>岩体结构的基本要素之一，被结构面所包围的完整岩石或隐蔽裂隙的岩石，由不同产状的结构面组合切割而形成的岩石块体。<h1 id="5-结构面-1"><a href="#5-结构面-1" class="headerlink" title="5. 结构面"></a>5. 结构面</h1></li><li>岩体结构的另一要素，岩体内具有一定方向、延展较大、厚度较小的面状地质界面，包括物质的分界面和不连续面。</li></ul><p>&gt; above from 0.0《岩石力学》大纲与绪论.ppt</p><h1 id="6-岩石孔隙比（率）-1"><a href="#6-岩石孔隙比（率）-1" class="headerlink" title="6. 岩石孔隙比（率）"></a>6. 岩石孔隙比（率）</h1><ul><li>指岩石内孔隙体积与总体积之比。</li></ul><h1 id="7-岩石的碎胀性-1"><a href="#7-岩石的碎胀性-1" class="headerlink" title="7. 岩石的碎胀性"></a>7. 岩石的碎胀性</h1><ul><li>岩石破碎后体积比原体积膨大的一种性质，通常用碎胀性系数(K)表示。</li><li>岩石体积碎胀后，在其重力作用下又逐渐压实。</li><li>直到不能再压密时的碎胀系数称为永久碎胀性系数。</li></ul><h1 id="8-扩容与扩容现象-1"><a href="#8-扩容与扩容现象-1" class="headerlink" title="8. 扩容与扩容现象"></a>8. 扩容与扩容现象</h1><ul><li>岩石扩容是指在偏应力作用下，当应力达到某一定值时，岩石的体积不但不缩小反而增大的一种力学现象。</li></ul><h1 id="9-软化性和软化系数-1"><a href="#9-软化性和软化系数-1" class="headerlink" title="9. 软化性和软化系数"></a>9. 软化性和软化系数</h1><ul><li>岩石浸水饱和后强度降低的性质，称为软化性，用软化系数（ηc）表示。</li><li>ηc定义为岩石试件的饱和状态抗压强度与干压强度的比值</li></ul><h1 id="10-各向异性-1"><a href="#10-各向异性-1" class="headerlink" title="10. 各向异性"></a>10. 各向异性</h1><p>1. 正交各向异性:<br>概念：岩石的强度、变形指标（力学性质）随空间方位不同而异的特性。(从岩石的不同方向施加荷载，其抵抗破坏的能力不同)<br>2. 横观各向同性:<br>层面内 ―力学性质相同（多向同性面）；<br>层间 ―力学性质差异；</p><p>&gt; above except problem 8 from 1.1 岩石的物理性质.pptx<br>&nbsp;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Something </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 15.04配置蓝牙以使用蓝牙耳机</title>
      <link href="/2016/03/12/ubuntu-15-04-e9-85-8d-e7-bd-ae-e8-93-9d-e7-89-99-e4-bb-a5-e4-bd-bf-e7-94-a8-e8-93-9d-e7-89-99-e8-80-b3-e6-9c-ba/"/>
      <url>/2016/03/12/ubuntu-15-04-e9-85-8d-e7-bd-ae-e8-93-9d-e7-89-99-e4-bb-a5-e4-bd-bf-e7-94-a8-e8-93-9d-e7-89-99-e8-80-b3-e6-9c-ba/</url>
      
        <content type="html"><![CDATA[<p>折腾很久了,终于搞定了.</p><p>应该也适用于其他内核版本相差不大的ubuntu版本,哦对了,是针对双系统下的ubuntu.</p><p>首先,终端下输入</p><pre class="lang:sh decode:true">lsusb</pre><p>查看自己的蓝牙设备id,我的是</p><pre class="lang:sh decode:true">Bus 001 Device 004: ID 04ca:2006 Lite-On Technology Corp. Broadcom BCM43142A0 Bluetooth Device</pre><p>ID为04ca:2006</p><p>然后去windows下找一个file.hex文件, 不用进windows系统,直接ubuntu挂载windows系统盘就行,在C:\windows\system32\drivers找到BCMxxxx.hex这个文件, 如果有多个.hex文件,在windows设备管理器看下用的是哪个, 复制这个.hex文件到ubuntu的家目录.</p><p>打开终端,输入下面的命令:</p><pre class="lang:sh decode:true ">sudo apt-get install gitgit clone git://github.com/jessesung/hex2hcd.gitcd hex2hcdmake./hex2hcd ../BCMxxxx.xxx.xxx.xx.hex fw-04ca_2006.hcd (用你自己的id替换 04ca_2006)sudo cp fw* /lib/firmware</pre><p>重载模块:</p><pre class="lang:sh decode:true ">sudo modprobe -r btusbsudo modprobe btusb</pre><p>重启系统.</p><p>到这里应该就可以正常搜索到其他蓝牙设备并且连接了,但是你会发现,用蓝牙耳机的时候音质会很感人,在系统设置-声音内,选择连接的蓝牙耳机,你会发现有两个模式,请切换到高保真(A2DP)模式.如果切换了以后发现自动跳回了原来的模式,打开终端.</p><p>首先,</p><pre class="lang:sh decode:true">sudo vim /etc/bluetooth/audio.conf</pre><p>将AutoConnect=true行前面的#注释符号去掉,保存并重启蓝牙服务</p><pre class="lang:sh decode:true ">sudo service bluetooth restart</pre><p>然后,</p><pre class="lang:sh decode:true  ">pactl list cards short</pre><p>查看连接的蓝牙耳机设备号,我的是</p><pre class="lang:sh decode:true ">3    bluez_card.00_02_37_00_2D_C3    module-bluez4-device.c</pre><p>再执行</p><pre class="lang:sh decode:true ">pactl set-card-profile 3 a2dp</pre><p>到此为止就可以了,但是有的时候还是会出现声音断断续续的问题,尚未解决.</p><p>&nbsp;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 蓝牙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj3190 Stall Reservations解题报告</title>
      <link href="/2016/03/11/poj3190-stall-reservations-e8-a7-a3-e9-a2-98-e6-8a-a5-e5-91-8a/"/>
      <url>/2016/03/11/poj3190-stall-reservations-e8-a7-a3-e9-a2-98-e6-8a-a5-e5-91-8a/</url>
      
        <content type="html"><![CDATA[<p>链接:<a href="http://poj.org/problem?id=3190" target="_blank" rel="noopener">poj3190</a></p><blockquote><div class="ptt" lang="en-US">Stall Reservations</div><div class="plm"><table align="center"><tbody><tr><td>**Time Limit:** 1000MS</td><td colspan="3">**Memory Limit:** 65536K</td></tr><tr><td>**Total Submissions:** 4735</td><td>**Accepted:** 1688</td><td>Special Judge</td></tr></tbody></table></div><p>Description</p><div class="ptx" lang="en-US">Oh those picky N (1 &lt;= N &lt;= 50,000) cows! They are so picky that each one will only be milked over some precise time interval A..B (1 &lt;= A &lt;= B &lt;= 1,000,000), which includes both times A and B. Obviously, FJ must create a reservation system to determine which stall each cow can be assigned for her milking time. Of course, no cow will share such a private moment with other cows.<p>Help FJ by determining:</p><ul><li>The minimum number of stalls required in the barn so that each cow can have her private milking period</li><li>An assignment of cows to these stalls over time</li></ul><p>Many answers are correct for each test dataset; a program will grade your answer.</p></div><p></p><p>Input</p><div class="ptx" lang="en-US">Line 1: A single integer, N<p>Lines 2..N+1: Line i+1 describes cow i’s milking interval with two space-separated integers.</p></div><p></p><p>Output</p><div class="ptx" lang="en-US">Line 1: The minimum number of stalls the barn must have.<p>Lines 2..N+1: Line i+1 describes the stall to which cow i will be assigned for her milking period.</p></div><p></p><p>Sample Input</p><pre class="sio">51 102 43 65 84 7</pre><p>Sample Output</p><pre class="sio">412324</pre><p>Hint</p><div class="ptx" lang="en-US">Explanation of the sample:<p>Here’s a graphical schedule for this output:</p><pre class="">Time     1  2  3  4  5  6  7  8  9 10Stall 1 c1&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Stall 2 .. c2&gt;&gt;&gt;&gt;&gt;&gt; c4&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; .. ..Stall 3 .. .. c3&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; .. .. .. ..Stall 4 .. .. .. c5&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; .. .. ..</pre><p>Other outputs using the same number of stalls are possible.</p></div><p></p></blockquote><div class="ptx" lang="en-US"></div><div class="ptx" lang="en-US">大意就是有多个牛要挤奶,但是每个牛都特别犟,只在自己的时间内产奶,且不与其他牛共享stall,可以添加任意个stall,求最小的stall数且输出每个牛隶属的stall..</div>各种坑....不多说,对时间限制相当严格,直接贪心于是就直接爆时间了,<p>其实还是对堆的应用不熟练啊,</p><p>正确思路应该是首先建立一个结构体存储每个牛的产奶时间的左右端点,然后按照产奶开始时间从小到大排序,优先处理先开始产奶的奶牛,同时结构体内还需要一个变量记录每个牛的id,以便排序之后的处理和输出:</p><pre class="lang:c++ decode:true ">struct Cow{    int l,r,co;}c[maxn];bool cmp(Cow c1,Cow c2){    if(c1.l==c2.l)return c1.r&lt;c2.r;    else return c1.l&lt;c2.l;}</pre><p>然后,建立一个表示stall的优先队列,这个优先队列每次先取出队列中最早结束的奶牛结构体Cow,</p><p>比如现在优先队列中有m头奶牛,对第m+1头奶牛,如果这头奶牛的开始时间小于等于优先队列中最早结束产奶的奶牛的结束时间,那么就需要增加一个stall,于是将这头奶牛加入优先队列;如果这头奶牛的开始时间大于上述时间,那么取出优先队列的top,并将这头奶牛加入队列,同时维护一个ans值和ansl数组以便输出.</p><p>对优先队列,应该首先对结构体的&lt;运算符进行重载:</p><pre class="lang:c++ decode:true">bool operator &lt;(const Cow&amp; a,const Cow&amp; b) {    if(a.r==b.r)return a.l&gt;b.l;    else return a.r&gt;b.r;}</pre><p>下面是完整AC代码:<span id="transmark"></span></p><pre class="lang:c++ decode:true ">/** Filename:    poj3190d.cpp* Desciption:  我要疯了,真的* Created:     2016年03月11日 14时16分29秒 星期五* Author:      JIngwei Xu [mail:xu_jingwei@outlook.com]**/#include&lt;bitset&gt;#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;math.h&gt;#include&lt;queue&gt;#define INT_MAX 1&lt;&lt;30using namespace std;typedef long long ll;const int INF=0x7F;int n;const int maxn=50000+7;int anl[maxn];struct Cow{    int l,r,co;}c[maxn];bool cmp(Cow c1,Cow c2){    if(c1.l==c2.l)return c1.r&lt;c2.r;    else return c1.l&lt;c2.l;}bool operator &lt;(const Cow&amp; a,const Cow&amp; b) {    if(a.r==b.r)return a.l&gt;b.l;    else return a.r&gt;b.r;}Cow c1;priority_queue&lt;Cow&gt; pq;int sel=1,ans=1;void solve(){    pq.push(c[0]);    anl[c[0].co]=ans;    for (int i = 1; i &lt; n; i += 1)    {        c1=pq.top();        if (c[i].l&gt;c1.r)        {            anl[c[i].co]=anl[c1.co];            pq.pop();            pq.push(c[i]);        }else{            ans++;            anl[c[i].co]=ans;            pq.push(c[i]);        }    }    printf("%d\n",ans);    for (int i = 0; i &lt; n; i += 1)    {        printf("%d\n",anl[i]);    }}int main(){//ios_base::sync_with_stdio(0);#ifdef JIngwei_Xu    freopen("data.in","r",stdin);    freopen("data.out","w",stdout);#endif    while (scanf("%d",&amp;n)!=EOF)    {        for (int i = 0; i &lt; n; i += 1)        {            scanf("%d%d",&amp;c[i].l,&amp;c[i].r);            c[i].co=i;//            pq.push(c[i]);        }        sort(c,c+n,cmp);//        for (int i = 0; i &lt; n; i += 1)//        {//            cout&lt;&lt;c[i].co&lt;&lt;":"&lt;&lt;c[i].l&lt;&lt;","&lt;&lt;c[i].r&lt;&lt;endl;//        }//        while (!pq.empty())//        {//            cout&lt;&lt;pq.top().co&lt;&lt;":"&lt;&lt;pq.top().l&lt;&lt;","&lt;&lt;pq.top().r&lt;&lt;endl;//            pq.pop();//        }        solve();    }    return 0;}</pre><p>&nbsp;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 优先队列 </tag>
            
            <tag> 日常怀疑人生系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 简单安全配置</title>
      <link href="/2016/03/10/ubuntu-e7-ae-80-e5-8d-95-e5-ae-89-e5-85-a8-e9-85-8d-e7-bd-ae/"/>
      <url>/2016/03/10/ubuntu-e7-ae-80-e5-8d-95-e5-ae-89-e5-85-a8-e9-85-8d-e7-bd-ae/</url>
      
        <content type="html"><![CDATA[<p>1.安装<br>sudo apt-get install ufw</p><p>2.启用<br>sudo ufw enable<br>sudo ufw default deny<br>运行以上两条命令后，开启了防火墙，并在系统启动时自动开启。<br>关闭所有外部对本机的访问，但本机访问外部正常。</p><p>3.开启/禁用<br>sudo ufw allow|deny [service]<br>打开或关闭某个端口，例如：<br>sudo ufw allow smtp　允许所有的外部IP访问本机的25/tcp (smtp)端口<br>sudo ufw allow 22/tcp 允许所有的外部IP访问本机的22/tcp (ssh)端口<br>sudo ufw allow 53 允许外部访问53端口(tcp/udp)<br>sudo ufw allow from 192.168.1.100 允许此IP访问所有的本机端口<br>sudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53<br>sudo ufw deny smtp 禁止外部访问smtp服务<br>sudo ufw delete allow smtp 删除上面建立的某条规则</p><p>4.查看防火墙状态<br>sudo ufw status</p><p>一般用户，只需如下设置：<br>sudo apt-get install ufw<br>sudo ufw enable<br>sudo ufw default deny<br>以上三条命令已经足够安全了，如果你需要开放某些服务，再使用sudo ufw allow开启。<br>补充：</p><p>开启/关闭防火墙 (默认设置是’disable’)</p><h1 id="ufw-enable-disable"><a href="#ufw-enable-disable" class="headerlink" title="ufw enable|disable"></a>ufw enable|disable</h1><p>转换日志状态</p><h1 id="ufw-logging-on-off"><a href="#ufw-logging-on-off" class="headerlink" title="ufw logging on|off"></a>ufw logging on|off</h1><p>设置默认策略 (比如 “mostly open” vs “mostly closed”)</p><h1 id="ufw-default-allow-deny"><a href="#ufw-default-allow-deny" class="headerlink" title="ufw default allow|deny"></a>ufw default allow|deny</h1><p>许 可或者屏蔽某些入埠的包 (可以在“status” 中查看到服务列表［见后文］)。可以用“协议：端口”的方式指定一个存在于/etc/services中的服务名称，也可以通过包的meta-data。 ‘allow’ 参数将把条目加入 /etc/ufw/maps ，而 ‘deny’ 则相反。基本语法如下：</p><h1 id="ufw-allow-deny-service"><a href="#ufw-allow-deny-service" class="headerlink" title="ufw allow|deny [service]"></a>ufw allow|deny [service]</h1><p>显示防火墙和端口的侦听状态，参见 /var/lib/ufw/maps。括号中的数字将不会被显示出来。</p><h1 id="ufw-status"><a href="#ufw-status" class="headerlink" title="ufw status"></a>ufw status</h1><p><em>［注意：上文中虽然没有使用 sudo，但是命令提示符号都是“#”。所以……你知道啥意思了哈。原文如此。──译者注］</em><br><strong>UFW 使用范例：</strong></p><p>允许 53 端口</p><p>$ sudo ufw allow 53</p><p>禁用 53 端口</p><p>$ sudo ufw delete allow 53</p><p>允许 80 端口</p><p>$ sudo ufw allow 80/tcp</p><p>禁用 80 端口</p><p>$ sudo ufw delete allow 80/tcp</p><p>允许 smtp 端口</p><p>$ sudo ufw allow smtp</p><p>删除 smtp 端口的许可</p><p>$ sudo ufw delete allow smtp</p><p>允许某特定 IP</p><p>$ sudo ufw allow from 192.168.254.254</p><p>删除上面的规则</p><p>$ sudo ufw delete allow from 192.168.254.254</p><p>&nbsp;</p><p>转载:<a href="http://baisongfly.blog.163.com/blog/static/30135117200923005956159/" target="_blank" rel="noopener">http://baisongfly.blog.163.com/blog/static/30135117200923005956159/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>aoj0525 Osenbei (bitset的使用)</title>
      <link href="/2016/03/10/aoj0525-osenbei/"/>
      <url>/2016/03/10/aoj0525-osenbei/</url>
      
        <content type="html"><![CDATA[<p>链接:<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0525" target="_blank" rel="noopener">aoj0525</a></p><blockquote><p>题意：药药!切克闹! 煎饼果子来一套!有一个烤饼器可以烤r行c列的煎饼，煎饼可以正面朝上（用1表示）也可以背面朝上（用0表示）。一次可将同一行或同一列的煎饼全部翻转。现在需要把尽可能多的煎饼翻成正面朝上，问最多能使多少煎饼正面朝上？</p><p>输入：多组输入，每组第一行为二整数r, c (1 ≤ r ≤ 10, 1 ≤ c ≤ 10 000)，剩下r行c列表示煎饼初始状态。r=c=0表示输入结束。</p><p>输出：对于每组输入，输出最多能使多少煎饼正面朝上。</p><p>中文参考<a href="http://bbs.byr.cn/#!article/ACM_ICPC/73337?au=Milrivel" target="_blank" rel="noopener">http://bbs.byr.cn/#!article/ACM_ICPC/73337?au=Milrivel</a><br>第一想法其实就是枚举….没有其他什么,不过感觉不是很好处理…..直接暴力大概会超时吧也没去试,</p></blockquote><p>看到大牛博客的关于bitset的使用,才知道还有个这么神奇的东西,顺便转个文章做个总结~</p><p><a href="http://jingwei.site/bitset/" target="_blank" rel="noopener">传送门</a></p><p>因为r最大只有10,只需要预先建立10个bitset即可,处理起来很方便.</p><pre><code>/** Filename:    aoj0525.cpp* Desciption:  Desciption* Created:     2016-03-10* Author:      JIngwei Xu [mail:xu_jingwei@outlook.com]**/#include&lt;bitset&gt;#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#define INT_MAX 1&lt;&lt;30using namespace std;typedef long long ll;const int INF=0x7F;int n,m,ans;bitset&lt;10000&gt; bits[10];int check(){    int ct=0,rec=0;    for (int i = 0; i &lt; m; i += 1)    {        ct=0;        for (int j = 0; j &lt; n; j += 1)        {            if(bits[j][i]==1)ct++;        }        ct=max(ct,n-ct);        rec+=ct;    }    return rec;}void dfs(int k){    if (k==n)    {        ans=max(ans,check());        return;    }    for (int i = 0; i &lt; 2; i += 1)    {        bits[k].flip();        dfs(k+1);    }}int main(){//ios_base::sync_with_stdio(0);#ifdef JIngwei_Xu    freopen("data.in","r",stdin);    freopen("data.out","w",stdout);#endif    while (scanf("%d%d",&amp;n,&amp;m)&amp;&amp;n&amp;&amp;m)    {        int t;        ans=0;        for (int i = 0; i &lt; n; i += 1)        {            for (int j = 0; j &lt; m; j += 1)            {                scanf("%d",&amp;t);                bits[i][j]=t;            }        }        dfs(0);        printf("%d\n",ans);    }    return 0;}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bitset </tag>
            
            <tag> 暴力 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bitset的使用(转)</title>
      <link href="/2016/03/09/bitset/"/>
      <url>/2016/03/09/bitset/</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.163.com/lixiangqiu_9202/blog/static/53575037201251121331412/" target="_blank" rel="noopener">原文链接</a></p><p>有些程序要处理二进制位的有序集，每个位可能包含的是0（关）或1（开）的值。位是用来保存一组项或条件的<span lang="EN-US">yes</span>/<span lang="EN-US">no</span>信息（有时也称标志）的简洁方法。标准库提供了<span lang="EN-US">bitset</span>类使得处理位集合更容易一些。要使用<span lang="EN-US">bitset</span>类就必须要包含相关的头文件。在本书提供的例子中，假设都使用了<span lang="EN-US">std::bitset</span>的<span lang="EN-US">using</span>声明：</p><p><span lang="EN-US">＃i nclude &lt;bitset&gt;</span></p><p><span lang="EN-US">using std::bitset;</span></p><p>3.5.1  <strong>bitset</strong>的定义和初始化</p><p>表<span lang="EN-US">3-6</span>列出了<span lang="EN-US">bitset</span>的构造函数。类似于<span lang="EN-US">vector</span>，<span lang="EN-US">bitset</span>类是一种类模板；而与<span lang="EN-US">vector</span>不一样的是<span lang="EN-US">bitset</span>类型对象的区别仅在其长度而不在其类型。在定义<span lang="EN-US">bitset</span>时，要明确<span lang="EN-US">bitset</span>含有多少位，须在尖括号内给出它的长度值：</p><p><span lang="EN-US">bitset</span>&lt;<span lang="EN-US">32</span>&gt; <span lang="EN-US">bitvec</span>; //<span lang="EN-US">32</span>位，全为<span lang="EN-US">0</span>。</p><p>给出的长度值必须是常量表达式（2.7节）。正如这里给出的，长度值必须定义为整型字面值常量或是已用常量值初始化的整数类型的<span lang="EN-US">const</span>对象。</p><p>这条语句把<span lang="EN-US">bitvec</span>定义为含有<span lang="EN-US">32</span>个位的<span lang="EN-US">bitset</span>对象。和<span lang="EN-US">vector</span>的元素一样，<span lang="EN-US">bitset</span>中的位是没有命名的，程序员只能按位置来访问它们。位集合的位置编号从0开始，因此，<span lang="EN-US">bitvec</span>的位序是从0到31。以0位开始的位串是低阶位（<span lang="EN-US">low-order bit</span>），以31位结束的位串是高阶位(<span lang="EN-US">high-order bit</span>)。</p><p>表<span lang="EN-US">3-6  </span>初始化<span lang="EN-US">bitset</span>对象的方法</p><div><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td width="170"><span lang="EN-US">bitset&lt;n&gt; b;</span></td><td width="382"><span lang="EN-US">b</span>有<span lang="EN-US">n</span>位，每位都为<span lang="EN-US">0</span></td></tr><tr><td width="170"><span lang="EN-US">bitset</span><span lang="EN-US">&lt;</span><span lang="EN-US">n</span><span lang="EN-US">&gt; </span><span lang="EN-US">b</span><span lang="EN-US">(</span><span lang="EN-US">u</span><span lang="EN-US">);</span></td><td width="382"><span lang="EN-US">b</span>是<span lang="EN-US">unsigned long</span>型<span lang="EN-US">u</span>的一个副本</td></tr><tr><td width="170"><span lang="EN-US">bitset</span><span lang="EN-US">&lt;</span><span lang="EN-US">n</span><span lang="EN-US">&gt; </span><span lang="EN-US">b</span><span lang="EN-US">(</span><span lang="EN-US">s</span><span lang="EN-US">);</span></td><td width="382"><span lang="EN-US">b</span>是<span lang="EN-US">string</span>对象<span lang="EN-US">s</span>中含有的位串的副本</td></tr><tr><td width="170"><span lang="EN-US">bitset</span><span lang="EN-US">&lt;</span><span lang="EN-US">n</span><span lang="EN-US">&gt; </span><span lang="EN-US">b</span><span lang="EN-US">(</span><span lang="EN-US">s</span><span lang="EN-US">, </span><span lang="EN-US">pos</span><span lang="EN-US">, </span><span lang="EN-US">n</span><span lang="EN-US">);</span></td><td width="382"><span lang="EN-US">b</span>是<span lang="EN-US">s</span>中从位置<span lang="EN-US">pos</span>开始的<span lang="EN-US">n</span>个位的副本</td></tr></tbody></table></div><span lang="EN-US">1. </span>用**<span lang="EN-US">unsigned</span>**值初始化**<span lang="EN-US">bitset</span>**对象<p>当用<span lang="EN-US">unsigned long</span>值作为<span lang="EN-US">bitset</span>对象的初始值时，该值将转化为二进制的位模式。而<span lang="EN-US">bitset</span>对象中的位集作为这种位模式的副本。如果<span lang="EN-US">bitset</span>类型长度大于<span lang="EN-US">unsigned long</span>值的二进制位数，则其余的高阶位置为<span lang="EN-US">0</span>；如果<span lang="EN-US">bitet</span>类型长度小于<span lang="EN-US">unsigned long</span>值的二进制位数，则只使用<span lang="EN-US">unsigned</span>值中的低阶位，超过<span lang="EN-US">bitet</span>类型长度的高阶位将被丢弃。</p><p>在<span lang="EN-US">32</span>位<span lang="EN-US">unsigned long</span>的机器上，十六进制值<span lang="EN-US">0xffff</span>表示为二进制位就是十六个<span lang="EN-US">1</span>和十六个<span lang="EN-US">0</span>（每个<span lang="EN-US">0xf</span>可表示为<span lang="EN-US">1111</span>）。可以用<span lang="EN-US">0xffff</span>初始化<span lang="EN-US">bitset</span>对象：</p><p><span lang="EN-US">// <em>bitvec1_</em> _</span><span lang="EN-US">is smaller than the initializer</span></p><p><span lang="EN-US">bitset&lt;16&gt; bitvec1(0xffff);          // </span><span lang="EN-US">bits 0 … 15 are set to 1</span></p><p><span lang="EN-US">// <em>bitvec2_</em> _</span><span lang="EN-US">same size as initializer</span></p><p><span lang="EN-US">bitset&lt;32&gt; bitvec2(0xffff);          // </span><span lang="EN-US">bits 0 … 15 are set to 1; 16 … 31 are 0</span></p><p><span lang="EN-US">// </span><span lang="EN-US">on a 32-bit machine, bits 0 to 31 initialized from</span>_<span lang="EN-US"> 0xffff</span>_</p><p><span lang="EN-US">bitset&lt;128&gt; bitvec3(0xffff);         // </span><span lang="EN-US">bits 32 through 127 initialized to zero</span></p><p>上面的三个例子中，<span lang="EN-US">0</span>到<span lang="EN-US">15</span>位都置为<span lang="EN-US">1</span>。由于<span lang="EN-US">bitvec1</span>位数少于<span lang="EN-US">unsigned long</span>的位数，因此<span lang="EN-US">bitvec1</span>的初始值的高阶位被丢弃。<span lang="EN-US">bitvec2</span>和<span lang="EN-US">unsigned long</span>长度相同，因此所有位正好放置了初始值。<span lang="EN-US">bitvec3</span>长度大于<span lang="EN-US">32</span>，<span lang="EN-US">31</span>位以上的高阶位就被置为<span lang="EN-US">0</span>。</p><p><span lang="EN-US">2. </span>用<strong><span lang="EN-US">string</span></strong>对象初始化<strong><span lang="EN-US">bitset</span></strong>对象</p><p>当用<span lang="EN-US">string</span>对象初始化<span lang="EN-US">bitset</span>对象时，<span lang="EN-US">string</span>对象直接表示为位模式。从<span lang="EN-US">string</span>对象读入位集的顺序是从右向左：</p><p><span lang="EN-US">string strval(“1100”);</span></p><p><span lang="EN-US">bitset&lt;32&gt; bitvec4(strval);</span></p><p><span lang="EN-US">bitvec4</span>的位模式中第<span lang="EN-US">2</span>和<span lang="EN-US">3</span>的位置为<span lang="EN-US">1</span>，其余位置都为<span lang="EN-US">0</span>。如果<span lang="EN-US">string</span>对象的字符个数小于<span lang="EN-US">bitset</span>类型的长度，则高阶位将置为<span lang="EN-US">0</span>。</p><p><span lang="EN-US">string</span>对象和<span lang="EN-US">bitset</span>对象之间是反向转化的：<span lang="EN-US">string</span>对象的最右边字符（即下标最大的那个字符）用来初始化<span lang="EN-US">bitset</span>对象的低阶位（即下标为<span lang="EN-US">0</span>的位）。当用<span lang="EN-US">string</span>对象初始化<span lang="EN-US">bitset</span>对象时，记住这一差别很重要。</p><p>不一定要把整个<span lang="EN-US">string</span>对象都作为<span lang="EN-US">bitset</span>对象的初始值。相反，可以只用某个子串作为初始值：</p><p><span lang="EN-US">string str(“1111111000000011001101”);</span></p><p><span lang="EN-US">bitset&lt;32&gt; bitvec5(str, 5, 4); // </span><span lang="EN-US">4 bits starting at</span>_<span lang="EN-US"> str[5], 1100</span>_</p><p><span lang="EN-US">bitset&lt;32&gt; bitvec6(str, str.size() - 4);     // </span><span lang="EN-US">use last 4 characters</span></p><p>这里用<span lang="EN-US">str</span>中从<span lang="EN-US">str[5]</span>开始包含四个字符的子串来初始化<span lang="EN-US">bitvec5</span>。照常，初始化<span lang="EN-US">bitset</span>对象时总是从子串最右边结尾字符开始的，<span lang="EN-US">bitvec5</span>的从<span lang="EN-US">0</span>到<span lang="EN-US">3</span>的二进制位置为<span lang="EN-US">1100</span>，其他二进制位都置为<span lang="EN-US">0</span>。如果省略第三个参数则意味着取从开始位置一直到<span lang="EN-US">string</span>末尾的所有字符。本例中，取出<span lang="EN-US">str</span>末尾的四位来对<span lang="EN-US">bitvec6</span>的低四位进行初始化。<span lang="EN-US">bitvec6</span>其余的位初始化为<span lang="EN-US">0</span>。这些初始化过程的图示如下：</p><p>多种<span lang="EN-US">bitset</span>操作（表<span lang="EN-US">3-7</span>）用来测试或设置<span lang="EN-US">bitset</span>对象中的单个或多个二进制位：</p><p>表<span lang="EN-US">3-7  </span><strong><span lang="EN-US">bitset</span></strong>操作</p><div><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td width="138"><span lang="EN-US">b.any()</span></td><td width="414"><span lang="EN-US">b</span>中是否存在置为<span lang="EN-US">1</span>的二进制位？</td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">.</span><span lang="EN-US">none</span><span lang="EN-US">()</span></td><td width="414"><span lang="EN-US">b</span>中不存在置为<span lang="EN-US">1</span>的二进制位吗？</td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">.</span><span lang="EN-US">count</span><span lang="EN-US">()</span></td><td width="414"><span lang="EN-US">b</span>中置为<span lang="EN-US">1</span>的二进制位的个数</td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">.</span><span lang="EN-US">size</span><span lang="EN-US">()</span></td><td width="414"><span lang="EN-US">b</span>中二进制位的个数</td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">[</span><span lang="EN-US">pos</span><span lang="EN-US">]</span></td><td width="414">访问<span lang="EN-US">b</span>中在<span lang="EN-US">pos</span>处的二进制位</td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">.</span><span lang="EN-US">test</span><span lang="EN-US">(</span><span lang="EN-US">pos</span><span lang="EN-US">)</span></td><td width="414"><span lang="EN-US">b</span>中在<span lang="EN-US">pos</span>处的二进制位是否为<span lang="EN-US">1</span>？</td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">.</span><span lang="EN-US">set</span><span lang="EN-US">()</span></td><td width="414">把<span lang="EN-US">b</span>中所有二进制位都置为<span lang="EN-US">1</span></td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">.</span><span lang="EN-US">set</span><span lang="EN-US">(</span><span lang="EN-US">pos</span><span lang="EN-US">)</span></td><td width="414">把<span lang="EN-US">b</span>中在<span lang="EN-US">pos</span>处的二进制位置为<span lang="EN-US">1</span></td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">.</span><span lang="EN-US">reset</span><span lang="EN-US">()</span></td><td width="414">把<span lang="EN-US">b</span>中所有二进制位都置为<span lang="EN-US">0</span></td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">.</span><span lang="EN-US">reset</span><span lang="EN-US">(</span><span lang="EN-US">pos</span><span lang="EN-US">)</span></td><td width="414">把<span lang="EN-US">b</span>中在<span lang="EN-US">pos</span>处的二进制位置为<span lang="EN-US">0</span></td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">.</span><span lang="EN-US">flip</span><span lang="EN-US">()</span></td><td width="414">把<span lang="EN-US">b</span>中所有二进制位逐位取反</td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">.</span><span lang="EN-US">flip</span><span lang="EN-US">(</span><span lang="EN-US">pos</span><span lang="EN-US">)</span></td><td width="414">把<span lang="EN-US">b</span>中在<span lang="EN-US">pos</span>处的二进制位取反</td></tr><tr><td width="138"><span lang="EN-US">b</span><span lang="EN-US">.</span><span lang="EN-US">to</span><span lang="EN-US">_</span><span lang="EN-US">ulong</span><span lang="EN-US">()</span></td><td width="414">用<span lang="EN-US">b</span>中同样的二进制位返回一个<span lang="EN-US">unsigned long</span>值</td></tr><tr><td width="138"><span lang="EN-US">os</span><span lang="EN-US"> &lt;&lt; </span><span lang="EN-US">b</span></td><td width="414">把<span lang="EN-US">b</span>中的位集输出到<span lang="EN-US">os</span>流</td></tr></tbody></table></div><span lang="EN-US">1. </span>测试整个**<span lang="EN-US">bitset</span>**对象<p>如果<span lang="EN-US">bitset</span>对象中有一个或多个二进制位置为<span lang="EN-US">1</span>，则<span lang="EN-US">any</span>操作返回<span lang="EN-US">true</span>，也就是说，其返回值等于<span lang="EN-US">1</span><span lang="EN-US">;</span>相反，如果<span lang="EN-US">bitset</span>对象中的二进制位全为<span lang="EN-US">0</span><span lang="EN-US">,</span>则<span lang="EN-US">none</span>操作返回<span lang="EN-US">true</span>。</p><p><span lang="EN-US">bitset&lt;32&gt; bitvec; // </span><span lang="EN-US">32 bits, all zero</span></p><p><span lang="EN-US">bool is_set = bitvec.any();            // </span><span lang="EN-US">false, all bits are zero</span></p><p><span lang="EN-US">bool is_not_set = bitvec.none();      // </span><span lang="EN-US">true, all bits are zero</span></p><p>如果需要知道置为<span lang="EN-US">1</span>的二进制位的个数，可以使用<span lang="EN-US">count</span>操作，该操作返回置为<span lang="EN-US">1</span>的二进制位的个数：</p><p><span lang="EN-US">size_t bits_set = bitvec.count(); // </span><span lang="EN-US">returns number of bits that are on</span></p><p><span lang="EN-US">count</span>操作的返回类型是标准库中命名为<strong><span lang="EN-US">size_t</span></strong>的类型。<span lang="EN-US">size_t</span>类型定义在<span lang="EN-US">cstddef</span>头文件中，该文件是<span lang="EN-US">C</span>标准库的头文件<span lang="EN-US">stddef.h</span>的<span lang="EN-US">C</span><span lang="EN-US">++</span>版本。它是一个与机器相关的_<span lang="EN-US">unsigned</span>_类型，大小可以保证存储内存中对象。</p><p>与<span lang="EN-US">vector</span>和<span lang="EN-US">string</span>中的<span lang="EN-US">size</span>操作一样，<span lang="EN-US">bitset</span>的<span lang="EN-US">size</span>操作返回<span lang="EN-US">bitset</span>对象中二进制位的个数，返回值的类型是<span lang="EN-US">size</span><span lang="EN-US">_</span><span lang="EN-US">t</span><span lang="EN-US">:</span></p><p><span lang="EN-US">size_t sz = bitvec.size(); // </span><span lang="EN-US">returns </span>_<span lang="EN-US">32</span>_</p><p><span lang="EN-US">2. </span>访问<strong><span lang="EN-US">bitset</span></strong>对象中的位</p><p>可以用下标操作符来读或写某个索引位置的二进制位，同样地，也可以用下标操作符测试给定二进制位的值或设置某个二进制位的值：</p><p><span lang="EN-US">// </span><span lang="EN-US">assign 1 to even numbered bits</span></p><p><span lang="EN-US">for (int index = 0; index != 32; index += 2)</span></p><p><span lang="EN-US">           bitvec[index] = 1;</span></p><p>上面的循环把<span lang="EN-US">bitvec</span>中的偶数下标的位都置为<span lang="EN-US">1</span>。</p><p>除了用下标操作符，还可以用<span lang="EN-US">set</span>、<span lang="EN-US">test</span>和<span lang="EN-US">reset</span>操作来测试或设置给定二进制位的值：</p><p><span lang="EN-US">// </span><span lang="EN-US">equivalent loop using set operation</span></p><p><span lang="EN-US">for (int index = 0; index != 32; index += 2)</span></p><p><span lang="EN-US">           bitvec.set(index);</span></p><p>为了测试某个二进制位是否为<span lang="EN-US">1</span>，可以用<span lang="EN-US">test</span>操作或者测试下标操作符的返回值：</p><p><span lang="EN-US">if (bitvec.test(i))</span></p><p><span lang="EN-US">    // </span><span lang="EN-US">bitvec[i] is on</span></p><p><span lang="EN-US">// </span><span lang="EN-US">equivalent test using subscript</span></p><p><span lang="EN-US">if (bitvec[i])</span></p><p><span lang="EN-US">    // </span><span lang="EN-US">bitvec[i] is on</span></p><p>如果下标操作符测试的二进制位为<span lang="EN-US">1</span>，则返回的测试值的结果为<span lang="EN-US">true</span>，否则返回<span lang="EN-US">false</span>。</p><p><span lang="EN-US">3. </span>对整个<strong><span lang="EN-US">bitset</span></strong>对象进行设置</p><p><span lang="EN-US">set</span>和<span lang="EN-US">reset</span>操作分别用来对整个<span lang="EN-US">bitset</span>对象的所有二进制位全置<span lang="EN-US">1</span>和全置<span lang="EN-US">0</span>：</p><p><span lang="EN-US">bitvec.reset();    // </span><span lang="EN-US">set all the bits to 0.</span></p><p><span lang="EN-US">bitvec.set();      // </span><span lang="EN-US">set all the bits to 1</span></p><p><span lang="EN-US">flip</span>操作可以对<span lang="EN-US">bitset</span>对象的所有位或个别位按位取反：</p><p><span lang="EN-US">bitvec.flip(0);   // </span><span lang="EN-US">reverses value of first bit</span></p><p><span lang="EN-US">bitvec[0].flip(); // </span><span lang="EN-US">also reverses the first bit</span></p><p><span lang="EN-US">bitvec.flip();    // </span><span lang="EN-US">reverses value of all bits</span></p><p><span lang="EN-US">4. </span>获取<span lang="EN-US">bitset</span>对象的值</p><p><span lang="EN-US">to_ulong</span>操作返回一个<span lang="EN-US">unsigned</span><span lang="EN-US"> </span><span lang="EN-US">long</span>值，该值与<span lang="EN-US">bitset</span>对象的位模式存储值相同。仅当<span lang="EN-US">bitset</span>类型的长度小于或等于<span lang="EN-US">unsigned</span><span lang="EN-US"> </span><span lang="EN-US">long</span>的长度时，才可以使用<span lang="EN-US">to_ulong</span>操作：</p><p><span lang="EN-US">unsigned long ulong = bitvec3.to_ulong();</span></p><p><span lang="EN-US">cout &lt;&lt; “ulong = “ &lt;&lt; ulong &lt;&lt; endl;</span></p><p><span lang="EN-US">to_ulong</span>操作主要用于把<span lang="EN-US">bitset</span>对象转到<span lang="EN-US">C</span>风格或标准<span lang="EN-US">C</span><span lang="EN-US">++</span>之前风格的程序上。如果<span lang="EN-US">bitset</span>对象包含的二进制位数超过<span lang="EN-US">unsigned long</span>的长度，将会产生运行时异常。本书将在<span lang="EN-US">6.13</span>节介绍异常（<span lang="EN-US">exception</span>），并在<span lang="EN-US">17.1</span>节中详细地讨论它。</p><p><span lang="EN-US">5. </span>输出二进制位</p><p>可以用输出操作符输出<span lang="EN-US">bitset</span>对象中的位模式：</p><p><span lang="EN-US">bitset&lt;32&gt; bitvec2(0xffff); // </span><span lang="EN-US">bits 0 … 15 are set to 1; 16 … 31 are 0</span></p><p><span lang="EN-US">cout &lt;&lt; “bitvec2: “ &lt;&lt; bitvec2 &lt;&lt; endl;</span></p><p>输出结果为：</p><p><strong><span lang="EN-US">bitvec2: 00000000000000001111111111111111</span></strong></p><p><span lang="EN-US">6. </span>使用位操作符</p><p><span lang="EN-US">bitset</span>类也支持内置的位操作符。<span lang="EN-US">C++</span>定义的这些操作符都只适用于整型操作数，它们所提供的操作类似于本节所介绍的<span lang="EN-US">bitset</span>操作。</p><p>&nbsp;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> bitset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj 2718 Smallest Difference 解题报告</title>
      <link href="/2016/03/08/poj-2718-smallest-difference-e8-a7-a3-e9-a2-98-e6-8a-a5-e5-91-8a/"/>
      <url>/2016/03/08/poj-2718-smallest-difference-e8-a7-a3-e9-a2-98-e6-8a-a5-e5-91-8a/</url>
      
        <content type="html"><![CDATA[<p>链接:<a href="http://poj.org/problem?id=2718" target="_blank" rel="noopener">poj2718</a></p><blockquote><div class="ptt" lang="en-US">Smallest Difference</div><div class="plm"><table align="center"><tbody><tr><td>**Time Limit:** 1000MS</td><td>**Memory Limit:** 65536K</td></tr><tr><td>**Total Submissions:** 7259</td><td>**Accepted:** 1974</td></tr></tbody></table></div><p>Description</p><div class="ptx" lang="en-US"><p>Given a number of distinct decimal digits, you can form one integer by choosing a non-empty subset of these digits and writing them in some order. The remaining digits can be written down in some order to form a second integer. Unless the resulting integer is 0, the integer may not start with the digit 0.</p><p>For example, if you are given the digits 0, 1, 2, 4, 6 and 7, you can write the pair of integers 10 and 2467. Of course, there are many ways to form such pairs of integers: 210 and 764, 204 and 176, etc. The absolute value of the difference between the integers in the last pair is 28, and it turns out that no other pair formed by the rules above can achieve a smaller difference.</p></div><p>Input</p><div class="ptx" lang="en-US">The first line of input contains the number of cases to follow. For each case, there is one line of input containing at least two but no more than 10 decimal digits. (The decimal digits are 0, 1, ..., 9.) No digit appears more than once in one line of the input. The digits will appear in increasing order, separated by exactly one blank space.</div><p>Output</p><div class="ptx" lang="en-US">For each test case, write on a single line the smallest absolute difference of two integers that can be written from the given digits as described by the rules above.</div><p>Sample Input</p><pre class="sio">10 1 2 4 6 7</pre><p>Sample Output</p><pre class="sio">28</pre><p>Source</p><div class="ptx" lang="en-US">[Rocky Mountain 2005](http://poj.org/searchproblem?field=source&amp;key=Rocky+Mountain+2005)</div></blockquote><div class="ptx" lang="en-US">一道题暴露了自己在c++方面字符串处理的薄弱,还有输入输出,在这里顺便先做个总结吧:</div><div class="ptx" lang="en-US">1.首先是所谓io的黑魔法一句话(关闭cin,cout缓冲区,慎用):</div><div class="ptx" lang="en-US"><pre class="lang:c++ decode:true ">ios_base::sync_with_stdio(0);<p>std::ios::sync_with_stdio(false);</p></pre><p></p></div><div class="ptx" lang="en-US"><p>2.输入输出重定向:(最后两句可以不加)</p><pre class="lang:c++ decode:true">freopen("date.in","r",stdin);  //重定向所有标准的输入为文件输入freopen("date.out","w",stdout);//重定向所有标准的输出为文件输出fclose(stdin);fclose(stdout);//输出结束</pre><p>下面是针对online judge 的处理:</p><pre class="lang:c++ decode:true">#ifndef ONLINE_JUDGE     freopen("in.txt","r",stdin);     freopen("out.txt","w",stdout); #endif #ifndef ONLINE_JUDGE     fclose(stdin);     fclose(stdout); #endif</pre></div>其实还可以在自己的编译参数内预先加上定义,比如<pre class="lang:c++ decode:true ">g++ $fullname -o $name -DIamDefine -Wall -std=gnu++0x -static -lm</pre>然后,<pre class="lang:c++ decode:true">#ifdef IamDefine    freopen("data.in","r",stdin);    freopen("data.out","w",stdout);#endif</pre>&nbsp;<p>3.读入整行(去除空格):</p><pre class="lang:c++ decode:true">string line;getline(cin,line);line.erase(remove(line.begin(),line.end(),' '),line.end());</pre><pre class="lang:c++ decode:true ">while ((ch=getchar())!='\n'){    if(ch==' ')continue;    a[l++]=ch;}</pre><p>4.字符串,字符串数组和数字转换处理:</p><pre class="lang:c++ decode:true">char a[10];string temp=string(a);int x=atoi(temp.substr(0,half).c_str());</pre><p>另外还有atoi(),atol(),atof().等等.</p><p>最后提一点,判断字符时记得加  ‘ ‘ !!!  char a[n],   if(a[n]==1)   ???    excuse me???</p><p>AC代码:</p><pre class="lang:c++ decode:true">/** Filename:    poj2718.cpp* Desciption:  穷竭搜索* Created:     2016-03-07**/#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;map&gt;#define INT_MAX 1&lt;&lt;30using namespace std;//typedef long long ll;const int INF=0x7F;int a[10];int l,ans;int getnum(int s,int e){    int res=0;    for (int i = s; i &lt; e; i += 1)    {        res+=a[i];        if(i!=e-1)res*=10;    }    return res;}void solve(){    int half=l/2;    int x,y;    do    {        if((a[0]!=0||half==1)&amp;&amp;(a[half]!=0||l-half==1)){            x=getnum(0,half);            y=getnum(half,l);            ans=min(ans,abs(x-y));        }    } while (next_permutation(a,a+l));}int main(){#ifdef FUCK_PROBLEM    freopen("data.in","r",stdin);    freopen("data.out","w",stdout);#endif    int t;    scanf("%d ",&amp;t);    while (t--)    {        l=0;        ans=100000;        char ch;        while ((ch=getchar())!='\n')        {            if(ch==' ')continue;            a[l++]=ch-'0';        }        solve();        printf("%d\n",ans);    }    return 0;}</pre><p>&nbsp;</p><p>&nbsp;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生日快乐~</title>
      <link href="/2016/03/07/birthday-2016/"/>
      <url>/2016/03/07/birthday-2016/</url>
      
        <content type="html"><![CDATA[<p>在地下室的我突然想起原来今天自己生日啊,今天好像还是啥女生节吧2333333….</p><p>想了想,20年来第一次和出生那年一样,阴历是正月二十九,阳历3月7日,感觉好像很有意义的样子…..</p><p>大白天真的写不出来啥东西,就这么多吧.</p><p>对了!算法竞赛真的很有意思!</p><p>hhhhh<del>神经病一样的我</del>祝你生日快乐~</p><p>以上.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生日 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu 14.04使用cron实现作业自动化</title>
      <link href="/2016/03/04/e5-9c-a8ubuntu-14-04-e4-bd-bf-e7-94-a8cron-e5-ae-9e-e7-8e-b0-e4-bd-9c-e4-b8-9a-e8-87-aa-e5-8a-a8-e5-8c-96/"/>
      <url>/2016/03/04/e5-9c-a8ubuntu-14-04-e4-bd-bf-e7-94-a8cron-e5-ae-9e-e7-8e-b0-e4-bd-9c-e4-b8-9a-e8-87-aa-e5-8a-a8-e5-8c-96/</url>
      
        <content type="html"><![CDATA[<h5 id="Cron是Linux系统中最有用的工具之一，cron作业是在指定时间到来时被调度执行的作业。"><a href="#Cron是Linux系统中最有用的工具之一，cron作业是在指定时间到来时被调度执行的作业。" class="headerlink" title="Cron是Linux系统中最有用的工具之一，cron作业是在指定时间到来时被调度执行的作业。"></a>Cron是Linux系统中最有用的工具之一，cron作业是在指定时间到来时被调度执行的作业。</h5><p>最常见的自动化系统管理和自动维护工作，比如每天发出的按计划完成了备份的通知，或者是按计划定时清理/tmp/目录的通知。还有很多Web应用程序也需要执行定时作业。<br>本文讲述了Cron的工作机制，你可以用cron实现调度作业作业。Cron本身是一个守护进程，在后台运行，通过配置文件“crontab”来根据时间调度指定的作业执行。</p><h2 id="一、启动Cron服务"><a href="#一、启动Cron服务" class="headerlink" title="一、启动Cron服务"></a>一、启动Cron服务</h2><p>基本上所有的Linux发行版在默认情况下都预安装了cron工具。即使未预装cron，也很简单，执行命令手动安装它：</p><pre><code>root@ubuntu-14:~# apt-get install cron `&lt;/pre&gt;接着检查cron服务的状态，默认情况它应该运行于后台。如果它未启动，那么可以手动启动此服务。&lt;pre&gt;`root@ubuntu-14:~# service cron startroot@ubuntu-14:~# service cron status cron start/running, process 1027 `&lt;/pre&gt;## 二、使用Cron帮助如果cron工作正常，那么你可以使用man命令查看其手册描述的详细用法。&lt;pre&gt;`root@ubuntu-14:~# man crontab `&lt;/pre&gt;上面的命令显示了crontab手册描述的使用方法。如果要查看怎样使用cron作业指定的信息，可以这样：&lt;pre&gt;`root@ubuntu-14:~# man 5 crontab `&lt;/pre&gt;![](http://blog.chinaunix.net/attachment/201508/4/301743_1438671703mgJE.png)要退出帮助命令手册的显示，按下q键或h键。![](http://blog.chinaunix.net/attachment/201508/4/301743_1438671714o97X.png)## 三、Crontab命令的用法下面讲述怎样使用crontab命令实现定时调度作业。### 1、对Cron作业进行列表使用以下命令列出当前用户计划的cron作业。&lt;pre&gt;`root@ubuntu-14:~# crontab –l `&lt;/pre&gt;会列出当前用户的所有cron作业，如果想查看其它用户的cron作业，可以使用如下命令：&lt;pre&gt;`root@ubuntu-14:~# crontab –l –u username `&lt;/pre&gt;这会列出指定用户的cron作业。### 2、编辑Cron作业要添加一个新cron作业，或者是编辑现有的cron作业，可以使用如下命令：&lt;pre&gt;`root@ubuntu-14:~# crontab -e `&lt;/pre&gt;### 3、移除Cron作业使用下面的命令移除已经计划的cron作业。&lt;pre&gt;`root@ubuntu-14:~# crontab –r `&lt;/pre&gt;使用下面的命令移除所有已计划的cron作业，且无需再次确认。&lt;pre&gt;`root@ubuntu-14:~# crontab –ir `&lt;/pre&gt;### 4、命令参数-u user：用来设定某个用户的crontab服务；file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。-i：在删除用户的crontab文件时给确认提示。## 四、用Crontab计划任务除了通过配置文件来处理计划cron作业之外，还有别的方法可以做到。如果你查看/etc目录，你会发现有这样的目录：cron.daily、 cron.hourly、cron.monthly等等。因此，把cron脚本放入这些目录中，那么系统会根据这些目录名定时执行这些作业脚本的。### &lt;a name="t10"&gt;&lt;/a&gt;1、Cron配置类型Cron有两种配置文件类型，用于调度自动化任务。1）系统级Crontab这些cron作业被系统服务和关键作业所使用，且需要root级的权限才能执行。可以在/etc/crontab文件中查看系统级的cron作业。![](http://blog.chinaunix.net/attachment/201508/4/301743_1438671736SsE2.png)2）用户级Crontab用户级的cron作业是针对每个用户单独分开的。因此每个用户都可以使用crontab命令创建自己的cron作业，还可以使用以下命令编辑或查看自己的cron作业。&lt;pre&gt;`root@ubuntu-14:~# crontab –e `&lt;/pre&gt;![](http://blog.chinaunix.net/attachment/201508/4/301743_1438671748xis6.png)选择编辑器后，你可以配置新cron作业了。## 五、用Crontab调度作业可以使用指定的语法调度cron作业，而且还有速记缩写命令，使的管理cron作业很简单。Crontab语法如下：&lt;pre&gt;`* * * * * command to be executed- - - - - -| | | | | || | | | | --- 预执行的命令| | | | ----- 表示星期0～7（其中星期天可以用0或7表示）| | | ------- 表示月份1～12| | --------- 表示日期1～31| ----------- 表示小时1～23（0表示0点）------------- 表示分钟1～59 每分钟用*或者 */1表示 `&lt;/pre&gt;## 六、新Cron作业配置实例现在你已经熟悉了crontab命令、语法及cron作业的类型，现在可以创建一些作业计划进行测试。可以使用crontab –e 命令添加。### 1、每分钟运行的计划作业下面的例子，创建一个cron作业，它每分钟输出文本“test cron job to execute every minute”并把文本发送到user@vexxhost.com邮箱。首先用crontab命令编辑&lt;pre&gt;`root@ubuntu-14:~# crontab –e `&lt;/pre&gt;写入以下的脚本&lt;pre&gt;`SHELL=/bin/bashHOME=/MAILTO=”user@vexxhost.com”#This is a comment* * * * * echo 'test cron job to execute every minute':wq!    保存并退出 `&lt;/pre&gt;![](http://blog.chinaunix.net/attachment/201508/4/301743_1438671765TMfD.png)一旦保存了此cron脚本文件，就可以把它添加到计划的作业中。### 2、在指定时间调度Cron job作业假如想调度某个cron作业，让它在“每个星期四的下午7:00”运行，那么crontab脚本应该这样：&lt;pre&gt;`00 19 * * 4 sh /root/test.sh `&lt;/pre&gt;再把它添加到调度作业中。&lt;pre&gt;`root@ubuntu-14:~# crontab -ecrontab: installing new crontab </code></pre><p>上面脚本中的“00 19”指的是下午7点，“4”指的是星期四。</p><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>可以看到，用crontab实现自动化任务是很容易的，而且它可以按分钟、小时、周、月、星期来执行任务。除此之外，Linux还有一个at命令，它适用于处理只执行一次的任务，且需要先运行atd服务。<br>其次要注意环境变量的问题。有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在 crontab文件中没有配置环境变量引起的。在crontab文件中定义多个调度任务时，需要特别注环境变量的设置，因为我们手动执行某个任务时，是在 当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任 务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。<br>还要注意清理系统用户的邮件日志。每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。<br>最后要注意，新创建的cron作业，不会马上执行，至少要过2分钟才执行。如果重启cron服务则会马上执行。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu14.04配置msmtp和mutt</title>
      <link href="/2016/03/04/msmtp-mutt/"/>
      <url>/2016/03/04/msmtp-mutt/</url>
      
        <content type="html"><![CDATA[<div><h2 id="由于需要备份网站数据库，想要通过定时执行脚本发送打包好的数据库备份邮件到自己的邮箱，虽然说vps支持配置sendmail，还是太麻烦了，遂利用msmtp-mutt的形式用163邮箱（需开启SMTP服务，登录网页版163邮箱设置即可）"><a href="#由于需要备份网站数据库，想要通过定时执行脚本发送打包好的数据库备份邮件到自己的邮箱，虽然说vps支持配置sendmail，还是太麻烦了，遂利用msmtp-mutt的形式用163邮箱（需开启SMTP服务，登录网页版163邮箱设置即可）" class="headerlink" title="由于需要备份网站数据库，想要通过定时执行脚本发送打包好的数据库备份邮件到自己的邮箱，虽然说vps支持配置sendmail，还是太麻烦了，遂利用msmtp+mutt的形式用163邮箱（需开启SMTP服务，登录网页版163邮箱设置即可）"></a>由于需要备份网站数据库，想要通过定时执行脚本发送打包好的数据库备份邮件到自己的邮箱，虽然说vps支持配置sendmail，还是太麻烦了，遂利用msmtp+mutt的形式用163邮箱（需开启SMTP服务，登录网页版163邮箱设置即可）</h2><h2 id="1-配置msmtp和mutt（sudo-apt-get-install安装即可）"><a href="#1-配置msmtp和mutt（sudo-apt-get-install安装即可）" class="headerlink" title="1.配置msmtp和mutt（sudo apt-get install安装即可）"></a>1.配置msmtp和mutt（sudo apt-get install安装即可）</h2></div><h3 id="1-1配置msmtp"><a href="#1-1配置msmtp" class="headerlink" title="1.1配置msmtp"></a><strong>1.1配置msmtp</strong></h3><div>创建msmtp日志文件“.msmtp.log”，在.msmtprc当中指定，注意这里的"."表示是隐藏文件，内容为空。</div><div><div class="cnblogs_code"><pre class="">$ sudo vim ~/.msmtp.log</pre></div>配置msmtp配置文件“.msmtprc”<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码">![复制代码](http://common.cnblogs.com/images/copycode.gif)</a></span></div><pre class="">#Accounts will inherit settings from this sectiondefaults# A first gmail addressaccount        gmailhost           smtp.gmail.comport           587from           username@gmail.comuser           username@gmail.compassword       passwordtls_trust_file /etc/ssl/certs/ca-certificates.crt# A second gmail addressaccount    gmail2 : gmailfrom       username2@gmail.comuser       username2@gmail.compassword   password2# A freemail serviceaccount    freemailhost       smtp.freemail.examplefrom       joe_smith@freemail.exampleuser       joe.smithpassword   secret# A provider's serviceaccount   providerhost      smtp.provider.example# A 126 emaliaccount    126host       smtp.126.comport       25from       aaa@126.comauth       logintls        offuser       aaa@126.compassword   passwordlogfile    ~/.msmtp.log# Set a default accountaccount default : 126</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码">![复制代码](http://common.cnblogs.com/images/copycode.gif)</a></span></div></div>配置.msmtprc权限，以下设置是只给.msmtprc的所属用户读和写的权限，其他人没有任何权限</div><div><div class="cnblogs_code"><pre>$ sudo chmod 600 .msmtprc --设置配置文件权限</pre></div>如果要查看.msmtprc的所属用户，可以通过以下命令查看，我们可以看到，.msmtprc这个文件所属用户是root用户，组是root组。<div class="cnblogs_code"><pre>root@BJCGNMON01:~# ls -l .msmtprc -rw------- 1 root root 251 Feb 17 10:22 .msmtprc</pre></div>以上设定很重要，使用什么账户去调用msmtp，那么该账户就要有对 .msmtprc文件的读写权限。</div><h3 id="1-2配置mutt"><a href="#1-2配置mutt" class="headerlink" title="1.2配置mutt"></a><strong>1.2配置mutt</strong></h3><div>mutt配置分为两种，看你是想全局生效还是某一单一用户生效。如果是系统全局设置，修改/etc/Muttrc这个配置文件；如果使用某个系统用户，可以需要修改“~/.muttrc”这个文件。</div><div><div class="cnblogs_code"><pre class="">#sudo vim ~/.muttrcset sendmail="/usr/bin/msmtp"set use_from=yesset realname="name"set from=aaa@126.comset envelope_from=yes</pre></div>我只想给我当前root用户配置mutt功能，所以使用后者。修改完毕以后也需要查看这个文件的读写权限，当前是root账号要使用mutt功能，那么这个.muttrc就必须对于root账户有读写权限。查看权限的方法如下：<div class="cnblogs_code"><pre>root@BJCGNMON01:~# ls -l .muttrc -rw-r--r-- 1 root root 122 Feb 17 10:27 .muttrc</pre></div><h2 id="2-测试smtp的信息"><a href="#2-测试smtp的信息" class="headerlink" title="2.测试smtp的信息"></a><strong>2.测试smtp的信息</strong></h2></div><h3 id="2-1msmtp测试"><a href="#2-1msmtp测试" class="headerlink" title="2.1msmtp测试"></a><strong>2.1msmtp测试</strong></h3><p>测试命令：</p><div><div class="cnblogs_code"><pre>测试配置文件：msmtp -P测试smtp服务器：msmtp -S</pre></div>还有一种方法是在配置msmtp之前就可以进行测试，比如测试163的smtp的命令如下：</div><div><div class="cnblogs_code"><pre class="">bitnami@linux:~$ msmtp --host=smtp.163.com --serverinfoSMTP server at smtp.163.com (smtp.163.gslb.netease.com [220.181.12.18]), port 25:    163.com Anti-spam GT for Coremail System (163com[20121016])Capabilities:    PIPELINING:        Support for command grouping for faster transmission    STARTTLS:        Support for TLS encryption via the STARTTLS command    AUTH:        Supported authentication methods:        PLAIN LOGINThis server might advertise more or other capabilities when TLS is active.</pre></div>从返回信息中我们可以看到，这个smtp是支持TLS的，验证方式支持 PLAIN 和 LOGIN</div><h3 id="2-2测试邮件"><a href="#2-2测试邮件" class="headerlink" title="2.2测试邮件"></a><strong>2.2测试邮件</strong></h3><div>命令行输入：</div><div><div class="cnblogs_code"><pre class="">echo "test" |mutt -s "my_first_test" aaa@126.com</pre></div>如果是**多个收件人**，那么使用**空格或者逗号分开**即可，测试命令：<div class="cnblogs_code"><pre class="">echo "test" |mutt -s "my_first_test" aaa@126.com bbb@163.comecho "test" |mutt -s "my_first_test" aaa@126.com,bbb@163.com</pre><pre class="">mutt -s "Title: mail test"  111111111@qq.com</pre><pre class="">mutt -s "Title: mail test" -a /home/test.tar.gz test@gmail.com &lt; /home/mailmessage.txt</pre>-s后面是邮件的标题.<p>-a后面是发送的附件.</p><p><a href="mailto:test@gmail.com" target="_blank" rel="noopener">test@gmail.com</a> 表示发送邮件的目的地址.</p><p>&lt; /home/mailmessage.txt 表示读取mailmessage.txt以邮件正文形式发送.</p><p>如果收到邮件就表示安装成功了，下一步配置备份脚本和定时任务。</p><pre class="lang:sh decode:true">    #!/bin/bash    #定义数据库的名字    DataBakName=Data_$(date +"%Y%m%d").tar.gz    WebBakName=Web_$(date +%Y%m%d).tar.gz    #删除本地3天前的数据    rm -rf /home/backup/Data_$(date -d -3day +"%Y%m%d").tar.gz    rm -rf /home/backup/Web_$(date -d -3day +"%Y%m%d").tar.gz    #导出mysql数据库    /usr/local/mysql/bin/mysqldump -u root -ppassword dbname &gt; /home/backup/seeke.sql    #压缩数据库    tar zcf /home/backup/$DataBakName /home/backup/*.sql    #删除sql文件    rm -rf /home/backup/*.sql    #压缩网站数据    tar zcvf /home/backup/$WebBakName /home/wwwroot/    延时10秒钟    sleep 10s    #备份数据到邮箱    /usr/bin/mutt -s "Title:web+mysql backup" test@qq.com -a /home/backup/$DataBakName -a /home/backup/$WebBakName &lt;/home/backup/backup.txt    #注意防火墙是否打开了25端口，要不然邮件发不出去.    #mutt参数中 -s 指定发送邮件的标题    #mutt参数中 -a 指定邮件包含的附件，如果多个附件，每个附件都需要一个 -a 参数    #mutt参数中 &lt;/root/backup.txt 指定邮件的内容为backup.txt的内容</pre><p>&nbsp;</p></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stay Hungry, Stay Foolish.</title>
      <link href="/2016/02/26/stay-hungry-stay-foolish/"/>
      <url>/2016/02/26/stay-hungry-stay-foolish/</url>
      
        <content type="html"><![CDATA[<p>原文为繁体，作者Jamie，地址：<a href="http://mrjamie.cc/2011/09/16/stay-hungry-stay-foolish/" target="_blank" rel="noopener">http://mrjamie.cc/2011/09/16/stay-hungry-stay-foolish/</a></p><p><img src="http://mrjamie.cc/wp-content/uploads/2011/09/steve-jobs-and-robert-noyce-550x422.jpg" alt="" title="steve-jobs-and-robert-noyce"></p><div>&gt; 2005 年，Steve Jobs 在 Stanford 毕业典礼上演讲，最后送给了在场的年轻人一句「Stay Hungry, Stay Foolish.」这个演讲后来被广为流传，各种中译版也纷纷出现，有些人把这句话翻译为「求知若饥，虚心若愚」，《Cheers 杂志》则把这句话翻译为「饥渴求知，虚怀若愚」。无论如何，我认为这些都是错误的解读。&gt; &gt; &gt; 什么叫 Hungry？&gt; &gt; &gt; 美国人不会用 hungry 来形容对于知识的追求。对知识，他们用的是「好奇」(curious)这个词。一个求知若渴的人，叫做「intellectually curious」或是「eager to learn」，但绝对不会是「intellectually hungry」，也极少是「hungry to learn」。&gt; &gt; &gt; 用到 hungry 的时候，针对的「成功」，也就是「hungry for success」。所以 Steve Jobs 的「Stay Hungry」，根本不是叫你去求「知」的意思，他真正想说的，是要你去不停的寻找成功，永远不知道满足。为什么？因为创业者最常犯的错误，除了做出没人要的东西之外，就是太快满足于初期的成功，接着开始以为自己是神，再也不会失败。&gt; &gt; &gt; 杨致远就是最好的例子，90 年代末期 Yahoo 叱咤网络圈后，他开始陶醉于成功之中，成天打高尔夫球、旅行，结果呢？快转十年之后，Yahoo 现在的市值等于他们手中持有的阿里巴巴股票，也就是说这家母公司是一毛不值。为什么？因为他失去了 hungry。&gt; &gt; &gt; 回头看 Steve Jobs，过去 14 年来，他像一头肌饿的猛兽，永远不会满足，Mac、iPod、iPhone、iPad 一招接一招，不停直捣对手的心脏，如果不是因为健康状况，他大概永远没有停歇的一天，这，就是 hungry，这，就是 Fox写的「稀有的猪」。&gt; &gt; &gt; 什么叫 Foolish？&gt; &gt; &gt; 美国人也不会用 foolish 来形容虚心，虚心叫做「humble」、叫做「be a good listener」、叫做「be open to new ideas」。而 fool，根本不是「虚心的人」，fool 是「笨蛋」的意思。&gt; &gt; &gt; 「You gotta be a fool to believe that will work.」(你一定是个白痴才会相信那东西会成功)是所有的创业者最常听到的，而 Steve Jobs 想告诉你的，就是别理他们，继续当你的傻瓜。因为要革命，你就注定要在众人的误会中孤独的前进。&gt; &gt; &gt; 所以各位创业者，记住 Steve Jobs 的 Stay Hungry, Stay Foolish.&gt; &gt; &gt; Stay Hungry, Stay Foolish.</div><div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 14.04 Virtual Judge 的搭建</title>
      <link href="/2016/02/23/ubuntu-14-04-virtual-judge-e7-9a-84-e6-90-ad-e5-bb-ba/"/>
      <url>/2016/02/23/ubuntu-14-04-virtual-judge-e7-9a-84-e6-90-ad-e5-bb-ba/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感觉去各大oj上刷题有点麻烦,搭建一个oj感觉没有那个需要,考虑到virtual judge的方便,准备搭建一个个人vjudge,网上的资料不多,泛滥的大量博文中,信息相当杂,精品相当少 大多数都是转载来转载去,内容相同还没有营养,搭建Vjudge方面的博文更是稀少,但是最后还是折腾出来了.</p></blockquote><h2 id="1-前期准备工作"><a href="#1-前期准备工作" class="headerlink" title="1. 前期准备工作"></a>1. 前期准备工作</h2><h3 id="1-1-一个Linux系统"><a href="#1-1-一个Linux系统" class="headerlink" title="1.1 一个Linux系统"></a>1.1 一个Linux系统</h3><p>因为现场赛的缘故，我一直使用的都是乌邦图。<br>这里我测试用的是ubuntu14.04 Desktop 64bit ,当然选择Server会更好一些.<br>系统的安装不再赘述，作为服务器请选用Server版本。</p><h3 id="1-2-更新源"><a href="#1-2-更新源" class="headerlink" title="1.2 更新源"></a>1.2 更新源</h3><p>在搭建环境之前，请确保你的源是有效的，速度是给力的，<br>建议选择一个国内的源14.04 LTS 更新源</p><pre class="lang:sh decode:true">sudo gedit /etc/apt/sources.list 将原来的源覆盖并保存最后执行 sudo apt-get update 更新源</pre><h3 id="1-3-必要文件准备"><a href="#1-3-必要文件准备" class="headerlink" title="1.3 必要文件准备"></a>1.3 必要文件准备</h3><p>我们需要下载这几个文件（部分链接需要翻墙才能访问）：</p><p><code>&lt;span class="lit"&gt;1&lt;/span&gt;&lt;span class="pun"&gt;．*.&lt;/span&gt;&lt;span class="pln"&gt;sql https&lt;/span&gt;&lt;span class="pun"&gt;:&lt;/span&gt;&lt;span class="com"&gt;//gist.github.com/trcnkq/a3cf7004759d41d79eb7&lt;/span&gt;</code></p><p><code>&lt;span class="lit"&gt;2&lt;/span&gt;&lt;span class="pun"&gt;．&lt;/span&gt;&lt;span class="pln"&gt;http_client&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;json https&lt;/span&gt;&lt;span class="pun"&gt;:&lt;/span&gt;&lt;span class="com"&gt;//gist.github.com/trcnkq/7a5deff639ff99475138&lt;/span&gt;</code></p><p><code>&lt;span class="lit"&gt;3&lt;/span&gt;&lt;span class="pun"&gt;．&lt;/span&gt;&lt;span class="pln"&gt;remote_accounts&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;json https&lt;/span&gt;&lt;span class="pun"&gt;:&lt;/span&gt;&lt;span class="com"&gt;//gist.github.com/trcnkq/e9dac7eea72d2b781949&lt;/span&gt;</code></p><p><code>&lt;span class="lit"&gt;4&lt;/span&gt;&lt;span class="pun"&gt;．&lt;/span&gt;&lt;span class="kwd"&gt;virtual&lt;/span&gt;&lt;span class="pln"&gt; judge&lt;/span&gt;&lt;span class="pun"&gt;源文件&lt;/span&gt;&lt;span class="pln"&gt; https&lt;/span&gt;&lt;span class="pun"&gt;:&lt;/span&gt;&lt;span class="com"&gt;//github.com/trcnkq/virtual-judge&lt;/span&gt;</code></p><p>如果无法翻墙或者链接失效，请用我的百度云链接： <a href="http://pan.baidu.com/s/1skxS5dj" target="_blank" rel="noopener">Vjudge搭建</a> (这里面包含了之后会用到的一系列文件,嫌麻烦可以都下载下来)</p><h2 id="2-必要环境搭建"><a href="#2-必要环境搭建" class="headerlink" title="2. 必要环境搭建"></a>2. 必要环境搭建</h2><div class="md-section-divider"></div><h3 id="2-1-JDK的安装和配置"><a href="#2-1-JDK的安装和配置" class="headerlink" title="2.1 JDK的安装和配置"></a>2.1 JDK的安装和配置</h3><p>首先需要下载JDK，地址：<a href="https://jdk7.java.net/download.html" target="_blank" rel="noopener">https://jdk7.java.net/download.html</a> (之前的云盘链接内有64位的,请认准这个jdk版本)<br>注意系统是32位还是64位</p><p><code>&lt;span class="lit"&gt;1.&lt;/span&gt;&lt;span class="pun"&gt;)&lt;/span&gt; &lt;span class="pun"&gt;解压下载的文件&lt;/span&gt;</code></p><pre class="lang:sh decode:true">tar -xzvf jdk1.7.0_80</pre><p>2.) 移动文件夹到指定目录下</p><pre class="lang:sh decode:true">sudo mkdir /usr/lib/jvmsudo mv jdk1.7.0_80/ /usr/lib/jvm/</pre><p>3.) 设置环境变量</p><pre class="lang:sh decode:true">sudo vi /etc/profile//在本篇文章中,建议用vi或者vim编辑文档,用gedit会报错(虽然好像没什么影响...)</pre><p>在文件最后加入如下内容：</p><pre class="lang:sh decode:true">export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_80export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/libexport PATH=${JAVA_HOME}/bin:$PATH</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/1.png" alt=""></p><p>4.) 使修改生效：</p><pre class="lang:sh decode:true">sudo source /etc/profile//如果提示source command not found//请执行以下两步://sudo -s//source /etc/profile</pre><p>这时候在终端输入 java –version 查看当前 JDK 版本<br>至此，JDK 配置完成</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/2.png" alt=""></p><h3 id="2-2-Redis的安装和配置"><a href="#2-2-Redis的安装和配置" class="headerlink" title="2.2 Redis的安装和配置"></a>2.2 Redis的安装和配置</h3><pre class="lang:sh decode:true">    1.)    下载安装Redis:    wget http://download.redis.io/releases/redis-2.8.9.tar.gz      tar xvzf redis-2.8.9.tar.gz      cd redis-2.8.9/      make    sudo make install      2.)    配置init脚本：    wget https://github.com/ijonas/dotfiles/raw/master/etc/init.d/redis-server    wget https://github.com/ijonas/dotfiles/raw/master/etc/redis.conf    sudo mv redis-server /etc/init.d/redis-server    sudo chmod +x /etc/init.d/redis-server    sudo mv redis.conf /etc/redis.conf     3.)    初始化用户和日志路径    第一次启动Redis前，建议为Redis单独建立一个用户，并新建data和日志文件夹    sudo useradd redis    sudo mkdir -p /var/lib/redis    sudo mkdir -p /var/log/redis    sudo chown redis.redis /var/lib/redis    sudo chown redis.redis /var/log/redis    4.) 设置开机自动启动，关机自动关闭    update-rc.d redis-server defaults    5.) 启动Redis：    /etc/init.d/redis-server start</pre><h3 id="2-3-Maven3的安装和配置"><a href="#2-3-Maven3的安装和配置" class="headerlink" title="2.3 Maven3的安装和配置"></a>2.3 Maven3的安装和配置</h3><pre class="lang:sh decode:true ">    1.)    通过apt-get安装Maven3    ubuntu12.04之后，可直接用apt-get来获得    sudo apt-get install maven -y</pre><p>安装完后，sudo su 进入root<br>用 mvn –v 查看一下Maven的版本，如下图：<br>安装完毕后，默认的JDK版本可能会被更改。<br>因为Maven3安装的同时把openjdk也一并安装了。</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/3.png" alt="此处输入图片的描述"></p><pre class="lang:sh decode:true">    2.)  修改系统默认的jdk    update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_80/bin/java 300    update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.7.0_80/bin/javac 300    update-alternatives --config java     //请选择jdk1.7.0_80版本的jdk    update-alternatives --config javac</pre><p>使用java -version或者mvn -v再次查看,JDK版本已更改</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/4.png" alt="此处输入图片的描述"></p><h3 id="2-4-Tomcat7的安装和配置"><a href="#2-4-Tomcat7的安装和配置" class="headerlink" title="2.4 Tomcat7的安装和配置"></a>2.4 Tomcat7的安装和配置</h3><pre class="lang:sh decode:true">    1.)    apt-get安装tomcat7：    sudo apt-get install tomcat7 -y      tomcat7默认会被安装在目录/var/lib/tomcat7/下,    安装完之后在浏览器下输入localhost:8080查看是否安装成功    如果出现下图，即为安装成功</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/5.png" alt=""></p><pre class="lang:sh decode:true">    2.)    安装tomcat7-admin    安装成后，我们还需要安装一个tomcat7-admin    sudo apt-get install tomcat7-admin</pre><pre class="lang:sh decode:true">    3.)    修改账户：    安装完毕之后，我们进入tomcat7的conf目录下修改tomcat-users.xml文件    cd /var/lib/tomcat7/conf/    gedit tomcat-users.xml     我这里用的是    &lt;role rolename="manager-gui"/&gt;    &lt;role rolename="admin-gui"/&gt;    &lt;user username="tomcat" password="tomcat" roles="manager-gui,admin-gui"/&gt;</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/6.png" alt="此处输入图片的描述"></p><pre class="lang:sh decode:true">    4.)    重启tomcat:    sudo /etc/init.d/tomcat7 restart</pre><p>重新在浏览器打开tomcat界面<br>点击manager webapp，用刚才我们建立的用户登陆</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/8.png" alt="此处输入图片的描述"></p><p><code>&lt;span class="lit"&gt;5.&lt;/span&gt;&lt;span class="pun"&gt;)&lt;/span&gt; &lt;span class="pun"&gt;修改&lt;/span&gt;&lt;span class="pln"&gt;JDK&lt;/span&gt;&lt;span class="pun"&gt;默认的&lt;/span&gt;&lt;span class="pln"&gt;JDK&lt;/span&gt;&lt;span class="pun"&gt;版本&lt;/span&gt;</code></p><ol><li><code>&lt;span class="pun"&gt;检查&lt;/span&gt;&lt;span class="pln"&gt; tomcat7 &lt;/span&gt;&lt;span class="pun"&gt;的&lt;/span&gt; &lt;span class="typ"&gt;Server&lt;/span&gt; &lt;span class="typ"&gt;Information&lt;/span&gt;&lt;span class="pun"&gt;，版本可能不是我们自己的&lt;/span&gt;&lt;span class="pln"&gt;jdk&lt;/span&gt;&lt;span class="pun"&gt;版本。&lt;/span&gt;</code></li><li><code>&lt;span class="pun"&gt;这里我们要修改&lt;/span&gt;&lt;span class="pln"&gt;tomcat&lt;/span&gt;&lt;span class="pun"&gt;使用的&lt;/span&gt;&lt;span class="pln"&gt;JDK&lt;/span&gt;&lt;span class="pun"&gt;版本，这步很重要，否则会出现很多问题&lt;/span&gt;</code><br><img src="http://7xi3e9.com1.z0.glb.clouddn.com/9.png" alt="此处输入图片的描述"><pre class="lang:sh decode:true">    sudo gedit /etc/default/tomcat7加入如下内容：JAVA_HOME=/usr/lib/jvm/jdk1.7.0_80再次重启tomcat7：sudo /etc/init.d/tomcat7 restart</pre><img src="http://7xi3e9.com1.z0.glb.clouddn.com/11.png" alt="此处输入图片的描述"></li></ol><p>OK， tomcat7的JDK版本修改完毕。</p><h3 id="2-5-Mysql的安装"><a href="#2-5-Mysql的安装" class="headerlink" title="2.5 Mysql的安装"></a>2.5 Mysql的安装</h3><pre class="lang:sh decode:true ">    sudo apt-get install mysql-server -y    安装过程中会要求你输入数据库的密码，这里我直接用的123456，连续输入两次即可。    进入数据库测试一下    mysql -u root -p</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/12.png" alt="此处输入图片的描述"></p><p>至此，搭建 Virtual Judge 所需的所有环境，都已搭建完毕！</p><h2 id="3-工程代码实施"><a href="#3-工程代码实施" class="headerlink" title="3. 工程代码实施"></a>3. 工程代码实施</h2><p>准备好四个文件，就是一开始下载的那四个：<br><img src="http://7xi3e9.com1.z0.glb.clouddn.com/14.png" alt="此处输入图片的描述"></p><div class="md-section-divider"></div><h3 id="3-1-Vjudge的打包"><a href="#3-1-Vjudge的打包" class="headerlink" title="3.1 Vjudge的打包"></a>3.1 Vjudge的打包</h3><pre class="lang:sh decode:true ">进入virtual-judge-master 目录：cd virtual-judge-master/用 Maven 将 Virtual Judge 打包:mvn clean package</pre><p>里面会有一个vjudge.war文件，就是我们打包完成的 Virtual Judge。<br>把这个war文件拷到tomcat7的webapps目录下。</p><p>打包的过程可能会相当长，特别是网络不好的情况下，万一掉包了，非常蛋疼，如果你不想等待太久，可以直接下载此文件，在文章开头的百度云网盘链接里.</p><p>放到webapps目录后，会自动生成一个vjudge文件夹，如果没有生成，你也可以自行解压。</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/16.png" alt="此处输入图片的描述"></p><h3 id="3-2-remote-accounts-json文件的编辑"><a href="#3-2-remote-accounts-json文件的编辑" class="headerlink" title="3.2 remote_accounts.json文件的编辑"></a>3.2 remote_accounts.json文件的编辑</h3><p>把各个OJ的提交账号添加到remote_accounts.json里。</p><h3 id="3-3-config-properties文件的编辑"><a href="#3-3-config-properties文件的编辑" class="headerlink" title="3.3 config.properties文件的编辑"></a>3.3 config.properties文件的编辑</h3><p>如不需要代理或VPN访问国外OJ，保留http_client.json里面的[“direct”]即可。</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/17.png" alt="此处输入图片的描述"></p><div class="md-section-divider"></div><h3 id="3-4-vjudge的简单部署"><a href="#3-4-vjudge的简单部署" class="headerlink" title="3.4 vjudge的简单部署"></a>3.4 vjudge的简单部署</h3><p>把 remote_accounts.json 和 http_client.json 两个文件放在指定的文件夹下<br>这里我放在 /var/lib/tomcat7/webapps/vjudge/ 目录下</p><pre class="lang:sh decode:true">    sudo mv http_client.json /var/lib/tomcat7/webapps/vjudge/    sudo mv remote_accounts.json /var/lib/tomcat7/webapps/vjudge/</pre><p>更改/webapps/vjudge/WEB-INF/classes/的目录下config.properties文件<br>将remote_accounts.json和http_client.json的绝对路径改为正确的路径</p><pre class="lang:sh decode:true">    cd /var/lib/tomcat7/webapps/vjudge/WEB-INF/classes/    sudo gedit config.properties</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/18.png" alt="此处输入图片的描述"></p><p>PS:如果你的数据库密码不是123456，那么上面的root密码你也需要修改，默认为123456</p><h3 id="3-5-vhoj数据库的建立"><a href="#3-5-vhoj数据库的建立" class="headerlink" title="3.5 vhoj数据库的建立"></a>3.5 vhoj数据库的建立</h3><p>在mysql中新建一个数据库，名字为：vhoj，<br>并把表vhoj_20141109.sql导入(可能我的版本略微旧了点)。</p><pre class="lang:sh decode:true ">    mysql -u root -p      create database vhoj;      exit;</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/19.png" alt="此处输入图片的描述"></p><pre class="lang:sh decode:true ">mysql -h localhost -u root -p vhoj &lt; vhoj_20141109.sql</pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/20.png" alt="此处输入图片的描述"></p><pre class="lang:sh decode:true ">sudo /etc/init.d/tomcat7 restart</pre><pre><code>    最后，重启tomcat7，进入manager    查看Application，可以看到vjudge已经处于running状态了。</code></pre><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/21.png" alt="此处输入图片的描述"></p><h2 id="4-大功告成的Vjudge"><a href="#4-大功告成的Vjudge" class="headerlink" title="4. 大功告成的Vjudge"></a>4. 大功告成的Vjudge</h2><p>在地址栏输入localhost:8080/vjudge，进入搭建成功的vjudge:</p><p><img src="http://7xi3e9.com1.z0.glb.clouddn.com/22.png" alt="此处输入图片的描述"></p><p><strong>到此为止，Virtual Judge 终于搭建成功，just enjoy it！</strong></p><p>参考文献:<a href="https://www.zybuluo.com/BIGBALLON/note/76405" target="_blank" rel="noopener">Virtual Judge 环境搭建与配置</a></p><p>下一篇推荐:wordpress博客与virtual judge共存配置</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hdoj4514 设计风景线 解题报告</title>
      <link href="/2016/02/19/hdoj4514-e8-ae-be-e8-ae-a1-e9-a3-8e-e6-99-af-e7-ba-bf-e8-a7-a3-e9-a2-98-e6-8a-a5-e5-91-8a/"/>
      <url>/2016/02/19/hdoj4514-e8-ae-be-e8-ae-a1-e9-a3-8e-e6-99-af-e7-ba-bf-e8-a7-a3-e9-a2-98-e6-8a-a5-e5-91-8a/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4514" target="_blank" rel="noopener">hdoj4514</a></p><blockquote><h1 id="湫湫系列故事——设计风景线"><a href="#湫湫系列故事——设计风景线" class="headerlink" title="湫湫系列故事——设计风景线"></a>湫湫系列故事——设计风景线</h1><p>**Time Limit: 6000/3000 MS (Java/Others)    Memory Limit: 65535/32768 K (Java/Others)</p><p>Total Submission(s): 3730    Accepted Submission(s): 654</p><p>**</p><div class="panel_title" align="left">Problem Description</div><div class="panel_content">　　随着杭州西湖的知名度的进一步提升，园林规划专家湫湫希望设计出一条新的经典观光线路，根据老板马小腾的指示，新的风景线最好能建成环形，如果没有条件建成环形，那就建的越长越好。<p>现在已经勘探确定了n个位置可以用来建设，在它们之间也勘探确定了m条可以设计的路线以及他们的长度。请问是否能够建成环形的风景线？如果不能，风景线最长能够达到多少？</p><p>其中，可以兴建的路线均是双向的，他们之间的长度均大于0。</p></div><p></p><p>&nbsp;</p><div class="panel_title" align="left">Input</div><div class="panel_content">　　测试数据有多组，每组测试数据的第一行有两个数字n, m，其含义参见题目描述；<p>接下去m行，每行3个数字u v w，分别代表这条线路的起点，终点和长度。<strong>[Technical Specification]</strong></p><p>1. n&lt;=100000</p><p>2. m &lt;= 1000000</p><p>3. 1&lt;= u, v &lt;= n</p><p>4. w &lt;= 1000</p></div><p>&nbsp;</p><div class="panel_title" align="left">Output</div><div class="panel_content">　　对于每组测试数据，如果能够建成环形（并不需要连接上去全部的风景点），那么输出YES，否则输出最长的长度，每组数据输出一行。</div><p>&nbsp;</p><div class="panel_title" align="left">Sample Input</div><div class="panel_content"><div>3 3 1 2 1 2 3 1 3 1 1</div></div><p>&nbsp;</p><div class="panel_title" align="left">Sample Output</div><div class="panel_content"><div>YES</div></div></blockquote><div class="panel_content"><div>整整一个晚上加一个下午还没解决的题Orz....</div><div>整整提交了20次都是MLE的题Orz.....</div><div>判断是否能形成环形的路线用并查集就可以,这部分处理起来不难;</div><div>至于求最长路,一开始是想着修改**Dijkstra**算法并利用标记数组,仔细想想,因为是求最长路径,这样的贪心算法是不正确的.</div><div>于是在查找资料的时候学习了SPFA算法,(已经添加了相关介绍在本blog的[图论总结](http://jingwei.site/map-algorithm/)中),输入时记录每个点的出度,(由于是无向图每次将两个点的出度都加1),然后如果判出不含环,遍历所有出度为1的点,分别以它们为起点进行SPFA,这个思路是没错的,时间也是够的,但是会造成MLE....至今不知为何,,,,</div><div></div><div>最后还是在学姐的指导下了解到这是求树的直径....之前完全没有接触过嘛...</div>&gt; <div>树的直径是指树的最长简单路。求法: 两遍BFS :先任选一个起点BFS找到最长路的终点，再从终点进行BFS，则第二次BFS找到的最长路即为树的直径；&gt; &gt; 原理: 设起点为u,第一次BFS找到的终点v一定是树的直径的一个端点&gt; &gt; 证明: 1) 如果u 是直径上的点，则v显然是直径的终点(因为如果v不是的话，则必定存在另一个点w使得u到w的距离更长，则于BFS找到了v矛盾)&gt; &gt; 2) 如果u不是直径上的点，则u到v必然于树的直径相交(反证),那么交点到v 必然就是直径的后半段了&gt; &gt; 所以v一定是直径的一个端点，所以从v进行BFS得到的一定是直径长度</div><div>但是这题还需要注意一个问题,可能存在多个联通分量,需要分别求出最长路.</div><div>然而,依旧MLE....%&gt;_&lt;%....坐等更新:</div><div>和学姐折腾了一整个晚上,终于是解决了,思路就是并查集判环和求树的直径,但是由于题目对内存限制相当严格,g++提交到杭电一直MLE...最后用C++提交就过了...按照学姐的话来说,杭电的g++版本有点老,,,,g++和c++对vector数组的底层实现不同,我的代码应该只超了一点点内存.....Orz.....</div><div>下面是AC代码:</div><div><pre class="lang:c++ decode:true ">#include&lt;iostream&gt;#include&lt;memory.h&gt;#include&lt;stdio.h&gt;#include &lt;vector&gt;#include&lt;queue&gt;using namespace std;const int max_N=100000+7;int f[max_N],rk[max_N];struct edge{    int to,len;};edge e1,e2;vector&lt;edge&gt; G[max_N];void init(int n){    for (int i = 0; i &lt; n; i += 1)    {        f[i]=i;        rk[i]=0;    }}int find(int x){    int r=x;        while(f[r]!=r){        r=f[r];    }    int t=x,j;    while (t!=r)    {        j=f[t];        f[j]=r;        t=j;    }    return r;}void unite(int x,int y){    x=find(x);    y=find(y);    if(x==y)return;    if(rk[x]&gt;rk[y]){        f[y]=x;    }else{        f[x]=y;        if(rk[x]==rk[y])rk[y]++;    }}bool same(int x,int y){    return find(x)==find(y);}int n,m,a,b,c;bool bl=false;<p>int ans=0,d[max_N],maxd;<br>bool vis[max_N],visal[max_N];<br>queue&lt;int&gt; que;<br>int bfs(int sp){<br>    que.push(sp);<br>    memset(vis,false,n<em>sizeof(bool));<br>    memset(d,0,n</em>sizeof(bool));<br>    maxd=0;<br>    int an=sp;<br>    vis[sp]=true;visal[sp]=true;d[sp]=0;<br>    while (!que.empty())<br>    {<br>        int x=que.front();que.pop();<br>        for (unsigned int i = 0; i &lt; G[x].size(); i += 1)<br>        {<br>            edge s=G[x][i];<br>            int y=s.to,c=s.len;<br>            if(!vis[y]){<br>                que.push(y);<br>                vis[y]=visal[y]=true;<br>                d[y]=d[x]+c;<br>                if(maxd&lt;d[y]){<br>                    maxd=d[y];<br>                    an=y;<br>                }<br>            }<br>        }<br>    }<br>    return an;<br>}<br>int main()<br>{<br>    while (scanf(“%d%d”,&amp;n,&amp;m)!=EOF)<br>    {<br>        bl=false;<br>        init(n);<br>        for (int i = 0; i &lt; max_N; i += 1)G[i].clear();<br>        for (int i = 0; i &lt; m; i += 1)<br>        {<br>            scanf(“%d%d%d”,&amp;a,&amp;b,&amp;c);<br>            a=a-1;<br>            b=b-1;<br>            e1.to=a;e1.len=c;<br>            e2.to=b;e2.len=c;<br>            G[a].push_back(e2);<br>            G[b].push_back(e1);<br>            if(!bl){<br>                if(same(a,b))bl=true;<br>                else unite(a,b);<br>            }<br>        }<br>        if(bl)printf(“YES\n”);<br>        else{<br>            ans=0;<br>            memset(visal,0,sizeof(bool)*n);<br>            for (int i = 0; i &lt; n; i += 1)<br>            {<br>                if(!visal[i]){<br>                    int s=bfs(i);<br>                    s=bfs(s);<br>                    if(maxd&gt;ans)ans=maxd;<br>                }<br>            }<br>            printf(“%d\n”,ans);<br>        }<br>    }<br>    return 0;<br>}<br></p></pre><br>&nbsp;<p></p></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 树 </tag>
            
            <tag> 树的直径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM动态规划总结</title>
      <link href="/2016/02/18/acm-e5-8a-a8-e6-80-81-e8-a7-84-e5-88-92-e6-80-bb-e7-bb-93/"/>
      <url>/2016/02/18/acm-e5-8a-a8-e6-80-81-e8-a7-84-e5-88-92-e6-80-bb-e7-bb-93/</url>
      
        <content type="html"><![CDATA[<p>转载请注明出处，谢谢。   <a href="http://blog.csdn.net/cc_again?viewmode=list" target="_blank" rel="noopener">http://blog.csdn.net/cc_again?viewmode=list</a>          ———-  Accagain  2014年5月15日</p><p><strong>动态规划一直是ACM竞赛中的重点，同时又是难点，因为该算法时间效率高，代码量少，多元性强，主要考察思维能力、建模抽象能力、灵活度。</strong></p><p>本人动态规划博客地址：<a href="http://blog.csdn.net/cc_again/article/category/1261899" target="_blank" rel="noopener">http://blog.csdn.net/cc_again/article/category/1261899</a></p><hr><p><strong>动态规划</strong>（<span class="LangWithName"><a href="http://zh.wikipedia.org/wiki/%E8%8B%B1%E8%AF%AD" target="_blank" rel="noopener" title="英语">英语</a>：<span lang="en">Dynamic programming</span></span>，DP）是一种在<a href="http://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6" target="_blank" rel="noopener" title="数学">数学</a>、<a href="http://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="noopener" title="计算机科学">计算机科学</a>和<a href="http://zh.wikipedia.org/wiki/%E7%BB%8F%E6%B5%8E%E5%AD%A6" target="_blank" rel="noopener" title="经济学">经济学</a>中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。 动态规划常常适用于有<a href="http://zh.wikipedia.org/w/index.php?title=%E9%87%8D%E5%8F%A0%E5%AD%90%E9%97%AE%E9%A2%98&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener" title="重叠子问题（页面不存在）">重叠子问题</a>和<a href="http://zh.wikipedia.org/w/index.php?title=%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener" title="最优子结构（页面不存在）">最优子结构</a>性质的问题，动态规划方法所耗时间往往远少于朴素解法。</p><p>动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再合并子问题的解以得出原问题的解。 通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量： 一旦某个给定子问题的解已经算出，则将其<a href="http://zh.wikipedia.org/w/index.php?title=%E8%AE%B0%E5%BF%86%E5%8C%96&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener" title="记忆化（页面不存在）">记忆化</a>存储，以便下次需要同一个子问题解之时直接查表。 这种做法在重复子问题的数目关于输入的规模呈<a href="http://zh.wikipedia.org/wiki/%E6%8C%87%E6%95%B8%E5%A2%9E%E9%95%B7" target="_blank" rel="noopener" title="指数增长">指数增长</a>时特别有用。</p><p><strong>动态规划问题满足三大重要性质</strong></p><p><strong>最优子结构性质：</strong>如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。</p><p><strong>子问题重叠性质：</strong>子 问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问 题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从 而获得较高的效率。</p><p><a href="http://baike.baidu.com/view/2862466.htm" target="_blank" rel="noopener"><strong>无后效性</strong></a>：将各阶段按照一定的次序排列好之后，对于某个给定的阶段状态，它以前各阶段的状态无法直接影响它未来的决策，而只能通过当前的这个状态。换句话说，每个状态都是过去历史的一个完整总结。这就是无后向性，又称为无后效性。</p><hr><p><strong>动态规划分类有很多划分方法，网上有很多是按照状态来分，分为一维、二维、区间、树形等等。我觉得还是按功能即解决的问题的类型以及难易程度来分比较好，下面按照我自己的理解和归纳，把动态规划的分类如下：</strong></p><p><strong>一、简单基础dp</strong></p><p><strong>这类dp主要是一些状态比较容易表示，转移方程比较好想，问题比较基本常见的。主要包括递推、背包、LIS（最长递增序列），LCS（最长公共子序列），下面针对这几种类型，推荐一下比较好的学习资料和题目。</strong></p><p><strong>1、递推：</strong></p><p><strong>递推一般形式比较单一，从前往后，分类枚举就行。</strong></p><p>简单:</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2084" target="_blank" rel="noopener">hdu 2084 数塔</a> 简单从上往下递推</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2018" target="_blank" rel="noopener">hdu 2018 母牛的故事</a> 简单递推计数</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2044" target="_blank" rel="noopener">hdu 2044 一只小蜜蜂…</a> 简单递推计数（Fibonacci）</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2041" target="_blank" rel="noopener">hdu 2041 超级楼梯</a> Fibonacci</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2050" target="_blank" rel="noopener">hdu 2050 折线分割平面</a> 找递推公式</p><p>推荐：</p><p><a href="http://blog.csdn.net/cc_again/article/details/25691925" target="_blank" rel="noopener">CF 429B B.Working out</a> 四个角递推</p><p><a href="http://blog.csdn.net/cc_again/article/details/24841249" target="_blank" rel="noopener">zoj 3747 Attack on Titans</a> 带限制条件的计数递推dp</p><p><a href="http://blog.csdn.net/cc_again/article/details/24844911" target="_blank" rel="noopener">uva 10328 Coin Toss</a> 同上题</p><p><a href="http://blog.csdn.net/cc_again/article/details/11856847" target="_blank" rel="noopener">hdu 4747 Mex </a></p><p><a href="http://blog.csdn.net/cc_again/article/details/9918313" target="_blank" rel="noopener">hdu 4489 The King’s Ups and Downs</a></p><p><a href="http://blog.csdn.net/cc_again/article/details/10858813" target="_blank" rel="noopener">hdu 4054 Number String</a></p><p><strong>2、背包</strong></p><p>经典的背包九讲：<a href="http://love-oriented.com/pack/" target="_blank" rel="noopener">http://love-oriented.com/pack/</a></p><p>推荐博客：<a href="http://blog.csdn.net/woshi250hua/article/details/7636866" target="_blank" rel="noopener">http://blog.csdn.net/woshi250hua/article/details/7636866</a></p><p><strong>主要有0-1背包、完全背包、分组背包、多重背包。</strong></p><p>简单：</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2955" target="_blank" rel="noopener">hdu 2955 Robberies</a> 01背包</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1864" target="_blank" rel="noopener">hdu 1864 最大报销额</a> 01背包</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2602" target="_blank" rel="noopener">hdu 2602 Bone Collector</a> 01背包</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2844" target="_blank" rel="noopener">hdu 2844 Coins</a> 多重背包</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2159" target="_blank" rel="noopener">hdu 2159 FATE</a> 完全背包</p><p>推荐：</p><p><a href="http://blog.csdn.net/cc_again/article/details/22728273" target="_blank" rel="noopener">woj 1537 A Stone-I</a>  转化成背包</p><p><a href="http://blog.csdn.net/cc_again/article/details/22728273" target="_blank" rel="noopener">woj 1538 B Stone-II</a> 转化成背包</p><p><a href="http://blog.csdn.net/cc_again/article/details/12200343" target="_blank" rel="noopener">poj 1170 Shopping Offers</a> 状压+背包</p><p><a href="http://blog.csdn.net/cc_again/article/details/25984915" target="_blank" rel="noopener">zoj 3769 Diablo III</a> 带限制条件的背包</p><p><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3638" target="_blank" rel="noopener">zoj 3638 Fruit Ninja </a>背包的转化成组合数学</p><p><a href="http://blog.csdn.net/cc_again/article/details/11518329" target="_blank" rel="noopener">hdu 3092 Least common multiple</a> 转化成完全背包问题</p><p><a href="http://blog.csdn.net/cc_again/article/details/25426159" target="_blank" rel="noopener">poj 1015 Jury Compromise</a> 扩大区间+输出路径</p><p><a href="http://blog.csdn.net/cc_again/article/details/10162471" target="_blank" rel="noopener">poj 1112 Team Them UP</a> 图论+背包</p><p><strong>3、LIS</strong></p><p><strong>最长递增子序列，朴素的是o(n^2)算法，二分下可以写成o(nlgn)：维护一个当前最优的递增序列——找到恰好大于它更新</strong></p><p>简单：</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1003" target="_blank" rel="noopener">hdu 1003 Max Sum</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1087" target="_blank" rel="noopener">hdu 1087 Super Jumping!</a></p><p>推荐：</p><p><a href="http://blog.csdn.net/cc_again/article/details/18372521" target="_blank" rel="noopener">uva 10635 Prince and Princess</a> LCS转化成LIS</p><p><a href="http://blog.csdn.net/cc_again/article/details/11821361" target="_blank" rel="noopener">hdu 4352 XHXJ’s LIS</a>　数位dp+LIS思想</p><p><a href="http://blog.csdn.net/cc_again/article/details/12113809" target="_blank" rel="noopener">srm div2 1000 </a> 状态压缩+LIS</p><p><a href="http://blog.csdn.net/cc_again/article/details/12208725" target="_blank" rel="noopener">poj 1239 Increasing Sequence</a> 两次dp</p><p><strong>4、LCS</strong></p><p>最长公共子序列，通常o(n^2)的算法</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1503" target="_blank" rel="noopener">hdu 1503 Advanced Fruits</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1159" target="_blank" rel="noopener">hdu 1159 Common Subsequence</a></p><p><a href="http://blog.csdn.net/cc_again/article/details/8554454" target="_blank" rel="noopener">uva 111 History Grading</a> 要先排个序</p><p><a href="http://poj.org/problem?id=1080" target="_blank" rel="noopener">poj 1080 Human Gene Functions</a></p><p><strong>二、区间dp</strong></p><p>推荐博客：<a href="http://blog.csdn.net/woshi250hua/article/details/7969225" target="_blank" rel="noopener">http://blog.csdn.net/woshi250hua/article/details/7969225</a></p><p><strong>区间dp,一般是枚举区间，把区间分成左右两部分，然后求出左右区间再合并。</strong></p><p><a href="http://blog.csdn.net/cc_again/article/details/10169643" target="_blank" rel="noopener">poj 1141 Brackets Sequence</a> 括号匹配并输出方案</p><p><a href="http://blog.csdn.net/cc_again/article/details/11852367" target="_blank" rel="noopener">hdu 4745 Two Rabbits</a> 转化成求回文串</p><p><a href="http://blog.csdn.net/cc_again/article/details/10977751" target="_blank" rel="noopener">zoj 3541 The Last Puzzle </a> 贪心+区间dp</p><p><a href="http://poj.org/problem?id=2955" target="_blank" rel="noopener">poj 2955 Brackets</a></p><p><a href="http://blog.csdn.net/woshi250hua/article/details/7973824" target="_blank" rel="noopener">hdu 4283 You Are the One</a>  常见写法</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2476" target="_blank" rel="noopener">hdu 2476 String Printer</a></p><p><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3537" target="_blank" rel="noopener">zoj 3537 Cake</a></p><p><a href="http://codeforces.com/problemset/problem/149/D" target="_blank" rel="noopener">CF 149D Coloring Brackets</a></p><p><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3469" target="_blank" rel="noopener">zoj 3469 Food Delivery</a></p><p><strong>三、树形dp</strong></p><p>比较好的博客：<a href="http://blog.csdn.net/woshi250hua/article/details/7644959" target="_blank" rel="noopener">http://blog.csdn.net/woshi250hua/article/details/7644959</a></p><p>一篇论文：<a href="http://doc.baidu.com/view/f3b19d0b79563c1ec5da710e.html" target="_blank" rel="noopener">http://doc.baidu.com/view/f3b19d0b79563c1ec5da710e.html</a></p><p><strong>树形dp是建立在树这种数据结构上的dp,一般状态比较好想，通过dfs维护从根到叶子或从叶子到根的状态转移。</strong></p><p><a href="http://blog.csdn.net/cc_again/article/details/12011757" target="_blank" rel="noopener">hdu 4123 Bob’s Race</a> 二分+树形dp+单调队列</p><p><a href="http://blog.csdn.net/cc_again/article/details/8911480" target="_blank" rel="noopener">hdu 4514</a>  求树的直径</p><p><a href="http://blog.csdn.net/cc_again/article/details/13004997" target="_blank" rel="noopener">poj 1655 Balancing Act</a></p><p><a href="http://blog.csdn.net/cc_again/article/details/11407157" target="_blank" rel="noopener">hdu 4714 Tree2Cycle</a> 思维</p><p><a href="http://blog.csdn.net/cc_again/article/details/10312393" target="_blank" rel="noopener">hdu 4616 Game</a></p><p><a href="http://blog.csdn.net/cc_again/article/details/12060191" target="_blank" rel="noopener">hdu 4126 Genghis Kehan the Conqueror</a> MST+树形dp 比较经典</p><p><a href="http://blog.csdn.net/cc_again/article/details/12092021" target="_blank" rel="noopener">hdu 4756 Install Air Conditioning</a> MST+树形dp 同上</p><p><a href="http://blog.csdn.net/cc_again/article/details/12346065" target="_blank" rel="noopener">hdu 3660 Alice and Bob’s Trip</a> 有点像对抗搜索</p><p><a href="http://blog.csdn.net/cc_again/article/details/10226673" target="_blank" rel="noopener">CF 337D Book of Evil </a> 树直径的思想 思维</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2196" target="_blank" rel="noopener">hdu 2196 Computer</a> 搜两遍</p><p><strong>四、数位dp</strong></p><p>推荐一篇论文：<a href="http://wenku.baidu.com/view/d2414ffe04a1b0717fd5dda8.html" target="_blank" rel="noopener">http://wenku.baidu.com/view/d2414ffe04a1b0717fd5dda8.html</a></p><p><strong>数位dp,主要用来解决统计满足某类特殊关系或有某些特点的区间内的数的个数，它是按位来进行计数统计的，可以保存子状态，速度较快。数位dp做多了后，套路基本上都差不多，关键把要保存的状态给抽象出来，保存下来。</strong></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2089" target="_blank" rel="noopener">hdu 2089 不要62</a> 简单数位dp</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3709" target="_blank" rel="noopener">hdu 3709 Balanced Number</a> 比较简单</p><p><a href="http://blog.csdn.net/cc_again/article/details/25053071" target="_blank" rel="noopener">CF 401D Roman and Numbers</a> 状压+数位dp</p><p><a href="http://blog.csdn.net/cc_again/article/details/8872355" target="_blank" rel="noopener">hdu 4398 X mod f(x)</a> 把模数加进状态里面</p><p><a href="http://blog.csdn.net/cc_again/article/details/11747555" target="_blank" rel="noopener">hdu 4734 F(x) </a> 简单数位dp</p><p><a href="http://blog.csdn.net/cc_again/article/details/12257445" target="_blank" rel="noopener">hdu 3693 Math teacher’s homework</a> 思维变换的数位dp</p><p><a href="http://blog.csdn.net/cc_again/article/details/11821361" target="_blank" rel="noopener">hdu 4352 XHXJ’s LIS</a>　数位dp+LIS思想</p><p><a href="http://blog.csdn.net/cc_again/article/details/8815450" target="_blank" rel="noopener">CF 55D Beautiful Numbers</a>  比较巧妙的数位dp</p><p><a href="http://blog.csdn.net/cc_again/article/details/8872073" target="_blank" rel="noopener">hdu 3565 Bi-peak Numbers</a> 比较难想</p><p><a href="http://blog.csdn.net/cc_again/article/details/8877603" target="_blank" rel="noopener">CF 258B Little Elephant and Elections</a> 数位dp+组合数学+逆元</p><p><strong>五、概率(期望) dp</strong></p><p>推荐博客：<a href="http://www.cnblogs.com/kuangbin/archive/2012/10/02/2710606.html" target="_blank" rel="noopener">http://www.cnblogs.com/kuangbin/archive/2012/10/02/2710606.html</a></p><p>推荐博客：<a href="http://blog.csdn.net/woshi250hua/article/details/7912049" target="_blank" rel="noopener">http://blog.csdn.net/woshi250hua/article/details/7912049</a></p><p>推荐论文：</p><p><a href="http://wenku.baidu.com/view/1c41152de2bd960590c677a8.html" target="_blank" rel="noopener">《走进概率的世界》</a></p><p><a href="http://wenku.baidu.com/view/90adb02acfc789eb172dc8a8.html" target="_blank" rel="noopener">《浅析竞赛中一类数学期望问题的解决方法》</a></p><p><a href="http://wenku.baidu.com/view/56147518a8114431b90dd81e.html" target="_blank" rel="noopener">《有关概率和期望问题的研究》</a></p><p>*<em>一般来说概率正着推，期望逆着推。有环的一般要用到高斯消元解方程。<span class="comment">期望可以分解成多个子期望的加权和，权为子期望发生的概率，即 E(aA+bB+…) = aE(A) + bE(B) +…</span> *</em></p><p><a href="http://blog.csdn.net/cc_again/article/details/8974277" target="_blank" rel="noopener">ural 1776 Anniversiry Firework</a> 比较基础</p><p><a href="http://blog.csdn.net/cc_again/article/details/10493543" target="_blank" rel="noopener">hdu 4418 Time travel </a> 比较经典BFS+概率dp+高斯消元</p><p><a href="http://blog.csdn.net/cc_again/article/details/10456837" target="_blank" rel="noopener">hdu 4586 Play the Dice</a> 推公式比较水</p><p><a href="http://blog.csdn.net/cc_again/article/details/9926597" target="_blank" rel="noopener">hdu 4487 Maximum Random Walk</a></p><p><a href="http://blog.csdn.net/cc_again/article/details/12408505" target="_blank" rel="noopener">jobdu 1546 迷宫问题</a> 高斯消元+概率dp+BFS预处理</p><p><a href="http://blog.csdn.net/cc_again/article/details/11536347" target="_blank" rel="noopener">hdu 3853 LOOPS</a> 简单概率dp</p><p><a href="http://blog.csdn.net/cc_again/article/details/11554945" target="_blank" rel="noopener">hdu 4405 Aeroplane chess</a> 简单概率dp,比较直接</p><p><a href="http://blog.csdn.net/cc_again/article/details/10431451" target="_blank" rel="noopener">hdu 4089 Activation</a> 比较经典</p><p><a href="http://blog.csdn.net/cc_again/article/details/9936197" target="_blank" rel="noopener">poj 2096 Collecting Bugs</a> 题目比较难读懂</p><p><a href="http://blog.csdn.net/cc_again/article/details/11532517" target="_blank" rel="noopener">zoj 3640 Help me Escape</a> 从后往前，比较简单</p><p><a href="http://blog.csdn.net/cc_again/article/details/11544753" target="_blank" rel="noopener">hdu 4034 Maze</a> 经典好题，借助树的概率dp</p><p><a href="http://blog.csdn.net/cc_again/article/details/11099749" target="_blank" rel="noopener">hdu 4336 Card Collector</a> 状态压缩+概率dp</p><p><a href="http://blog.csdn.net/cc_again/article/details/10442931" target="_blank" rel="noopener">hdu 4326 Game </a> 这个题状态有点难抽象</p><p><strong>六、状态压缩dp</strong></p><p>这类问题有<strong>TSP</strong>、<strong>插头dp</strong>等。</p><p>推荐论文：<a href="http://wenku.baidu.com/view/ce445e4f767f5acfa1c7cd51.html" target="_blank" rel="noopener">http://wenku.baidu.com/view/ce445e4f767f5acfa1c7cd51.html</a></p><p>推荐博客：<a href="http://blog.csdn.net/sf____/article/details/15026397" target="_blank" rel="noopener">http://blog.csdn.net/sf____/article/details/15026397</a></p><p>推荐博客：<a href="http://www.notonlysuccess.com/index.php/plug_dp/" target="_blank" rel="noopener">http://www.notonlysuccess.com/index.php/plug_dp/</a></p><p><a href="http://blog.csdn.net/cc_again/article/details/9393357" target="_blank" rel="noopener">hdu 1693 Eat the Trees  插头dp</a></p><p><a href="http://blog.csdn.net/cc_again/article/details/9984961" target="_blank" rel="noopener">hdu 4568 Hunter</a> 最短路+TSP</p><p><a href="http://blog.csdn.net/cc_again/article/details/9954921" target="_blank" rel="noopener">hdu 4539 </a> 插头dp</p><p><a href="http://blog.csdn.net/cc_again/article/details/9060019" target="_blank" rel="noopener">hdu 4529 状压dp</a></p><p><a href="http://poj.org/problem?id=1185" target="_blank" rel="noopener">poj 1185 炮兵阵地</a></p><p><a href="http://blog.csdn.net/cc_again/article/details/9390475" target="_blank" rel="noopener">poj 2411 Mandriann’s Dream</a> 轮廓线dp</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3811" target="_blank" rel="noopener">hdu 3811 Permutation</a></p><p><a href="http://poj.org/problem?id=1038" target="_blank" rel="noopener">poj 1038</a></p><p><a href="http://poj.org/problem?id=2441" target="_blank" rel="noopener">poj 2441</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2167" target="_blank" rel="noopener">hdu 2167</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4026" target="_blank" rel="noopener">hdu 4026</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4281" target="_blank" rel="noopener">hdu 4281</a></p><p><strong>七、数据结构优化的dp</strong></p><p><strong>有时尽管状态找好了，转移方程的想好了，但时间复杂度比较大，需要用数据结构进行优化。常见的优化有二进制优化、单调队列优化、斜率优化、四边形不等式优化等。</strong></p><p><strong>1、二进制优化</strong></p><p>主要是优化背包问题，背包九讲里面有介绍，比较简单，这里只附上几道题目。</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1059" target="_blank" rel="noopener">hdu 1059 Diving</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1059" target="_blank" rel="noopener">hdu 1171 Big Event in Hdu</a></p><p><a href="http://poj.org/problem?id=1048" target="_blank" rel="noopener">poj 1048 Follow My Magic</a></p><p><strong>2、单调队列优化</strong></p><p>推荐论文：<a href="http://wenku.baidu.com/view/4d23b4d128ea81c758f578ae.html" target="_blank" rel="noopener">http://wenku.baidu.com/view/4d23b4d128ea81c758f578ae.html</a></p><p>推荐博客：<a href="http://www.cnblogs.com/neverforget/archive/2011/10/13/ll.html" target="_blank" rel="noopener">http://www.cnblogs.com/neverforget/archive/2011/10/13/ll.html</a></p><p><a href="http://blog.csdn.net/cc_again/article/details/9328243" target="_blank" rel="noopener">hdu 3401 Trade </a></p><p><a href="http://blog.csdn.net/cc_again/article/details/9335795" target="_blank" rel="noopener">poj 3245 Sequece Partitioning</a> 二分+单调队列优化</p><p><strong>3、斜率优化</strong></p><p>推荐论文：<a href="http://wenku.baidu.com/view/ef259400bed5b9f3f90f1c3a.html" target="_blank" rel="noopener">用单调性优化动态规划</a></p><p>推荐博客：<a href="http://www.cnblogs.com/ronaflx/archive/2011/02/05/1949278.html" target="_blank" rel="noopener">http://www.cnblogs.com/ronaflx/archive/2011/02/05/1949278.html</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3507" target="_blank" rel="noopener">hdu 3507 Print Article</a></p><p><a href="http://poj.org/problem?id=1260" target="_blank" rel="noopener">poj 1260 Pearls</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2829" target="_blank" rel="noopener">hdu 2829 Lawrence</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2993" target="_blank" rel="noopener">hdu 2993 Max Average Problem</a></p><p><strong>4、四边形不等式优化</strong></p><p>推荐博客：<a href="http://www.cnblogs.com/ronaflx/archive/2011/03/30/1999764.html" target="_blank" rel="noopener">http://www.cnblogs.com/ronaflx/archive/2011/03/30/1999764.html</a></p><p>推荐博客：<a href="http://www.cnblogs.com/zxndgv/archive/2011/08/02/2125242.html" target="_blank" rel="noopener">http://www.cnblogs.com/zxndgv/archive/2011/08/02/2125242.html</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2952" target="_blank" rel="noopener">hdu 2952 Counting Sheep</a></p><p><a href="http://poj.org/problem?id=1160" target="_blank" rel="noopener">poj 1160 Post Office</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3480" target="_blank" rel="noopener">hdu 3480 Division</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3516" target="_blank" rel="noopener">hdu 3516 Tree Construction</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2829" target="_blank" rel="noopener">hdu 2829 Lawrence</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图算法</title>
      <link href="/2016/02/17/map-algorithm/"/>
      <url>/2016/02/17/map-algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>图由顶点（vertex，node）和边（edge）组成<br>顶点:图中的数据元素称为顶点.<br>有向图:有方向的图叫有向图.<br>无向图:没有方向的图叫无向图.<br>完全图:有n(n-1)/2条边的无向图称为完全图.<br>有向完全图:具有n(n-1)条弧的有向图称为有向完全图.<br>稀疏图:有很少条边或弧的图称为稀疏图,反之称为稠密图.<br>权:与图的边或弧相关的数叫做权(weight).<br>DAG：没有圈的有向图.</p><h2 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h2><p>1.邻接矩阵<br>2.邻接表<br>邻接表的实现：</p><pre class="minimize:true lang:c++ decode:true">#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;vector&gt;using namespace std;const int MAX_V=10000;vector&lt;int&gt; G[MAX_V];//struct edge{      //边上有属性的情况//    int to,cost;//};//vector&lt;edge&gt; G[MAX_V];int main(){    int V,E,a,b;    scanf("%d%d",&amp;V,&amp;E);    for (int i = 0; i &lt; E; i += 1)    {        scanf("%d%d",&amp;a,&amp;b);        G[a].push_back(b);//        如果是无向图，加上下面这条//        G[b].push_back(a);    }//    图的操作//    。//    。//    。    return 0;}</pre><h3 id="二分图搜索：（DFS）"><a href="#二分图搜索：（DFS）" class="headerlink" title="二分图搜索：（DFS）"></a>二分图搜索：（DFS）</h3><pre class="minimize:true lang:c++ decode:true">#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;vector&gt;using namespace std;const int MAX_V=10000;vector&lt;int&gt; G[MAX_V];int color[MAX_V];bool dfs(int v,int c){    color[v]=c;    for (int i = 0; i &lt; G[v].size(); i += 1)    {        if(color[G[v][i]]==c)return false;        if(color[G[v][i]]==0&amp;&amp;!dfs(G[v][i],-c))return false;    }    return true;}int main(){    int V,E,a,b;    scanf("%d%d",&amp;V,&amp;E);    for(int i=0;i&lt;V;i++)color[i]=0;  //初始化    for (int i = 0; i &lt; E; i += 1)    {        scanf("%d%d",&amp;a,&amp;b);        G[a].push_back(b);        G[b].push_back(a);    }    if(!dfs(0,1)){        printf("Not A Bipartite Graph");    }    else{        printf("YES");    }    return 0;}</pre><h2 id="单源最短路问题"><a href="#单源最短路问题" class="headerlink" title="单源最短路问题"></a>单源最短路问题</h2><p>松弛操作：</p><pre class="lang:c++ decode:true">void relax(int from,int to,int cost){   //一般不需要单独编写    if(d[from]!=INF&amp;&amp;d[to]&gt;d[from]+cost){        d[to]=d[from]+cost;    }}</pre><h3 id="1-Bellman-Ford算法"><a href="#1-Bellman-Ford算法" class="headerlink" title="1.Bellman-Ford算法"></a>1.Bellman-Ford算法</h3><p>适用条件&amp;范围：<br>a) 单源最短路径(从源点s到其它所有顶点v);<br>b) 有向图&amp;无向图(无向图可以看作(u,v),(v,u)同属于边集E的有向图);<br>c) 边权可正可负(如有负权回路输出错误提示);<br>d) 差分约束系统;</p><pre class="minimize:true lang:c++ decode:true ">void short_path(int s){    for(int i=0;i&lt;V;i++)D[i]=INF;    D[s]=0;    while(true){        bool update=false;        for (int i = 0; i &lt; E; i += 1)        {            edge e=es[i];            if(D[e.from]!=INF&amp;&amp;D[e.to]&gt;D[e.from]+e.cost){                D[e.to]=D[e.from]+e.cost;                update=true;            }        }        if(!update)break;    }}</pre><p>如果在图中不存在从s可达的负圈，那么最短路不会经过同一个顶点两次，（也就是说，最多通过|V|-1条边），while（1）的循环最多执行|V|-1次，因此，复杂度为O（|V|*|E|）。反之，如果存在从s可达的负圈，那么在第|V|次循环时也会更新d的值，因此可以检测负圈。如果一开始对所有的顶点i，都把d[i]初始化为0,那么可以查找出所有的负圈.</p><pre class="lang:c++ decode:true">bool find_negative_loop(){    memset(D,0,sizeof(D));    for (int i = 0; i &lt; V; i += 1)    {        for (int j = 0; j &lt; E; j += 1)        {            edge e=es[j];            if(D[e.to]&gt;D[e.from]+e.cost){                D[e.to]=D[e.from]+e.cost;                //如果第V次依旧更新了,则存在负圈                if(i==V-1)return true;            }        }    }    return false;}</pre><p>&nbsp;</p><h3 id="2-Dijkstra算法"><a href="#2-Dijkstra算法" class="headerlink" title="2.Dijkstra算法"></a>2.Dijkstra算法</h3><p>适用条件&amp;范围：<br>a) 单源最短路径(从源点s到其它所有顶点v);<br>b) 有向图&amp;无向图(无向图可以看作(u,v),(v,u)同属于边集E的有向图)<br>c) 所有边权非负(任取(i,j)∈E都有Wij≥0);</p><pre class="minimize:true lang:c++ decode:true">struct edge{    int to,cost;};typedef pair&lt;int,int&gt; P;   //first是最短距离,second是顶点的编号.int V;const int MAX_V=100000,INF=INT32_MAX;vector&lt;edge&gt; G[MAX_V];int d[MAX_V];void dijkstra(int s){        //通过指定greater参数,堆按照first从小到达排列    priority_queue&lt; P,vector&lt;P&gt;,greater&lt;P&gt; &gt; que;    fill(d,d+V,INF);    d[s]=0;    que.push(P(0,s));    while (!que.empty())    {        P p=que.top();que.pop();        int v=p.second;        if(p.first&gt;d[v])continue;        for (unsigned int i = 0; i &lt; G[v].size(); i += 1)        {            edge e=G[v][i];            if (d[e.to]&gt;d[v]+e.cost)            {                d[e.to]=d[v]+e.cost;                que.push(P(d[e.to],e.to));            }        }    }}</pre><h2 id="任意两点间的最短路问题-Floyd-Warshall算法"><a href="#任意两点间的最短路问题-Floyd-Warshall算法" class="headerlink" title="任意两点间的最短路问题(Floyd-Warshall算法)"></a>任意两点间的最短路问题(Floyd-Warshall算法)</h2><p>适用范围：<br>a) APSP(All Pairs Shortest Paths)<br>b) 稠密图效果最佳<br>c) 边权可正可负</p><p>利用DP来解决.对于任意两点,只使用顶点0~k和i,j的情况下,记i到j的最短路长度为d[k][i][j].k=-1时,认为只使用i和j,所以d[-1][i][j]=cost[i][j].</p><p>接下来把只使用顶点0<del>k的问题归结到只使用0</del>k-1:</p><p>只使用0~k-1时,分i到j的最短路正好经过顶点k一次和完全不经过顶点k的情况来讨论.不经过时,d[k][i][j]=d[k-1][i][j];经过时,d[k][i][j]=d[k-1][i][k]+d[k-1][k][i];<br>所以d[k][i][j]=min(d[k-1][i][j],d[k-1][i][k]+d[k-1][k][j]),显然可以用一个二维数组,不断进行d[i][j]=min(d[i][j],d[i][k]+d[k][j])更新来实现.</p><pre class="lang:c++ decode:true">int d[MAX_V][MAX_V];  //d[u][v]表示边e=(u,v)的权值,不存在时设为INF,不过d[i][i]=0;int V;  //顶点数;void warshall_floyd(){    for (int k = 0; k &lt; V; k += 1)    {        for (int i = 0; i &lt; V; i += 1)        {            for (int j = 0; j &lt; V; j += 1)            {                d[i][j]=min(d[i][j],d[i][k]+d[k][j]);            }        }    }    return;}</pre><h2 id="路径还原"><a href="#路径还原" class="headerlink" title="路径还原"></a>路径还原</h2><p>1.</p><p>输出时可能会遇到一点难处，我们记的是每个点“前面的”点是什么，输出却要从最前面往最后面输，这不好办。其实很好办，见如下递归方法</p><div class="UBBPanel codePanel"><div class="UBBContent"><pre class="lang:c++ decode:true ">void PrintPath(int k){    if( Path[k] ) PrintPath(Path[k]);    fout&lt;&lt;k&lt;&lt;' ';}</pre></div></div>2.利用pre数组并且翻转进行最短路的还原.下面将dijkstra算法修改:<pre class="minimize:true lang:c++ mark:17,23,36,43-49 range:17-49 decode:true">#include&lt;iostream&gt;#include&lt;memory.h&gt;#include&lt;stdio.h&gt;#include&lt;queue&gt;#include &lt;vector&gt;#include&lt;algorithm&gt;<p>using namespace std;<br>struct edge<br>{<br>    int to,cost;<br>};<br>typedef pair&lt;int,int&gt; P;   //first是最短距离,second是顶点的编号.<br>int V;<br>const int MAX_V=100000,INF=INT32_MAX;<br>vector&lt;edge&gt; G[MAX_V];<br>int pre[MAX_V];          //<br>int d[MAX_V];</p><p>void dijkstra(int s){<br>    priority_queue&lt; P,vector&lt;P&gt;,greater&lt;P&gt; &gt; que;<br>    fill(d,d+V,INF);<br>    fill(pre,pre+V,-1);   //<br>    d[s]=0;<br>    que.push(P(0,s));<br>    while (!que.empty())<br>    {<br>        P p=que.top();que.pop();<br>        int v=p.second;<br>        if(p.first&gt;d[v])continue;<br>        for (unsigned int i = 0; i &lt; G[v].size(); i += 1)<br>        {<br>            edge e=G[v][i];<br>            if (d[e.to]&gt;d[v]+e.cost)<br>            {<br>                pre[e.to]=v;    //<br>                d[e.to]=d[v]+e.cost;<br>                que.push(P(d[e.to],e.to));<br>            }<br>        }<br>    }<br>}<br>vector&lt;int&gt; get_path(int t){     //<br>    vector&lt;int&gt; path;<br>    for (;t!=-1;t=pre[t])path.push_back(t);<br>    //翻转<br>    reverse(path.begin(),path.end());    //#include&lt;algorithm&gt;<br>    return path;<br>}<br>int main()<br>{</p><pre><code>return 0;</code></pre><p>}</p></pre><p></p><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="Prim算法-Dijksta的推广"><a href="#Prim算法-Dijksta的推广" class="headerlink" title="Prim算法(Dijksta的推广)"></a>Prim算法(Dijksta的推广)</h3><p>适用范围：<br>a) MST(Minimum Spanning Tree,最小生成树)<br>b) 无向图(有向图的是最小树形图)<br>c) 多用于稠密图</p><pre class="minimize:true lang:c++ decode:true">#include&lt;iostream&gt;#include&lt;memory.h&gt;#include&lt;stdio.h&gt;#include&lt;queue&gt;#include &lt;vector&gt;using namespace std;int V,E;const int MAX_V=10000,INF=INT32_MAX;    int cost[MAX_V][MAX_V];   //表示边(u,v)的权值,如果不存在,初始化为INFint mincost[MAX_V];bool used[MAX_V];int prim(){    fill(mincost,mincost+V,INF);    fill(used,used+V,false);    mincost[0]=0;    int ans=0;    while(1){        int v=-1;        for (int i = 0; i &lt; V; i += 1)        {            if(!used[i]&amp;&amp;(v==-1||mincost[v]&gt;mincost[i]))v=i;        }        if(v==-1)break;        used[v]=true;        ans+=mincost[v];        for (int i = 0; i &lt; V; i += 1)        {            mincost[i]=min(mincost[i],cost[v][i]);        }    }    return ans;}int main(){    scanf("%d %d",&amp;V,&amp;E);    int a,b,c;    for (int i = 0; i &lt; V; i += 1)    {        for (int j = 0; j &lt; V; j += 1)        {            cost[i][j]=INF;        }    }    for (int i = 0; i &lt; E; i += 1)    {        scanf("%d %d %d",&amp;a,&amp;b,&amp;c);        cost[a][b]=c;        cost[b][a]=c;    }    cout&lt;&lt;prim()&lt;&lt;endl;    return 0;}</pre><p>这是朴素的prim算法,复杂度为O(V<em>V),可用堆来维护mincost数组优化到O(E</em>logV)但是过于繁杂,不推荐使用.</p><h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><p>适用范围：<br>a) MST(Minimum Spanning Tree,最小生成树)<br>b) 无向图(有向图的是最小树形图)<br>c) 多用于稀疏图<br>d) 边已经按权值排好序给出</p><pre class="minimize:true lang:c++ decode:true ">#include&lt;iostream&gt;#include&lt;memory.h&gt;#include&lt;stdio.h&gt;#include&lt;algorithm&gt;using namespace std;int V,E;const int MAX_V=1000,MAX_E=1000,INF=INT32_MAX;int par[MAX_V],ranks[MAX_V]; //并查集int find(int x){    if(par[x]==x)return x;    else return par[x]=find(par[x]);}void unite(int x,int y){    x=find(x);    y=find(y);    if(x==y)return;    if(ranks[x]&lt;ranks[y]){        par[x]=y;    }else{        par[y]=x;        if(ranks[x]==ranks[y])ranks[x]++;    }}bool same(int x,int y){    return find(x)==find(y);}void init(int n){    for (int i = 0; i &lt; n; i += 1)    {        par[i]=i;        ranks[i]=1;    }}struct edge   //{    int u,v,cost;};edge es[MAX_E];bool cmp(edge a,edge b){    return a.cost&lt;b.cost;}int kruskal(){    sort(es,es+E,cmp);    init(V);   //并查集初始化    int res=0;    for (int i = 0; i &lt; E; i += 1)    {        edge e=es[i];        if(!same(e.u,e.v)){            unite(e.u,e.v);            res+=e.cost;        }    }    return res;}int main(){    scanf("%d %d",&amp;V,&amp;E);    int a,b,c;    for (int i = 0; i &lt; E; i += 1)    {        scanf("%d %d %d",&amp;a,&amp;b,&amp;c);        es[i].u=a;        es[i].v=b;        es[i].cost=c;    }    cout&lt;&lt;kruskal()&lt;&lt;endl;    return 0;}</pre><p>Kruskal算法在排序上最费时,算法的复杂度为O(E*logV),理解起来很容易,注意写好并查集.</p><p>&nbsp;</p><p>参考博客:  <a href="http://www.cnblogs.com/10jschen/archive/2012/08/15/2639650.html" target="_blank" rel="noopener">[ACM算法]图的基本知识</a></p><p>暂时这么多,剩下的以后再补~</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充:"></a>补充:</h1><h2 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h2><p>求单源最短路的SPFA算法的全称是：Shortest Path Faster Algorithm，是西南交通大学段凡丁于1994年发表的。从名字我们就可以看出，这种算法在效率上一定有过人之处。很多时候，给定的图存在负权边，这时类似Dijkstra算法等便没有了用武之地，而Bellman-Ford算法的复杂度又过高，SPFA算法便派上用场了。简洁起见，我们约定加权有向图G不存在负权回路，即最短路径一定存在。如果某个点进入队列的次数超过N次则存在负环（SPFA无法处理带负环的图）。当然，我们可以在执行该算法前做一次拓扑排序，以判断是否存在负权回路，但这不是我们讨论的重点。我们用数组d记录每个结点的最短路径估计值，而且用邻接表来存储图G。我们采取的方法是动态逼近法：设立一个先进先出的队列用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。这样不断从队列中取出结点来进行松弛操作，直至队列空为止。</p><div class="para">定理：只要最短路径存在，上述SPFA算法必定能求出最小值。证明：每次 将点放入队尾，都是经过松弛操作达到的。换言之，每次的优化将会有某个点v的最短路径估计值d[v]变小。所以算法的执行会使d越来越小。由于我们假定图 中不存在负权回路，所以每个结点都有最短路径值。因此，算法不会无限执行下去，随着d值的逐渐变小，直到到达最短路径值时，算法结束，这时的最短路径估计 值就是对应结点的最短路径值。</div><div class="para"></div><div class="para">期望时间复杂度：O(me)， 其中m为所有顶点进队的平均次数，可以证明m一般小于等于2：“算法编程后实际运算情况表明m一般没有超过2n.事实上顶点入队次数m是一个不容易事先分 析出来的数,但它确是一个随图的不同而略有不同的常数.所谓常数,就是与e无关,与n也无关,仅与边的权值分布有关.一旦图确定,权值确定,原点确定,m 就是一个确定的常数.所以SPFA算法复杂度为O(e).证毕."（SPFA的论文）不过，这个证明是非常不严谨甚至错误的，事实上在bellman算法的论文中已有这方面的内容，所以国际上一般不承认SPFA算法。</div><div class="para"></div><div class="para">对SPFA的一个很直观的理解就是由无权图的BFS转 化而来。在无权图中，BFS首先到达的顶点所经历的路径一定是最短路(也就是经过的最少顶点数)，所以此时利用数组记录节点访问可以使每个顶点只进队一 次，但在带权图中，最先到达的顶点所计算出来的路径不一定是最短路。一个解决方法是放弃数组，此时所需时间自然就是指数级的，所以我们不能放弃数组，而是 在处理一个已经在队列中且当前所得的路径比原来更好的顶点时，直接更新最优解。</div><div class="para"></div><div class="para">SPFA算法有两个优化策略SLF和LLL——SLF：Small Label First 策略，设要加入的节点是j，队首元素为i，若dist(j)&lt;dist(i)，则将j插入队首，否则插入队尾； LLL：Large Label Last 策略，设队首元素为i，队列中所有dist值的平均值为x，若dist(i)&gt;x则将i插入到队尾，查找下一元素，直到找到某一i使得 dist(i)&lt;=x，则将i出队进行松弛操作。 SLF 可使速度提高 15 ~ 20%；SLF + LLL 可提高约 50%。 在实际的应用中SPFA的算法时间效率不是很稳定，为了避免最坏情况的出现，通常使用效率更加稳定的Dijkstra算法。</div><div class="para"></div><div class="para">**SPFA的两种写法，bfs和dfs，bfs判别负环不稳定，相当于限深度搜索，但是设置得好的话还是没问题的，dfs的话判断负环很快**</div><div class="para"></div><pre class="lang:c++ decode:true">int spfa_bfs(int s){    queue &lt;int&gt; q;    memset(d,0x3f,sizeof(d));    d[s]=0;    memset(c,0,sizeof(c));    memset(vis,0,sizeof(vis));<pre><code>q.push(s);  vis[s]=1; c[s]=1;//顶点入队vis要做标记，另外要统计顶点的入队次数int OK=1;while(!q.empty()){    int x;    x=q.front(); q.pop();  vis[x]=0;    //队头元素出队，并且消除标记    for(int k=f[x]; k!=0; k=nnext[k]) //遍历顶点x的邻接表    {        int y=v[k];        if( d[x]+w[k] &amp;lt; d[y])        {            d[y]=d[x]+w[k];  //松弛            if(!vis[y])  //顶点y不在队内            {                vis[y]=1;    //标记                c[y]++;      //统计次数                q.push(y);   //入队                if(c[y]&amp;gt;NN)  //超过入队次数上限，说明有负环                    return OK=0;            }        }    }}return OK;</code></pre><p>}</p></pre><p></p><pre class="lang:c++ decode:true ">int spfa_dfs(int u){    vis[u]=1;    for(int k=f[u]; k!=0; k=e[k].next)    {        int v=e[k].v,w=e[k].w;        if( d[u]+w &lt; d[v] )        {            d[v]=d[u]+w;            if(!vis[v])            {                if(spfa_dfs(v))                    return 1;            }            else                return 1;        }    }    vis[u]=0;    return 0;}</pre><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdoj 1010 Tempter of the Bone解题报告</title>
      <link href="/2016/02/12/hdoj1010/"/>
      <url>/2016/02/12/hdoj1010/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1010" target="_blank" rel="noopener">hdoj1010</a></p><blockquote><h1 id="Tempter-of-the-Bone"><a href="#Tempter-of-the-Bone" class="headerlink" title="Tempter of the Bone"></a>Tempter of the Bone</h1><p>**Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</p><p>Total Submission(s): 97697    Accepted Submission(s): 26504</p><p>**</p><div class="panel_title" align="left">Problem Description</div><div class="panel_content"><p>The doggie found a bone in an ancient maze, which fascinated him a lot. However, when he picked it up, the maze began to shake, and the doggie could feel the ground sinking. He realized that the bone was a trap, and he tried desperately to get out of this maze.</p><p>The maze was a rectangle with sizes N by M. There was a door in the maze. At the beginning, the door was closed and it would open at the T-th second for a short period of time (less than 1 second). Therefore the doggie had to arrive at the door on exactly the T-th second. In every second, he could move one block to one of the upper, lower, left and right neighboring blocks. Once he entered a block, the ground of this block would start to sink and disappear in the next second. He could not stay at one block for more than one second, nor could he move into a visited block. Can the poor doggie survive? Please help him.</p></div><div class="panel_bottom"></div><div class="panel_title" align="left">Input</div><div class="panel_content"><p>The input consists of multiple test cases. The first line of each test case contains three integers N, M, and T (1 &lt; N, M &lt; 7; 0 &lt; T &lt; 50), which denote the sizes of the maze and the time at which the door will open, respectively. The next N lines give the maze layout, with each line containing M characters. A character is one of the following:</p><p>‘X’: a block of wall, which the doggie cannot enter;</p><p>‘S’: the start point of the doggie;</p><p>‘D’: the Door; or</p><p>‘.’: an empty block.</p><p>The input is terminated with three 0’s. This test case is not to be processed.</p></div><div class="panel_bottom"></div><div class="panel_title" align="left">Output</div><div class="panel_content">For each test case, print in one line "YES" if the doggie can survive, or "NO" otherwise.</div><div class="panel_bottom"></div><div class="panel_title" align="left">Sample Input</div><div class="panel_content"><div>4 4 5</div><div>S.X.</div><div>..X.</div><div>..XD</div><div>....</div><div>3 4 5</div><div>S.X.</div><div>..X.</div><div>...D</div><div>0 0 0</div></div><div class="panel_bottom"></div><div class="panel_title" align="left">Sample Output</div><div class="panel_content"><div>NO</div><div>YES</div></div></blockquote><div class="panel_content"><div>很久之前用java折腾很久过了的题，，，然而C++也折腾了大半天，几个注意点：</div>1、关于迷宫类型的读入，用字符串数组读入一整行字符串然后进行预处理，预处理很重要，可以简化后面的运算；</div><div class="panel_content"><pre class="lang:c++ decode:true">for (int i = 0; i &lt; n; i += 1)        {            scanf("%s",maze_in);            for (int j = 0; j &lt; m; j += 1)            {                if (maze_in[j]=='X')maze[i][j]=0;                else                {                    maze[i][j]=1;                    if (maze_in[j]=='S'){                        maze[i][j]=0;                        sx=i;sy=j;                    }                    if(maze_in[j]=='D'){                        ex=i;ey=j;                    }                }            }        }</pre>2、由于深搜的时间复杂度一般都很高，一定要考虑到剪枝该题涉及到的两个方面的剪枝：<p>a.奇偶剪枝，就是每相邻两步笛卡尔坐标和的奇偶性互异，这应该很显然。<br>b.曼哈顿距离剪枝，用深度下界判断当前状态是否可行。​</p><pre class="lang:c++ decode:true">int left=t-k,les=abs(x-ex)+abs(y-ey);if(les&gt;left)return;if(left%2!=les%2)return;</pre><p>其中t为目标时间，k为当前dfs时间；</p><p>3、千万要注意出发点的maze在预处理时一定要赋为不可到达；</p><pre class="lang:java decode:true ">if (maze_in[j]=='S'){    maze[i][j]=0;    sx=i;sy=j;}</pre><p>看下面这组数据你就明白了：</p><p>2 2 4<br>S.<br>.D</p><p>好了就这么多，下面是完整AC代码（c++）：</p><pre class="lang:c++ decode:true ">#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include &lt;math.h&gt;#include &lt;cmath&gt;using namespace std;int n,m,t,sx,sy,ex,ey;char maze_in[10];int maze[10][10];int dx[]={1,-1,0,0},dy[]={0,0,1,-1};bool sol=false;void dfs(int x,int y,int k){//    cout&lt;&lt;x&lt;&lt;","&lt;&lt;y&lt;&lt;" "&lt;&lt;k&lt;&lt;endl;    if(k&gt;t)return;    if(k==t&amp;&amp;x==ex&amp;&amp;y==ey)    {        sol=true;        return;    }    if(sol)return;    int left=t-k,les=abs(x-ex)+abs(y-ey);    if(les&gt;left)return;    if(left%2!=les%2)return;    for (int i = 0; i &lt; 4; i += 1)    {        int nx=x+dx[i],ny=y+dy[i];        if (nx&gt;=0&amp;&amp;ny&gt;=0&amp;&amp;nx&lt;=n&amp;&amp;ny&lt;=m&amp;&amp;maze[nx][ny])        {            maze[nx][ny]=0;            dfs(nx,ny,k+1);            maze[nx][ny]=1;        }    }}int main(){    while (scanf("%d %d %d",&amp;n,&amp;m,&amp;t)&amp;&amp;n)    {        sol=false;        for (int i = 0; i &lt; n; i += 1)        {            scanf("%s",maze_in);            for (int j = 0; j &lt; m; j += 1)            {                if (maze_in[j]=='X')maze[i][j]=0;                else                {                    maze[i][j]=1;                    if (maze_in[j]=='S'){                        maze[i][j]=0;                        sx=i;sy=j;                    }                    if(maze_in[j]=='D'){                        ex=i;ey=j;                    }                }            }        }        dfs(sx,sy,0);        if(sol)printf("YES\n");        else printf("NO\n");        }    return 0;}</pre><p>&nbsp;</p></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdoj 1009 FatMouse&#39; Trade解题报告</title>
      <link href="/2016/02/11/hdoj1009/"/>
      <url>/2016/02/11/hdoj1009/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1009" target="_blank" rel="noopener">hdoj1009</a></p><blockquote><h1 id="FatMouse’-Trade"><a href="#FatMouse’-Trade" class="headerlink" title="FatMouse’ Trade"></a>FatMouse’ Trade</h1><p>**Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</p><p>Total Submission(s): 60482    Accepted Submission(s): 20335</p><p>**</p><div class="panel_title" align="left">Problem Description</div><div class="panel_content">FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean.<p>The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]* a% pounds of JavaBeans if he pays F[i]* a% pounds of cat food. Here a is a real number. Now he is assigning this homework to you: tell him the maximum amount of JavaBeans he can obtain.</p></div><p></p><p>&nbsp;</p><div class="panel_title" align="left">Input</div><div class="panel_content">The input consists of multiple test cases. Each test case begins with a line containing two non-negative integers M and N. Then N lines follow, each contains two non-negative integers J[i] and F[i] respectively. The last test case is followed by two -1's. All integers are not greater than 1000.</div><p>&nbsp;</p><div class="panel_title" align="left">Output</div><div class="panel_content">For each test case, print in a single line a real number accurate up to 3 decimal places, which is the maximum amount of JavaBeans that FatMouse can obtain.</div><p>&nbsp;</p><div class="panel_title" align="left">Sample Input</div><div class="panel_content"><div>5 3 7 2 4 3 5 2 20 3 25 18 24 15 15 10 -1 -1</div></div><p>&nbsp;</p><div class="panel_title" align="left">Sample Output</div><div class="panel_content"><div>13.333 31.500</div></div></blockquote><div class="panel_content"><div>我的天，一道很简单的贪心题，然而一开始就TE，我还以为循环遍历太多，需要剪枝之类的优化，后来发现了两个地方的错误。。。好丢人Orz，，，</div><div><pre class="lang:c++ decode:true ">while (scanf("%d %d",&amp;m,&amp;n)&amp;&amp;m!=-1)</pre>一开始是这里，忘记判断m=-1时结束输入，这应该是造成TE的原因；<p>第二个地方，是关于比例j[i]/f[i]的处理，f[i]可能为0，将其mods设为double类型最大值即可。</p><pre class="lang:c++ decode:true">scanf("%lf %lf",&amp;a[i].a,&amp;a[i].b);if(a[i].b==0){    a[i].mods=DBL_MAX;}else{    a[i].mods=a[i].a/a[i].b;}</pre><p>嗯，就这么多，下面是完整代码：</p><pre class="lang:c++ decode:true">#include&lt;iostream&gt;#include&lt;stdio.h#include&lt;math.h&gt;#include&lt;algorithm#define DBL_MAX 1.7976931348623158e+308using namespace std;struct food{    double a,b,mods;};food a[1001];bool compare(food a,food b){    return a.mods&lt;b.mods;}int main(){    int m,n;    double ans;    while (scanf("%d %d",&amp;m,&amp;n)&amp;&amp;m!=-1)    {        for (int i = 0; i &lt; n; i += 1)        {                scanf("%lf %lf",&amp;a[i].a,&amp;a[i].b);                if(a[i].b==0)                {                    a[i].mods=DBL_MAX;                }                else                {                    a[i].mods=a[i].a/a[i].b;                }        }        sort(a,a+n,compare);        ans=0.0;        while (n)        {            n--;            if (m&gt;=a[n].b)            {                m-=a[n].b;                ans+=a[n].a;            }            else            {                ans+=m*a[n].mods;                m=0;            }            if(a[n].b!=0&amp;&amp;m==0)break;        }        printf("%.3lf\n",ans);    }    return 0;}</pre><p>&nbsp;</p><p>细节啊细节，c++中对数的处理和java中还是有些区别的，需要谨慎。</p></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdoj 1006 Tick and Tick解题报告</title>
      <link href="/2016/02/09/hdoj1006/"/>
      <url>/2016/02/09/hdoj1006/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1006" target="_blank" rel="noopener">hdoj1006</a></p><blockquote><h1 id="Tick-and-Tick"><a href="#Tick-and-Tick" class="headerlink" title="Tick and Tick"></a>Tick and Tick</h1><p>**Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)</p><p>**</p><div class="panel_title" align="left">Problem Description</div><div class="panel_content">The three hands of the clock are rotating every second and meeting each other many times everyday. Finally, they get bored of this and each of them would like to stay away from the other two. A hand is happy if it is at least D degrees from any of the rest. You are to calculate how much time in a day that all the hands are happy.</div><p>&nbsp;</p><div class="panel_title" align="left">Input</div><div class="panel_content">The input contains many test cases. Each of them has a single line with a real number D between 0 and 120, inclusively. The input is terminated with a D of -1.</div><p>&nbsp;</p><div class="panel_title" align="left">Output</div><div class="panel_content">For each D, print in a single line the percentage of time in a day that all of the hands are happy, accurate up to 3 decimal places.</div><p>&nbsp;</p><div class="panel_title" align="left">Sample Input</div><div class="panel_content"><div>0 120 90 -1</div></div><p>&nbsp;</p><div class="panel_title" align="left">Sample Output</div><div class="panel_content"><div>100.000 0.000 6.251</div></div></blockquote><div>一看，:-O哎呀好简单，一个公式解决：概率=[（360-3D）/360]*[（360-3D）/360],</div><div><pre class="lang:c++ decode:true">#include&lt;iostream&gt;#include&lt;stdio.h&gt;using namespace std;int main(){    float D,d;    while(scanf("%f",&amp;D)&amp;&amp;D!=-1)    {        d=360-3*D;        printf("%.3f\n",d*d/1296);    }    return 0;}</pre>然而，，，还是图样图森破，在D=90时，得出答案为6.250，而标答是6.251，我还天真的以为在误差允许范围之类Orz，，，<p>做了好久无果，参考大神的代码，用角速度是没错的，发现了自己的计算方式一个致命的错误，我将三个指针当做完全不相干的进行计算，然而三个指针之间是有固定的位置关系的，所以不能单独计算一个小时的情况作为整个概率，参考大神的博客，采取暴力遍历720min的方式：</p><pre class="lang:c++ decode:true ">#include&lt;iostream&gt;#include&lt;stdio.h&gt;using namespace std;float D;struct sets      //存储区间上下界{    double low,up;};double max(double a,double b){    if(a&gt;b)return a;    else return b;}double min(double a,double b){    if(a&lt;b)return a;    else return b;}sets solve1(double a,double b);// 求 D&lt;=|ax+b|&lt;360-D 的解sets solve2(double a,double b);// 求 D&lt;=|ax+b|&lt;360-D 的解sets coti(sets a,sets b);   //取交集int main(){    while(scanf("%f",&amp;D)&amp;&amp;D!=-1)    {        double rel=0,a[3],b[3];  //这里一定要注意!!!        a[0]=-11.0/120;       //不能写成a[0]=-11/120;        a[1]=-6.0+1.0/120;    //不能写成a[1]=-6+1/120;        a[2]=-5.9;            //精度问题一定要注意！！！        sets ans[3][2];        for (int h = 0; h &lt;12; h += 1)        {            for (int m = 0; m &lt; 60; m += 1)            {                b[0]=30*h-5.5*m;                b[1]=30*h+0.5*m;                b[2]=6*m;/* 求3个绝对值不等式的解集 存到answer中answer[0][0] answer[0][1]要取并集剩下两个也是*/                for (int i = 0; i &lt; 3; i += 1)                {                    ans[i][0]=solve1(a[i],b[i]);                    ans[i][1]=solve2(a[i],b[i]);                }                 /* 取过交集后，需要将3个式子的结果取并集 所以采用下面的方法 */                for (int i = 0; i &lt; 2; i += 1)                {                    for (int j = 0; j &lt; 2; j += 1)                    {                        for (int k = 0; k &lt; 2; k += 1)                        {                            sets ss=coti(coti(ans[0][i],ans[1][j]),ans[2][k]);                            rel+=ss.up-ss.low;                        }                    }                }            }        }        printf("%.3f\n",rel/432);    }    return 0;}sets solve1(double a,double b)  //D&lt;=|ax+b|&lt;=360-D 分类解1{    sets ret;    ret.up=min(-b/a,(D-b)/a);    ret.low=(360.0-D-b)/a;    if(ret.up&gt;60)ret.up=60;    if(ret.low&lt;0)ret.low=0;    if(ret.low&gt;=ret.up)ret.low=ret.up=0;    return ret;}sets solve2(double a,double b)  //D&lt;=|ax+b|&lt;=360-D 分类解2{    sets ret;    ret.up=(360.0-D+b)/(-a);    ret.low=max(-b/a,-(D+b)/a);    if(ret.up&gt;60)ret.up=60;    if(ret.low&lt;0)ret.low=0;    if(ret.low&gt;=ret.up)ret.low=ret.up=0;    return ret;}sets coti(sets a,sets b)    //取交集{    sets p;    p.low=a.low&gt;b.low?a.low:b.low;    p.up=a.up&lt;b.up?a.up:b.up;    if(p.low&gt;p.up)p.low=p.up=0;    return p;}</pre><p>&nbsp;</p></div>&nbsp;<p>这题其实并不是很难，但是对于题意的理解很重要，如果一开始就没有将他当成是离散的去做的话，估计很多人都能很快想到正确算法，可惜我虽然想到不用离散，却入了另外一个坑，对于题意的把握还是需要加强练习的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016新年快乐～</title>
      <link href="/2016/02/08/newyear-2016/"/>
      <url>/2016/02/08/newyear-2016/</url>
      
        <content type="html"><![CDATA[<h1 id="新年啊，2016，感觉这一年会和以往都不一样，我在2015的年末，找到了自己的月亮和6便士，感觉生活完全不同了有木有～"><a href="#新年啊，2016，感觉这一年会和以往都不一样，我在2015的年末，找到了自己的月亮和6便士，感觉生活完全不同了有木有～" class="headerlink" title="新年啊，2016，感觉这一年会和以往都不一样，我在2015的年末，找到了自己的月亮和6便士，感觉生活完全不同了有木有～"></a>新年啊，2016，感觉这一年会和以往都不一样，我在2015的年末，找到了自己的月亮和6便士，感觉生活完全不同了有木有～</h1><h1 id="选择排序，插入排序，快速排序，归并排序，希尔排序帮您排忧解难。有向图，无向图，完全图，稠密图，拓扑图祝您宏图大展。线性动规，区间动规，坐标动规，背包动规，树型动规，状压动规，插头动规为您在新的一年里规划精彩。哈希表，邻接表，双向链表，循环链表帮您表达情意。佩亚诺余项，施勒米尔希-罗什余项，拉格朗日余项，柯西余项，积分余项祝您年年有余。Treap，Splay，AVL，-SBT为您平衡心态，一路向前费马，欧几里得，欧拉，高斯，哈密尔顿，图灵各路大神助您一臂之力，紫气东来，风调雨顺！我在这里给大家拜年啦！Hello-world-≧▽≦"><a href="#选择排序，插入排序，快速排序，归并排序，希尔排序帮您排忧解难。有向图，无向图，完全图，稠密图，拓扑图祝您宏图大展。线性动规，区间动规，坐标动规，背包动规，树型动规，状压动规，插头动规为您在新的一年里规划精彩。哈希表，邻接表，双向链表，循环链表帮您表达情意。佩亚诺余项，施勒米尔希-罗什余项，拉格朗日余项，柯西余项，积分余项祝您年年有余。Treap，Splay，AVL，-SBT为您平衡心态，一路向前费马，欧几里得，欧拉，高斯，哈密尔顿，图灵各路大神助您一臂之力，紫气东来，风调雨顺！我在这里给大家拜年啦！Hello-world-≧▽≦" class="headerlink" title="选择排序，插入排序，快速排序，归并排序，希尔排序帮您排忧解难。有向图，无向图，完全图，稠密图，拓扑图祝您宏图大展。线性动规，区间动规，坐标动规，背包动规，树型动规，状压动规，插头动规为您在新的一年里规划精彩。哈希表，邻接表，双向链表，循环链表帮您表达情意。佩亚诺余项，施勒米尔希-罗什余项，拉格朗日余项，柯西余项，积分余项祝您年年有余。Treap，Splay，AVL，,SBT为您平衡心态，一路向前费马，欧几里得，欧拉，高斯，哈密尔顿，图灵各路大神助您一臂之力，紫气东来，风调雨顺！我在这里给大家拜年啦！Hello world(≧▽≦)/"></a>选择排序，插入排序，快速排序，归并排序，希尔排序帮您排忧解难。有向图，无向图，完全图，稠密图，拓扑图祝您宏图大展。线性动规，区间动规，坐标动规，背包动规，树型动规，状压动规，插头动规为您在新的一年里规划精彩。哈希表，邻接表，双向链表，循环链表帮您表达情意。佩亚诺余项，施勒米尔希-罗什余项，拉格朗日余项，柯西余项，积分余项祝您年年有余。Treap，Splay，AVL，,SBT为您平衡心态，一路向前费马，欧几里得，欧拉，高斯，哈密尔顿，图灵各路大神助您一臂之力，紫气东来，风调雨顺！我在这里给大家拜年啦！Hello world<del>(≧▽≦)/</del></h1><h1 id="不忘初心，方得始终。你是最棒的！"><a href="#不忘初心，方得始终。你是最棒的！" class="headerlink" title="不忘初心，方得始终。你是最棒的！"></a>不忘初心，方得始终。你是最棒的！</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gedit变身为编程利器的简单配置</title>
      <link href="/2016/02/04/gedit-linux/"/>
      <url>/2016/02/04/gedit-linux/</url>
      
        <content type="html"><![CDATA[<h2 id="按照校队的要求，需要从java编程转型到c-编程以便队内交流，真是痛苦啊，为了少受干扰，于是转战至ubuntu系统，搭好了java和c，c-编程环境，却纠结在选择何种IDE，code-blocks，eclipse，vim…查找了许多资料，最终决定还是用gedit吧，比起其他的界面这个还是我比较能接受的哈哈哈，最主要还是功能基本能满足我的需求。下面给出简单配置：转载出处"><a href="#按照校队的要求，需要从java编程转型到c-编程以便队内交流，真是痛苦啊，为了少受干扰，于是转战至ubuntu系统，搭好了java和c，c-编程环境，却纠结在选择何种IDE，code-blocks，eclipse，vim…查找了许多资料，最终决定还是用gedit吧，比起其他的界面这个还是我比较能接受的哈哈哈，最主要还是功能基本能满足我的需求。下面给出简单配置：转载出处" class="headerlink" title="按照校队的要求，需要从java编程转型到c++编程以便队内交流，真是痛苦啊，为了少受干扰，于是转战至ubuntu系统，搭好了java和c，c++编程环境，却纠结在选择何种IDE，code:blocks，eclipse，vim…查找了许多资料，最终决定还是用gedit吧，比起其他的界面这个还是我比较能接受的哈哈哈，最主要还是功能基本能满足我的需求。下面给出简单配置：转载出处"></a>按照校队的要求，需要从java编程转型到c++编程以便队内交流，真是痛苦啊，为了少受干扰，于是转战至ubuntu系统，搭好了java和c，c++编程环境，却纠结在选择何种IDE，code:blocks，eclipse，vim…查找了许多资料，最终决定还是用gedit吧，比起其他的界面这个还是我比较能接受的哈哈哈，最主要还是功能基本能满足我的需求。下面给出简单配置：<a href="http://blog.csdn.net/u012965890/article/details/38472149" target="_blank" rel="noopener">转载出处</a></h2><p>操作系统：ubuntu 15.04</p><p>首先打开gedit，编辑-&gt;首选项，在查看、编辑器、字体和颜色这三个选项卡里选择自己喜欢的配置。比如缩进，代码高亮等。</p><p>用下面的命令来安装/更新gedit的插件：</p><div class="dp-highlighter bg_plain"><pre class="lang:default decode:true">sudo apt-get install gedit-plugins</pre>然后在插件选项卡里选择自己所需的插件。我个人选择了以下插件：插入日期/时间、代码注释、单词补全、绘制空白、嵌入终端、括号补全、片段、拼写检查器、外部工具、文本大小、文档统计、文件浏览器面板。</div>片段（快速插入常用的文本片段）：<p>选择工具-&gt;Manage Snippet，可以对其进行管理，例如加入常用模板，以便加快coding速度。（就差块cherry青轴了&gt;_&lt;）</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p><img src="http://img.blog.csdn.net/20140810191821773?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjk2NTg5MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>嵌入终端（在底部面板中嵌入一个终端）：</p><p>默认快捷键是Ctrl+F9,也可以选择通过查看-&gt;底部面板把它调出来，这时候你会发现字体和背景很糟糕，请打开终端并输入以下命令：</p><div class="dp-highlighter bg_plain"><pre class="lang:default decode:true ">dconf-editor</pre>选择org-&gt;gnome-&gt;gedit-&gt;plugins-&gt;terminal,在右边的面板中将"use-theme-colors"取消即可。</div>![](http://img.blog.csdn.net/20140810200023890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjk2NTg5MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)<p>外部工具（执行外部命令和shell脚本）：</p><p>这个是神器！</p><p>选择工具-&gt;Manage External Tools，对其进行管理。</p><p>如果无法通过快捷键对程序进行编译运行，那以上的所有操作都是白费（如果你想每次都打开终端输入命令我也不反对），这个插件提供了很好的接口。</p><p>编译（以C/C++和Java为例）：</p><p>添加新工具，在右边的编辑栏中输入以下代码：</p><div class="dp-highlighter bg_plain"><pre class="lang:sh decode:true ">#!/bin/sh  <p>fullname=$GEDIT_CURRENT_DOCUMENT_NAME  </p><p>name=<code>echo $fullname | cut -d. -f1</code>  </p><p>suffix=<code>echo $fullname | cut -d. -f2</code>  </p><p>if [ $suffix = “c” ]; then  </p><pre><code>gcc $fullname -o $name -O2 -Wall -std=gnu99 -static -lm   </code></pre><p>elif [ $suffix = “cpp” ] || [ $suffix = “c++” ] || [ $suffix = “cc” ] || [ $suffix = “cxx” ] || [ $suffix = “C” ]; then  </p><pre><code>g++ $fullname -o $name -O2 -Wall -std=gnu++0x -static -lm  </code></pre><p>elif [ $suffix = “java” ];  then  </p><pre><code>javac $fullname -encoding UTF-8 -sourcepath . -d .  </code></pre><p>fi</p></pre><br>&nbsp;<p></p></div>编译选项的命令可以自己选择，设置成自己习惯的，以上编译选项部分参考了[ACM/ICPC的编译选项](http://icpc.baylor.edu/worldfinals/programming-environment)。然后设置自己习惯的快捷键，调整选项，以下是我的：<p><img src="http://img.blog.csdn.net/20140810194940203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjk2NTg5MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>运行（以C/C++和Java为例）：</p><p>添加新工具，在右边的编辑栏中输入以下代码：</p><p>&nbsp;</p><pre class="lang:sh decode:true ">#!/bin/sh  fullname=$GEDIT_CURRENT_DOCUMENT_NAME  name=`echo $fullname | cut -d. -f1`  suffix=`echo $fullname | cut -d. -f2`  dir=$GEDIT_CURRENT_DOCUMENT_DIR  if [ $suffix = "c" ]; then      gnome-terminal --hide-menubar --working-directory=$dir -t "Terminal-$name" -x bash -c "$dir/$name; echo;echo 'press ENTER to continue';read"  elif [ $suffix = "cpp" ] || [ $suffix = "c++" ] || [ $suffix = "cc" ] || [ $suffix = "cxx" ] || [ $suffix = "C" ]; then      gnome-terminal --hide-menubar --working-directory=$dir -t "Terminal-$name" -x bash -c "$dir/$name; echo;echo 'press ENTER to continue';read"  elif [ $suffix = "java" ];  then      gnome-terminal --hide-menubar --working-directory=$dir -t "Terminal-$name" -x bash -c "java $name echo;echo 'press ENTER to continue';read"  fi</pre><p><img src="http://img.blog.csdn.net/20140810194935015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjk2NTg5MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>大概就是这么多了，更多的功能还要靠以后自己挖掘了。&gt;_&lt;</p><p>&nbsp;</p><p>Thanks for reading…&gt;_&lt;</p><p>&nbsp;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gedit </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDOJ1072 Nightmare解题报告</title>
      <link href="/2016/02/01/hdoj1072/"/>
      <url>/2016/02/01/hdoj1072/</url>
      
        <content type="html"><![CDATA[<h2 id="又是一道广搜题"><a href="#又是一道广搜题" class="headerlink" title="又是一道广搜题= ="></a>又是一道广搜题= =</h2><h2 id="这题其实和hdoj1026比较像，hdoj1026解题报告链接"><a href="#这题其实和hdoj1026比较像，hdoj1026解题报告链接" class="headerlink" title="这题其实和hdoj1026比较像，hdoj1026解题报告链接"></a>这题其实和hdoj1026比较像，<span style="color: #ff0000;"><a href="http://jingwei.site/hdoj1026/" target="_blank" rel="noopener">hdoj1026解题报告链接</a></span></h2><h2 id="但是也几经折腾才得以AC，贴一下题目原文吧-HDOJ1072-Nightmare"><a href="#但是也几经折腾才得以AC，贴一下题目原文吧-HDOJ1072-Nightmare" class="headerlink" title="但是也几经折腾才得以AC，贴一下题目原文吧:HDOJ1072 Nightmare"></a>但是也几经折腾才得以AC，贴一下题目原文吧:<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1072" target="_blank" rel="noopener">HDOJ1072 Nightmare</a></h2><blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>Ignatius had a nightmare last night. He found himself in a labyrinth with a time bomb on him. The labyrinth has an exit, Ignatius should get out of the labyrinth before the bomb explodes. The initial exploding time of the bomb is set to 6 minutes. To prevent the bomb from exploding by shake, Ignatius had to move slowly, that is to move from one area to the nearest area(that is, if Ignatius stands on (x,y) now, he could only on (x+1,y), (x-1,y), (x,y+1), or (x,y-1) in the next minute) takes him 1 minute. Some area in the labyrinth contains a Bomb-Reset-Equipment. They could reset the exploding time to 6 minutes.</p><p>Given the layout of the labyrinth and Ignatius’ start position, please tell Ignatius whether he could get out of the labyrinth, if he could, output the minimum time that he has to use to find the exit of the labyrinth, else output -1.</p><p>Here are some rules:</p><p>1. We can assume the labyrinth is a 2 array.</p><p>2. Each minute, Ignatius could only get to one of the nearest area, and he should not walk out of the border, of course he could not walk on a wall, too.</p><p>3. If Ignatius get to the exit when the exploding time turns to 0, he can’t get out of the labyrinth.</p><p>4. If Ignatius get to the area which contains Bomb-Rest-Equipment when the exploding time turns to 0, he can’t use the equipment to reset the bomb.</p><p>5. A Bomb-Reset-Equipment can be used as many times as you wish, if it is needed, Ignatius can get to any areas in the labyrinth as many times as you wish.</p><p>6. The time to reset the exploding time can be ignore, in other words, if Ignatius get to an area which contain Bomb-Rest-Equipment, and the exploding time is larger than 0, the exploding time would be reset to 6.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.</p><p>Each test case starts with two integers N and M(1&lt;=N,Mm=8) which indicate the size of the labyrinth. Then N lines follow, each line contains M integers. The array indicates the layout of the labyrinth.</p><p>There are five integers which indicate the different type of area in the labyrinth:</p><p>0: The area is a wall, Ignatius should not walk on it.</p><p>1: The area contains nothing, Ignatius can walk on it.</p><p>2: Ignatius’ start position, Ignatius starts his escape from this position.</p><p>3: The exit of the labyrinth, Ignatius’ target position.</p><p>4: The area contains a Bomb-Reset-Equipment, Ignatius can delay the exploding time by walking to these areas.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, if Ignatius can get out of the labyrinth, you should output the minimum time he needs, else you should just output -1.<br>简单来说，一个迷宫，主人公身上有一个6min后会爆炸的炸弹，每走一步1min，地图上存在炸弹重置装置可将时间重置回6min，求是否能逃出迷宫及最短逃出时间。</p></blockquote><p>由于炸弹重置装置的存在，使得本题处理类似于hdoj1026，不再赘述。</p><p>说几个注意点：</p><ol><li>采用hdoj1026的方法，第一次探索到终点的时间必为最短时间，此时即可退出BFS循环；</li><li>当从队列中取出一个点时，判断其剩余时间是否为1，为1则跳过（题目要求第三点第四点）；</li><li>虽说题目中提到炸弹重置装置可以无限次使用，然而这是个大坑，在搜索时，应该对炸弹重置装置的点做标记，只需访问一次即可，否则如410这样的地图中，会重复4-&gt;1,1-&gt;4这样的无限循环过程进而导致超时。<br>完整代码有点乱，就不贴了，参考hdoj1026即可，附上部分处理代码（java）:<pre class="lang:java decode:true ">while(!que.isEmpty()){        point a=que.poll();        vivs[a.x][a.y]=false;        if(a.x==ex&amp;&amp;a.y==ey)return;        if(lefttime[a.x][a.y]==1)continue;        if(reset[a.x][a.y])continue;        if(maze[a.x][a.y]==4)reset[a.x][a.y]=true;</pre>&nbsp;</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不忘初心,方得始终|活着,即是一种修行。</title>
      <link href="/2016/02/01/this-is-life/"/>
      <url>/2016/02/01/this-is-life/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HDOJ1026 Ignatius and the Princess I解题报告</title>
      <link href="/2016/02/01/hdoj1026/"/>
      <url>/2016/02/01/hdoj1026/</url>
      
        <content type="html"><![CDATA[<p>O(∩_∩)O~~第一篇博客上的解题报告</p><p>先给出题目链接    <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1026" target="_blank" rel="noopener">Ignatius and the Princess I</a></p><p>以下为题目原文：</p><blockquote><h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>The Princess Has Been Abducted By The Beelzebub Feng5166, Our Hero Ignatius Has To Rescue Our Pretty Princess. Now He Gets Into Feng5166’S Castle. The Castle Is A Large Labyrinth. To Make The Problem Simply, We Assume The Labyrinth Is A N*M Two-Dimensional Array Which Left-Top Corner Is (0,0) And Right-Bottom Corner Is (N-1,M-1). Ignatius Enters At (0,0), And The Door To Feng5166’S Room Is At (N-1,M-1), That Is Our Target. There Are Some Monsters In The Castle, If Ignatius Meet Them, He Has To Kill Them. Here Is Some Rules:</p><p>1.Ignatius Can Only Move In Four Directions(Up, Down, Left, Right), One Step Per Second. A Step Is Defined As Follow: If Current Position Is (X,Y), After A Step, Ignatius Can Only Stand On (X-1,Y), (X+1,Y), (X,Y-1) Or (X,Y+1).</p><p>2.The Array Is Marked With Some Characters And Numbers. We Define Them Like This:</p><p>. : The Place Where Ignatius Can Walk On.</p><p>X : The Place Is A Trap, Ignatius Should Not Walk On It.</p><p>N : Here Is A Monster With N Hp(1&lt;=N&lt;=9), If Ignatius Walk On It, It Takes Him N Seconds To Kill The Monster.</p><p>Your Task Is To Give Out The Path Which Costs Minimum Seconds For Ignatius To Reach Target Position. You May Assume That The Start Position And The Target Position Will Never Be A Trap, And There Will Never Be A Monster At The Start Position.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The Input Contains Several Test Cases. Each Test Case Starts With A Line Contains Two Numbers N And M(2&lt;=N&lt;=100,2&lt;=M&lt;=100) Which Indicate The Size Of The Labyrinth. Then A N*M Two-Dimensional Array Follows, Which Describe The Whole Labyrinth. The Input Is Terminated By The End Of File. More Details In The Sample Input.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For Each Test Case, You Should Output “God Please Help Our Poor Hero.” If Ignatius Can’t Reach The Target Position, Or You Should Output “It Takes N Seconds To Reach The Target Position, Let Me Show You The Way.”(N Is The Minimum Seconds), And Tell Our Hero The Whole Path. Output A Line Contains “Finish” After Each Test Case. If There Are More Than One Path, Any One Is Ok In This Problem. More Details In The Sample Output.<br>范例输入输出就不贴了~</p></blockquote><p>一个迷宫，迷宫包含空白格子(.)，不能走的格子(X)和需要花费一定时间击败怪物(int 0~9)的格子。从(0,0)走到(n-1,m-1)，求耗费时间最少的路径。</p><p>很明显这道题是用搜索去解，既然是最短路那就BFS咯，顺便参照一个大神的博客整理一下BFS和DFS的区别：</p><blockquote><p>“当已知最大可能步骤数的时候，DFS可用，当最大可能步骤数未知时，BFS可用。同时也要视确切问题及其数学模型对于两种算法的适应程度决定使用哪一种算法。</p><p>对于DFS，问题在于找到解后无法确定是否是目标的最优解，对于求最优解问题的处理比较困难。对于BFS，局限性在于所 有已经处理过的情况均保留在队列中，对于空间占用比较大，以及对各情况的判重有时难度较高。“</p><p>总结就是：</p><p>DFS：已知最大可能步骤（搜索深度）时适用，有时候对于最优解的处理比较困难。递归实现。</p><p>BFS：最大步骤（搜索深度）未知时适用，因为需要用队列储存一部分节点（状态），所以对空间的消耗会比较大。判断状态重复有时候会比较麻烦。队列实现。</p></blockquote><p>虽然一开始就明确了要用BFS，但是自己还是想了很久，因为题目不仅要求输出最短耗时，而且需要输出最短路径，并且不同于一般的BFS其中还有需要花费一定时间通过的格子，不能按常规去BFS，这题的难点主要在1、花费时间才能通过的格子2、输出最短路径</p><p>首先，对迷宫预处理，定义一个二维数组存储：</p><pre class="lang:java decode:true" title="迷宫地图">static int maze[][]=new int[102][102];//-1:陷阱 0:空白 1~9:方格内怪兽的hp</pre><p>然后，自定义一个类以便于队列搜索点：</p><pre class="lang:java decode:true" title="自定义类">static class point{        int x=0,y=0,d=0;        public point(int a,int b,int c){            this.x=a;            this.y=b;            this.d=c;        }}</pre><p>然后，，，就没有然后了，这样下去是行不通的，没有考虑到有怪物格子可能花费的时间，也没有考虑到记录路径。</p><p>最终还是在大神的帮助下，通过如下定义类的方式，一举解决了两个问题：</p><pre class="lang:java decode:true" title="大神解答">static class point{        int x=0,y=0;        public point(int a,int b){            this.x=a;            this.y=b;        }    }    static class pre_point{        int pre_x,pre_y,time;        public pre_point(int a,int b,int c){            this.pre_x=a;              this.pre_y=b;  //当前点最优的前驱点的x，y坐标            this.time=c;   //到达当前点最优的耗时        }    }    static pre_point path[][]=new pre_point[102][102];</pre><p>这样处理通过一个pre_point类，非常聪明的解决了输出路径的问题，而第一个问题，将path数组的time都初始化为一个足够大的值，然后用BFS去更新（当path[sx][sy].time&gt;path[get.x][get.y].time+maze[sx][sy]+1的时候更新path[sx][sy].time），如果一个点被更新而且不在队中则将该点入队，因为到达一个点的最优路径和时间变化以后该点能到达的点的相应数据也需要被更新.注意前驱点坐标和time都要更新。当队列为空时结束更新。</p><p>至于讨论版和其他博客说的优先队列，，，Orz….现在还不懂，以后会了再加上吧。</p><p>最后，将path[n-1][m-1]的时间取出，并从该点把前驱点坐标一一取出并压入栈中，一直到点（0,0），最后再pop出来，同时注意判断点上是否有怪，注意细节处理，输出即可。</p><p>最后是AC java代码-   -有点乱，仅供参考：</p><pre class="lang:java decode:true " title="AC完整代码">package part_BFS;import java.io.PrintWriter;import java.util.Scanner;import java.util.Queue;import java.util.ArrayDeque;import java.util.Stack;public class hdoj1026b {    static PrintWriter cout = new PrintWriter(System.out, true);    static Scanner cin = new Scanner(System.in);    static int n=0, m=0,max=1000000;    static int dx[]=new int[]{1,-1,0,0},dy[]=new int[]{0,0,1,-1};    static int maze[][]=new int[102][102];    static Queue&lt;point&gt;que=new ArrayDeque&lt;point&gt;();    static Stack&lt;point&gt;sta=new Stack&lt;point&gt;();    static boolean vivs[][]=new boolean[102][102];    static pre_point path[][]=new pre_point[102][102];    static class point{        int x=0,y=0;        public point(int a,int b){            this.x=a;            this.y=b;        }    }    static class pre_point{        int pre_x,pre_y,time;        public pre_point(int a,int b,int c){            this.pre_x=a;            this.pre_y=b;            this.time=c;        }    }    public static void main(String[] args) {        while(cin.hasNext()){            n = cin.nextInt();            m = cin.nextInt();            for(int i=0;i&lt;n;i++){                String temp=cin.next();                for(int j=0;j&lt;m;j++){                    if(temp.charAt(j)=='X'){                        maze[i][j]=-1;                    }                    else if(temp.charAt(j)=='.'){                        maze[i][j]=0;                    }                    else{                        maze[i][j]=temp.charAt(j)-'0';                    }                }            }            for(int i=0;i&lt;102;i++){                for(int j=0;j&lt;102;j++){                    vivs[i][j]=false;                    path[i][j]=new pre_point(0,0,max);                }            }            que.clear();            bfs();            print();        }    }    static void bfs(){        point a=new point(0,0);        que.add(a);        vivs[0][0]=true;        path[0][0].time=0;        path[0][0].pre_x=-1;        while(!que.isEmpty()){            point get=que.poll();            vivs[get.x][get.y]=false;            for(int i=0;i&lt;4;i++){                int sx=get.x+dx[i],sy=get.y+dy[i];                if(sx&gt;=0&amp;&amp;sy&gt;=0&amp;&amp;sx&lt;n&amp;&amp;sy&lt;m){                    if(path[sx][sy].time&gt;path[get.x][get.y].time+maze[sx][sy]+1&amp;&amp;maze[sx][sy]!=-1){                        path[sx][sy].time=path[get.x][get.y].time+maze[sx][sy]+1;                        path[sx][sy].pre_x=get.x;                        path[sx][sy].pre_y=get.y;                        if(!vivs[sx][sy]){                            vivs[sx][sy]=true;                            point newp=new point(sx,sy);                            que.add(newp);                        }                    }                }            }        }    }    static void print(){        if(path[n-1][m-1].time!=max){            int t=path[n-1][m-1].time;            int kx=n-1,ky=m-1;            sta.add(new point(n-1,m-1));            while(path[kx][ky].pre_x&gt;-1){                point s=new point(path[kx][ky].pre_x,path[kx][ky].pre_y);                sta.add(s);                kx=s.x;                ky=s.y;            }            cout.println("It takes "+t+" seconds to reach the target position, let me show you the way.");            point pre=sta.pop();            point a=sta.pop();            int time=1;            while(!sta.isEmpty()){                cout.println((time++)+"s:"+"("+pre.x+","+pre.y+")"+"-&gt;("+a.x+","+a.y+")");                while(maze[a.x][a.y]&gt;0){                    cout.println((time++)+"s:FIGHT AT ("+a.x+","+a.y+")");                    maze[a.x][a.y]--;                }                pre=a;                a=sta.pop();            }            cout.println((time++)+"s:"+"("+pre.x+","+pre.y+")"+"-&gt;("+a.x+","+a.y+")");            while(maze[a.x][a.y]&gt;0){                cout.println((time++)+"s:FIGHT AT ("+a.x+","+a.y+")");                maze[a.x][a.y]--;            }        }        else{            cout.println("God please help our poor hero.");        }        cout.println("FINISH");    }}</pre><p>&nbsp;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个菜鸟ACMer的思考</title>
      <link href="/2015/12/17/acmer/"/>
      <url>/2015/12/17/acmer/</url>
      
        <content type="html"><![CDATA[<p>接触程序设计竞赛也有月余了，一边刷hdoj一边参加了校级的蓝桥杯和acm，蓝桥杯过了校内选拔赛由学校报名参加北京省赛，acm校内决赛11名，不知是否能进入校队，虽然对于一个在这个学期才刚刚接触java并自学的人来说，很不错了。然而。。<br>从程序语言到数据结构，从基本的a+b到大数，枚举，递归，动态规划，深搜，广搜，剪枝，二叉树等等，到现在为止，自己也在不断学习不断进步，但是，越是学习却越觉得自己无知，越发让自己感受到自己与大牛ACMer间的差距，有人说acm是高智商群体精力无处释放而玩的游戏，诚然，越是努力越能体会到智商在acm里的重要性，有时候，智商上的差距，真的不是一昧的努力和坚持能改变的。<br>但是，研究算法，刷oj上的题，学习数学理论，编写程序代码，以及acm的评判机制，立志要成为一个ACMer，这一切，给我带来了很大的改变。<br>首先，它们让我的逻辑思维得到了充足的训练，对效率和空间的高要求，创造力，还有解决问题时的严谨和谨慎，以及总结问题，反思的习惯，我相信这会让我受益终生。其次，它们让我改变了很多坏习惯，比如有事没事刷票圈，刷空间，刷微博，刷简书，玩游戏等等等等，现在没事就想着多刷两道题吧，虽说也没有完全戒除，不知不觉中相比学期初也是有了很大的进步。甚至，在之前喜欢和人聊天(其实都是精力无处释放吧)，而现在很多时候别人发个什么过来我都懒得回，还不如看两道题呢～<br>不知不觉中它们已经占据了我生活的大半部分，别人上课时，我在刷题；别人约饭时，我在刷题；别人聊天时，我在刷题；别人入睡时，我还在刷题。。。或许这样做并不是很有用，或许只是让自己越发的发现自己和别人的差距，但是，每解决一道难题时自己得到的满足是他人所体会不到的。<br>当然，凡事有利弊。ACMer毕竟还是少数优秀的人，你想挤进这个圈子而且并不满足于当分母，那就得放弃一些东西并加以足够的努力。而且，你身边的人不一定能理解，甚至有人会把你的刷题解读为所谓的“装逼”，对这其实也没啥好说的，层次不同，眼界不同。我原来也是一个相当爱美食，爱电影，爱玩的人，现在也尽量一切从简。甚至于今天有人在我旁边讨论最近上映的电影和即将上映的电影，我一无所知，这放在以前是不可想象的。<br>转眼间圣诞和元旦都快到了，大家都各有各的安排，而我只是想着这周，这两周的训练计划能不能完成。<br>利与弊，就交给时间去判断吧，一年之后，再做定论。<br>所以，关于acm这个事儿，我觉得，还是得坚持下去的，然后，你就能很清晰的体会到，你与这个领域中，顶尖的那一群人的差距。你是被差距吓跑，还是想尽办法去缩小差距？这一切都只取决于你自己。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
